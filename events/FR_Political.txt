###########################
# Political Events
###########################
# By Kallar, Nijato, Sir Rogers and Zankoas
###########################

add_namespace = fx.political

# Calculate sent expeditionary force variables
country_event = {
	id = fx.political.210
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.210" }

	hidden = yes
	is_triggered_only = yes

	option = {
		set_variable = { expeditionary_division_sent = 0 }
		for_each_scope_loop = {
			array = faction_members
			if = {
				limit = {
					received_expeditionary_forces = { sender = ROOT value > 0 }
				}
				while_loop_effect = {
					limit = {
						received_expeditionary_forces = { sender = ROOT value > expeditionary_division_sent }
					}
					add_to_variable = { expeditionary_division_sent = 1 }
				}
			}
		}
		calculate_actual_division_number = yes
	}
}

# Calculate received expeditionary force variables
country_event = {
	id = fx.political.211
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.211" }

	hidden = yes
	is_triggered_only = yes

	option = {
		set_variable = { num_expeditionary_divisions_received = 0 }
		for_each_loop = {
			array = faction_members
			if = {
				limit = {
					received_expeditionary_forces = { sender = var:v value > 0 }
				}
				set_temp_variable = { expeditionary_division_received_temp = 0 }
				while_loop_effect = {
					limit = {
						received_expeditionary_forces = { sender = var:v value > expeditionary_division_received_temp }
					}
					add_to_temp_variable = { expeditionary_division_received_temp = 1 }
				}
				add_to_variable = { num_expeditionary_divisions_received = expeditionary_division_received_temp }
			}
		}
		calculate_actual_division_number = yes
	}
}

# Repeated check for whether an AI country should reduce its number of units
country_event = {
	id = fx.political.121
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.121" }

	hidden = yes
	is_triggered_only = yes

	option = {
		calculate_maximum_divisions = yes
		if = {
			limit = {
				is_ai = yes
				has_war = no
				num_divisions > 4
				OR = {
					has_excessive_army_size = yes
					needs_army_reduction_for_manpower = yes
					AND = {
						has_reached_maximum_divisions = yes
						NOT = { has_global_flag = KR_no_unit_limits }
					}
				}
				NOT = {
					any_other_country = {
						OR = {
							is_justifying_wargoal_against = ROOT
							has_wargoal_against = ROOT
							ROOT = { is_justifying_wargoal_against = PREV }
							ROOT = { has_wargoal_against = PREV }
						}
					}
				}
			}
			disband_twenty_percent_units = yes
			country_event = { id = fx.political.121 days = 7 random_hours = 72 }
		}
		else = {
			clr_country_flag = has_reduce_units_check
		}
	}
}

# Check whether a player should have mobilisation penalties
country_event = {
	id = fx.political.122
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.122" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		is_ai = no
		has_reached_maximum_divisions = yes
		NOT = {
			has_global_flag = KR_unit_limits_ai_only
			has_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		}
	}

	option = {
		calculate_mobilisation_penalty = yes
		add_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		country_event = { id = fx.political.123 days = 7 }
	}
}

# Check whether a player should still have mobilisation penalties
country_event = {
	id = fx.political.123
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.123" }

	hidden = yes
	is_triggered_only = yes

	trigger = {
		has_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
	}

	immediate = {
		country_event = { id = fx.political.123 days = 7 }
	}

	option = {
		if = {
			limit = {
				OR = {
					is_ai = yes
					has_reached_maximum_divisions = no
				}
			}
			clear_variable = mobilisation_penalty_var
			clear_variable = mobilisation_penalty_var_positive
			remove_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		}
		else = {
			calculate_maximum_divisions = yes
			calculate_mobilisation_penalty = yes
		}
	}
}

##################################
###	State Transfer Events   ###
##################################

# Puppeting
country_event = {
	id = fx.political.250
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.250 FROM = [From.GetName]" }
	title = fx.political.250.t
	desc = fx.political.250.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a #Regular Puppet
		if = {
			limit = {
				event_target:marked_country = { is_in_faction = yes }
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:marked_country = { leave_faction = yes }
		}
		event_target:to_be_overlord = { puppet = event_target:marked_country }
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:to_be_overlord = {
				faction_leader = { add_to_faction = event_target:marked_country }
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.b #Keep Old Government
		if = {
			limit = {
				event_target:marked_country = { is_in_faction = yes }
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:marked_country = { leave_faction = yes }
		}
		event_target:marked_country = { get_current_government_type = yes }
		event_target:to_be_overlord = { puppet = event_target:marked_country }
		custom_effect_tooltip = puppet_but_keep_government_tt
		event_target:marked_country = { restore_previous_government_type = yes }
		if = {
			limit = {
				event_target:to_be_overlord = {
					is_in_faction = yes
					NOT = { is_in_faction_with = event_target:marked_country }
				}
			}
			event_target:to_be_overlord = {
				faction_leader = { add_to_faction = event_target:marked_country }
			}
		}
		clear_global_event_target = to_be_overlord
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
		clear_global_event_target = to_be_overlord
	}
}

# Free Puppet
country_event = {
	id = fx.political.251
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.251 FROM = [From.GetName]" }
	title = fx.political.251.t
	desc = fx.political.251.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a
		event_target:marked_country = {
			overlord = {
				set_autonomy = {
					target = event_target:marked_country
					autonomy_state = autonomy_free
				}
			}
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
	}
}

# Add to Faction
country_event = {
	id = fx.political.252
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.252 FROM = [From.GetName]" }
	title = fx.political.252.t
	desc = fx.political.252.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		event_target:to_be_faction_leader = {
			faction_leader = {
				add_to_faction = event_target:marked_country
			}
		}
		clear_global_event_target = to_be_faction_leader
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
		clear_global_event_target = to_be_faction_leader
	}
}

# Make Faction Leader
country_event = {
	id = fx.political.253
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.253 FROM = [From.GetName]" }
	title = fx.political.253.t
	desc = fx.political.253.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a
		event_target:marked_country = {
			set_faction_leader = yes
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
	}
}

# Leave Faction
country_event = {
	id = fx.political.254
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.254 FROM = [From.GetName]" }
	title = fx.political.254.t
	desc = fx.political.254.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a
		event_target:marked_country = {
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
	}
}

# Peace
country_event = {
	id = fx.political.255
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.255 FROM = [From.GetName]" }
	title = fx.political.255.t
	desc = fx.political.255.d

	is_triggered_only = yes

	immediate = {
		hidden_effect = {
			event_target:marked_country = { save_event_target_as = white_peace_receiver }
		}
	}

	option = {
		name = fx.political.250.a
		event_target:peace_target = { white_peace_with_TARGET = yes }
		add_to_variable = { ROOT.update_stt_gui = 1 }
		clear_global_event_target = peace_target
	}
	option = {
		name = fx.political.255.b
		trigger = {
			event_target:marked_country = {
				OR = {
					is_subject = yes
					is_in_faction = yes
				}
			}
		}
		event_target:marked_country = {
			if = {
				limit = { is_subject = yes }
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
		}
		event_target:peace_target = { white_peace_with_TARGET = yes }
		add_to_variable = { ROOT.update_stt_gui = 1 }
		clear_global_event_target = peace_target
	}
	option = {
		name = fx.political.250.c
		clear_global_event_target = peace_target
	}
}

# Peace Out Everyone
country_event = {
	id = fx.political.256
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.256 FROM = [From.GetName]" }
	title = fx.political.256.t
	desc = fx.political.256.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a
		event_target:marked_country = {
			if = {
				limit = { is_subject = yes }
				overlord = {
					set_autonomy = {
						target = event_target:marked_country
						autonomy_state = autonomy_free
					}
				}
			}
			if = {
				limit = {
					is_in_faction = yes
					is_faction_leader = yes
				}
				dismantle_faction = yes
			}
			else_if = {
				limit = { is_in_faction = yes }
				leave_faction = yes
			}
			separate_peace_all_wars = yes
		}
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
	}
}

# Declare War
country_event = {
	id = fx.political.257
	immediate = { log = "[GetDateText]: [Root.GetName]: event fx.political.257 FROM = [From.GetName]" }
	title = fx.political.257.t
	desc = fx.political.257.d

	is_triggered_only = yes

	option = {
		name = fx.political.250.a
		event_target:marked_country = {
			declare_war_on = {
				target = event_target:war_target
				type = annex_everything
			}
			hidden_effect = {
				every_country = {
					limit = {
						is_ally_with = event_target:marked_country
						NOT = {
							tag = event_target:marked_country
							has_war_with = event_target:war_target
						}
					}
					meta_effect = {
						text = {
							add_to_war = {
								targeted_alliance = [ALLY]
								enemy = [ENEMY]
							}
						}
						ALLY = "[marked_country.GetTag]"
						ENEMY = "[war_target.GetTag]"
					}
				}
			}
		}
		clear_global_event_target = war_target
		add_to_variable = { ROOT.update_stt_gui = 1 }
	}
	option = {
		name = fx.political.250.c
		clear_global_event_target = war_target
	}
}
