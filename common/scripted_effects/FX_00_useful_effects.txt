#	Various useful scripted effects
#
#	Credit to the KR team, by Rylock
#	Changed to fit FR's ideologies and other tweaks by Arser

increase_mobilization = {
	if = {
		limit = {
			has_idea = civilian_economy
		}
		swap_ideas = {
			remove_idea = civilian_economy
			add_idea = low_economic_mobilisation
		}
		else_if = {
			limit = {
				has_idea = low_economic_mobilisation
			}
			swap_ideas = {
				remove_idea = low_economic_mobilisation
				add_idea = partial_economic_mobilisation
			}
		}
		else_if = {
			limit = {
				has_idea = partial_economic_mobilisation
			}
			swap_ideas = {
				remove_idea = partial_economic_mobilisation
				add_idea = war_economy
			}
		}
		else_if = {
			limit = {
				has_idea = war_economy
			}
			swap_ideas = {
				remove_idea = war_economy
				add_idea = tot_economic_mobilisation
			}
		}
		else = {

		}
	}
}

decrease_mobilisation = {
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = civilian_economy
		}
		else_if = {
			limit = {
				has_idea = partial_economic_mobilisation
			}
			swap_ideas = {
				remove_idea = partial_economic_mobilisation
				add_idea = low_economic_mobilisation
			}
		}
		else_if = {
			limit = {
				has_idea = war_economy
			}
			swap_ideas = {
				remove_idea = war_economy
				add_idea = partial_economic_mobilisation
			}
		}
		else_if = {
			limit = {
				has_idea = tot_economic_mobilisation
			}
			swap_ideas = {
				remove_idea = tot_economic_mobilisation
				add_idea = war_economy
			}
		}
	}
}

# removes the country in scope from all wars (separately - it won't end the wars)
separate_peace_all_wars = {
	if = {
		limit = { has_war = yes }
		custom_effect_tooltip = FX_separate_peace
		hidden_effect = {
			save_event_target_as = peace_country

			# first peace out with faction leaders
			every_enemy_country = {
				limit = {
					is_faction_leader = yes
				}
				event_target:peace_country = { white_peace = PREV }
			}

			# then all non-puppets whose faction leaders aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = yes
					faction_leader = { NOT = { has_war_with = ROOT } }
				}
				event_target:peace_country = { white_peace = PREV }
			}

			# then all non-puppets who aren't in factions
			every_enemy_country = {
				limit = {
					is_subject = no
					is_in_faction = no
				}
				event_target:peace_country = { white_peace = PREV }
			}

			# then all puppets whose overlords aren't in the war
			every_enemy_country = {
				limit = {
					is_subject = yes
					overlord = { NOT = { has_war_with = ROOT } }
				}
				event_target:peace_country = { white_peace = PREV }
			}
		}
	}
}

# removes all current ministers for the country in scope - no tooltips displayed
remove_every_minister = {
	hidden_effect = {
		remove_every_hog_trait = yes
		remove_every_for_trait = yes
		remove_every_eco_trait = yes
		remove_every_sec_trait = yes
	}
}

# removes all ministers but the Head of Government
remove_every_minister_but_hog = {
	hidden_effect = {
		remove_every_for_trait = yes
		remove_every_eco_trait = yes
		remove_every_sec_trait = yes
	}
}

# changes the government of the country in scope to that of ROOT (the country running the event)
copy_government_of_ROOT = {
	if = {
		limit = { ROOT = { has_government = vanguardist } }
		set_politics = { ruling_party = vanguardist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = collectivist } }
		set_politics = { ruling_party = collectivist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = libertarian_socialist } }
		set_politics = { ruling_party = libertarian_socialist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_democrat } }
		set_politics = { ruling_party = social_democrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_liberal } }
		set_politics = { ruling_party = social_liberal elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = market_liberal } }
		set_politics = { ruling_party = market_liberal elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_conservative } }
		set_politics = { ruling_party = social_conservative elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = authoritarian_democrat } }
		set_politics = { ruling_party = authoritarian_democrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = paternal_autocrat } }
		set_politics = { ruling_party = paternal_autocrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = national_populist } }
		set_politics = { ruling_party = national_populist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = valkist } }
		set_politics = { ruling_party = valkist elections_allowed = no }
	}
}

copy_government_idea_of_ROOT = {
	if = {
		limit = {
			ROOT = {
				has_idea = direct_democracy
			}
		}
		add_ideas = direct_democracy
	}
	if = {
		limit = {
			ROOT = {
				has_idea = presidential_republic
			}
		}
		add_ideas = presidential_republic
	}
	if = {
		limit = {
			ROOT = {
				has_idea = semi_presidential_republic
			}
		}
		add_ideas = semi_presidential_republic
	}
	if = {
		limit = {
			ROOT = {
				has_idea = parliamentary_republic
			}
		}
		add_ideas = parliamentary_republic
	}
	if = {
		limit = {
			ROOT = {
				has_idea = republican_dictatorship
			}
		}
		add_ideas = republican_dictatorship
	}
	if = {
		limit = {
			ROOT = {
				has_idea = theocratic_republic
			}
		}
		add_ideas = theocratic_republic
	}
	if = {
		limit = {
			ROOT = {
				has_idea = theocratic_dictatorship
			}
		}
		add_ideas = theocratic_dictatorship
	}
	if = {
		limit = {
			ROOT = {
				has_idea = one_party_dictatorship
			}
		}
		add_ideas = one_party_dictatorship
	}
	if = {
		limit = {
			ROOT = {
				has_idea = workers_republic
			}
		}
		add_ideas = workers_republic
	}
	if = {
		limit = {
			ROOT = {
				has_idea = communist_state
			}
		}
		add_ideas = communist_state
	}
	if = {
		limit = {
			ROOT = {
				has_idea = colonial_government
			}
		}
		add_ideas = colonial_government
	}
	if = {
		limit = {
			ROOT = {
				has_idea = absolute_monarchy
			}
		}
		add_ideas = absolute_monarchy
	}
	if = {
		limit = {
			ROOT = {
				has_idea = constitutional_monarchy
			}
		}
		add_ideas = constitutional_monarchy
	}
	if = {
		limit = {
			ROOT = {
				has_idea = elective_monarchy
			}
		}
		add_ideas = elective_monarchy
	}
	if = {
		limit = {
			ROOT = {
				has_idea = military_junta
			}
		}
		add_ideas = military_junta
	}
	if = {
		limit = {
			ROOT = {
				has_idea = revolutionary_movement
			}
		}
		add_ideas = revolutionary_movement
	}
	if = {
		limit = {
			ROOT = {
				has_idea = generic_government
			}
		}
		add_ideas = generic_government
	}
}

# the following effects are excellent for preserving a puppet's government so it doesn't change to the overlord
# use the first command in the scope of the about-to-be-puppeted country right before the puppet command is executed
# and then the second, also in the scope of the puppet, right after
get_current_government_type = {
	clr_country_flag = was_libertarian_socialist
	clr_country_flag = was_collectivist
	clr_country_flag = was_vanguardist
	clr_country_flag = was_social_democrat
	clr_country_flag = was_social_liberal
	clr_country_flag = was_market_liberal
	clr_country_flag = was_social_conservative
	clr_country_flag = was_authoritarian_democrat
	clr_country_flag = was_paternal_autocrat
	clr_country_flag = was_national_populist
	clr_country_flag = was_valkist

	set_variable = { var = libsoc value = party_popularity@libertarian_socialist }
	set_variable = { var = collie value = party_popularity@collectivist }
	set_variable = { var = vang value = party_popularity@vanguardist }
	set_variable = { var = socdem value = party_popularity@social_democrat }
	set_variable = { var = soclib value = party_popularity@social_liberal }
	set_variable = { var = marklib value = party_popularity@market_liberal }
	set_variable = { var = soccon value = party_popularity@social_conservative }
	set_variable = { var = authdem value = party_popularity@authoritarian_democrat }
	set_variable = { var = pataut value = party_popularity@paternal_autocrat }
	set_variable = { var = natpop value = party_popularity@national_populist }
	set_variable = { var = valk value = party_popularity@valkist }

	if = {
		limit = { has_government = libertarian_socialist }
		set_country_flag = was_libertarian_socialist
	}
	if = {
		limit = { has_government = collectivist }
		set_country_flag = was_collectivist
	}
	if = {
		limit = { has_government = vanguardist }
		set_country_flag = was_vanguardist
	}
	if = {
		limit = { has_government = social_democrat }
		set_country_flag = was_social_democrat
	}
	if = {
		limit = { has_government = social_liberal }
		set_country_flag = was_social_liberal
	}
	if = {
		limit = { has_government = market_liberal }
		set_country_flag = was_market_liberal
	}
	if = {
		limit = { has_government = social_conservative }
		set_country_flag = was_social_conservative
	}
	if = {
		limit = { has_government = authoritarian_democrat }
		set_country_flag = was_authoritarian_democrat
	}
	if = {
		limit = { has_government = paternal_autocrat }
		set_country_flag = was_paternal_autocrat
	}
	if = {
		limit = { has_government = national_populist }
		set_country_flag = was_national_populist
	}
	if = {
		limit = { has_government = valkist }
		set_country_flag = was_valkist
	}
}

restore_previous_government_type = {
	hidden_effect = {
		if = {
			limit = { has_country_flag = was_libertarian_socialist }
			set_politics = { ruling_party = libertarian_socialist }
		}
		if = {
			limit = { has_country_flag = was_collectivist }
			set_politics = { ruling_party = collectivist }
		}
		if = {
			limit = { has_country_flag = was_vanguardist }
			set_politics = { ruling_party = vanguardist }
		}
		if = {
			limit = { has_country_flag = was_social_democrat }
			set_politics = { ruling_party = social_democrat }
		}
		if = {
			limit = { has_country_flag = was_social_liberal }
			set_politics = { ruling_party = social_liberal }
		}
		if = {
			limit = { has_country_flag = was_market_liberal }
			set_politics = { ruling_party = market_liberal }
		}
		if = {
			limit = { has_country_flag = was_social_conservative }
			set_politics = { ruling_party = social_conservative }
		}
		if = {
			limit = { has_country_flag = was_authoritarian_democrat }
			set_politics = { ruling_party = authoritarian_democrat }
		}
		if = {
			limit = { has_country_flag = was_paternal_autocrat }
			set_politics = { ruling_party = paternal_autocrat }
		}
		if = {
			limit = { has_country_flag = was_national_populist }
			set_politics = { ruling_party = national_populist }
		}
		if = {
			limit = { has_country_flag = was_valkist }
			set_politics = { ruling_party = valkist }
		}
		add_popularity = { ideology = libertarian_socialist popularity = -1.0 }
		add_popularity = { ideology = libertarian_socialist popularity = libsoc }
		add_popularity = { ideology = collectivist popularity = -1.0 }
		add_popularity = { ideology = collectivist popularity = collie }
		add_popularity = { ideology = vanguardist popularity = -1.0 }
		add_popularity = { ideology = vanguardist popularity = vang }
		add_popularity = { ideology = social_democrat popularity = -1.0 }
		add_popularity = { ideology = social_democrat popularity = socdem }
		add_popularity = { ideology = social_liberal popularity = -1.0 }
		add_popularity = { ideology = social_liberal popularity = soclib }
		add_popularity = { ideology = market_liberal popularity = -1.0 }
		add_popularity = { ideology = market_liberal popularity = marklib }
		add_popularity = { ideology = social_conservative popularity = -1.0 }
		add_popularity = { ideology = social_conservative popularity = soccon }
		add_popularity = { ideology = authoritarian_democrat popularity = -1.0 }
		add_popularity = { ideology = authoritarian_democrat popularity = authdem }
		add_popularity = { ideology = paternal_autocrat popularity = -1.0 }
		add_popularity = { ideology = paternal_autocrat popularity = pataut }
		add_popularity = { ideology = national_populist popularity = -1.0 }
		add_popularity = { ideology = national_populist popularity = natpop }
		add_popularity = { ideology = valkist popularity = -1.0 }
		add_popularity = { ideology = valkist popularity = valk }

		clear_variable = libsoc
		clear_variable = collie
		clear_variable = valk
		clear_variable = socdem
		clear_variable = soclib
		clear_variable = marklib
		clear_variable = soccon
		clear_variable = authdem
		clear_variable = pataut
		clear_variable = natpop
		clear_variable = valk
	}
}

force_recalculate_factories = {
	hidden_effect = {
		if = {
			limit = { has_idea = undisturbed_isolation }
			add_ideas = isolation
			add_ideas = undisturbed_isolation
		}
		else_if = {
			limit = { has_idea = isolation }
			add_ideas = civilian_economy
			add_ideas = isolation
		}
		else_if = {
			limit = { has_idea = civilian_economy }
			add_ideas = low_economic_mobilisation
			add_ideas = civilian_economy
		}
		else_if = {
			limit = { has_idea = low_economic_mobilisation }
			add_ideas = partial_economic_mobilisation
			add_ideas = low_economic_mobilisation
		}
		else_if = {
			limit = { has_idea = partial_economic_mobilisation }
			add_ideas = war_economy
			add_ideas = partial_economic_mobilisation
		}
		else_if = {
			limit = { has_idea = war_economy }
			add_ideas = tot_economic_mobilisation
			add_ideas = war_economy
		}
		else_if = {
			limit = { has_idea = tot_economic_mobilisation }
			add_ideas = war_economy
			add_ideas = tot_economic_mobilisation
		}
	}
}

embargo_ROOT = {
	if = {
		limit = { has_dlc_bba = no }
		add_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
		reverse_add_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
		else = {
			send_embargo = ROOT
		}
	}
}

clear_embargo_ROOT = {
	if = {
		limit = { has_dlc_bba = no }
		remove_opinion_modifier = {
			modifier = embargo
			target = ROOT
		}
		ROOT = {
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
		else = {
			break_embargo = ROOT
		}
	}
}

embargo_PREV = {
	if = {
		limit = { has_dlc_bba = no }
		add_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
		reverse_add_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
		else = {
			send_embargo = PREV
		}
	}
}

clear_embargo_PREV = {
	if = {
		limit = { has_dlc_bba = no }
		remove_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
		FROM = {
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
		else = {
			break_embargo = PREV
		}
	}
}

embargo_FROM = {
	if = { 
		limit = { has_dlc_bba = yes }
		add_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
		reverse_add_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
		else = {
			send_embargo = FROM
		}
	}
}

clear_embargo_FROM = {
	if = {
		limit = { has_dlc_bba = no }
		remove_opinion_modifier = {
			modifier = embargo
			target = FROM
		}
		FROM = {
			remove_opinion_modifier = {
				modifier = embargo
				target = PREV
			}
		}
		else = {
			break_embargo = FROM
		}
	}
	
}


destroy_all_ships = {
	destroy_ships = {
		type = ship_hull_light
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_panzerschiff
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_coastal_defense_ship
		count = all
	}
	destroy_ships = {
		type = ship_hull_pre_dreadnought
		count = all
	}
	destroy_ships = {
		type = ship_hull_heavy
		count = all
	}
	destroy_ships = {
		type = ship_hull_super_heavy_1
		count = all
	}
	destroy_ships = {
		type = ship_hull_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_bb
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_ca
		count = all
	}
}

# To quickly become government in exile through console, do: `e become_goi`
# become_goi = {
	# 	become_exiled_in = {
		# 		target = GER
		# 		legitimacy = 10
		# 	}
	# }

# changes the popularites of the country in scope to that of ROOT (the country running the event)
copy_popularities_of_ROOT = {
	hidden_effect = {
		set_popularities = {
			vanguardist = ROOT.party_popularity_100@vanguardist
			collectivist = ROOT.party_popularity_100@collectivist
			libertarian_socialist = ROOT.party_popularity_100@libertarian_socialist
			social_democrat = ROOT.party_popularity_100@social_democrat
			social_liberal = ROOT.party_popularity_100@social_liberal
			market_liberal = ROOT.party_popularity_100@market_liberal
			social_conservative = ROOT.party_popularity_100@social_conservative
			authoritarian_democrat = ROOT.party_popularity_100@authoritarian_democrat
			paternal_autocrat = ROOT.party_popularity_100@paternal_autocrat
			national_populist = ROOT.party_popularity_100@national_populist
			valkist = ROOT.party_popularity_100@valkist
		}
	}
}

# for testing purposes
all_thema = {
	every_other_country = {
		meta_effect = {
			text = {
				set_cosmetic_tag = [TAG]_THEMA
			}
			TAG = "[PREV.GetTag]"
		}
	}
}

# make_thema TAG in console
d_make_thema = {
	for_each_scope_loop = {
		array = args
		set_temp_variable = {
			tag_to_add_to_byz_commonwealth = THIS
		}
		BYZ_add_to_commonwealth = yes
		drop_cosmetic_tag = yes
		meta_effect = {
			text = {
				set_cosmetic_tag = [BYZPuppetTag]_THEMA
			}
			BYZPuppetTag = "[THIS.GetTag]"
		}
		log = "[THIS.GetName] became a Thema of [FROM.GetName]"
	}
}



# How to use:
#
#	increase_conscription = yes
#	decrease_conscription = yes
#

increase_conscription = {
	if = {
		limit = {
			has_idea = all_adults_serve
		}
		swap_ideas = {
			remove_idea = all_adults_serve
			add_idea = scraping_the_barrel
		}
	}
	if = {
		limit = {
			has_idea = service_by_requirement
		}
		swap_ideas = {
			remove_idea = service_by_requirement
			add_idea = all_adults_serve
		}
	}
	if = {
		limit = {
			has_idea = extensive_conscription
		}
		swap_ideas = {
			remove_idea = extensive_conscription
			add_idea = service_by_requirement
		}
	}
	if = {
		limit = {
			has_idea = limited_conscription
		}
		swap_ideas = {
			remove_idea = limited_conscription
			add_idea = extensive_conscription
		}
	}
	if = {
		limit = {
			has_idea = volunteer_only
		}
		swap_ideas = {
			remove_idea = volunteer_only
			add_idea = limited_conscription
		}
	}
	if = {
		limit = {
			has_idea = disarmed_nation
		}
		swap_ideas = {
			remove_idea = disarmed_nation
			add_idea = volunteer_only
		}
	}
}

decrease_conscription = {
	if = {
		limit = {
			has_idea = volunteer_only
		}
		swap_ideas = {
			remove_idea = volunteer_only
			add_idea = disarmed_nation
		}
	}
	if = {
		limit = {
			has_idea = limited_conscription
		}
		swap_ideas = {
			remove_idea = limited_conscription
			add_idea = volunteer_only
		}
	}
	if = {
		limit = {
			has_idea = extensive_conscription
		}
		swap_ideas = {
			remove_idea = extensive_conscription
			add_idea = limited_conscription
		}
	}
	if = {
		limit = {
			has_idea = service_by_requirement
		}
		swap_ideas = {
			remove_idea = service_by_requirement
			add_idea = extensive_conscription
		}
	}
	if = {
		limit = {
			has_idea = all_adults_serve
		}
		swap_ideas = {
			remove_idea = all_adults_serve
			add_idea = service_by_requirement
		}
	}
	if = {
		limit = {
			has_idea = scraping_the_barrel
		}
		swap_ideas = {
			remove_idea = scraping_the_barrel
			add_idea = all_adults_serve
		}
	}
}

# How to use:
#
#	replace_civ_with_arms_factories = yes
#	^ Replace 5 Civilian Factories with 5 Arms factories.
#
#	replace_arms_with_civ_factories = yes
#	^ Replace 5 Arms factories with 5 Civilian Factories.

replace_civ_with_arms_factories = {

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			industrial_complex > 0
		}
		remove_building = {
			type = industrial_complex
			level = 1
		}
		add_building_construction = {
			type = arms_factory
			level = 1
			instant_build = yes
		}
	}
}

replace_arms_with_civ_factories = {

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			arms_factory > 0
		}
		remove_building = {
			type = arms_factory
			level = 1
		}
		add_building_construction = {
			type = industrial_complex
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			arms_factory > 0
		}
		remove_building = {
			type = arms_factory
			level = 1
		}
		add_building_construction = {
			type = industrial_complex
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			arms_factory > 0
		}
		remove_building = {
			type = arms_factory
			level = 1
		}
		add_building_construction = {
			type = industrial_complex
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			arms_factory > 0
		}
		remove_building = {
			type = arms_factory
			level = 1
		}
		add_building_construction = {
			type = industrial_complex
			level = 1
			instant_build = yes
		}
	}

	random_owned_state = {
		limit = {
			is_fully_controlled_by = ROOT
			arms_factory > 0
		}
		remove_building = {
			type = arms_factory
			level = 1
		}
		add_building_construction = {
			type = industrial_complex
			level = 1
			instant_build = yes
		}
	}
}

join_entente = { # ROOT
	if = {
		limit = {
			OR = {
				ITA = { is_faction_leader = yes has_idea = ITA_entente_leader }
				FRA = { is_faction_leader = yes has_idea = FRA_entente_leader }
			}
		}
		add_to_faction = ROOT
		add_ideas = GEN_entente_member
	}
}

join_entente_FROM = { # FROM
	if = {
		limit = {
			OR = {
				ITA = { is_faction_leader = yes has_idea = ITA_entente_leader }
				FRA = { is_faction_leader = yes has_idea = FRA_entente_leader }
			}
		}
		add_to_faction = FROM
		add_ideas = GEN_entente_member
	}
}

join_entente_PREV = { # PREV
	if = {
		limit = {
			OR = {
				ITA = { is_faction_leader = yes has_idea = ITA_entente_leader }
				FRA = { is_faction_leader = yes has_idea = FRA_entente_leader }
			}
		}
		add_to_faction = PREV
		add_ideas = GEN_entente_member
	}
}

### Mobilisation Effects
#
# How to use:
#

disband_twenty_percent_units = {
	save_event_target_as = disband_country
	XXB = {
		set_temp_variable = {
			old_manpower = manpower_k
		}
	}
	random_state = {
		limit = {
			impassable = yes
			is_fully_controlled_by = owner
		}
		owner = { save_event_target_as = disband_state_owner }
		save_event_target_as = disband_state
		XXB = { set_state_owner = PREV }
	}
	transfer_units_fraction = {
		target = XXB
		size = 0
		army_ratio = 0.2
		keep_unit_leaders_trigger = {
			always = yes
		}
	}
	XXB = {
		delete_unit = {
			disband = yes
		}
		set_temp_variable = {
			manpower_diff = manpower_k
		}
		subtract_from_temp_variable = {
			manpower_diff = old_manpower
		}
		while_loop_effect = { #avoid overflows
			limit = { check_variable = { manpower_diff > 1 } }
			subtract_from_temp_variable = { manpower_diff = 1 }
			event_target:disband_country = { add_manpower = 1000 }
			add_manpower = -1000
		}
		multiply_temp_variable = {
			manpower_diff = 1000
		}
		event_target:disband_country = { add_manpower = PREV.manpower_diff }
		multiply_temp_variable = {
			manpower_diff = -1
		}
		add_manpower = manpower_diff
	}
	event_target:disband_state = {
		event_target:disband_state_owner = { set_state_owner = PREV }
	}
	annex_country = {
		target = XXB
		transfer_troops = no
	}
}

calculate_manpower_based_on_compliance = {
	set_temp_variable = { state_manpower = 0.02 }
	add_to_temp_variable = { state_manpower = modifier@local_non_core_manpower }
	multiply_temp_variable = { state_manpower = state_population_k }
}

calculate_available_factories_based_on_compliance = {
	set_temp_variable = { state_factories_non_core = building_level@industrial_complex }
	add_to_temp_variable = { state_factories_non_core = building_level@arms_factory }
	add_to_temp_variable = { state_factories_non_core = building_level@dockyard }

	set_temp_variable = { compliance_multiplier = 0.75 }
	add_to_temp_variable = { compliance_multiplier = modifier@local_factories } #negative
	add_to_temp_variable = { compliance_multiplier = 0.25 }
	clamp_temp_variable = { var = compliance_multiplier max = 1 }

	multiply_temp_variable = { state_factories_non_core = compliance_multiplier }
	round_temp_variable = state_factories_non_core
	add_to_temp_variable = { factory_points = state_factories_non_core }
}
calculate_actual_division_number = {
	set_variable = { num_actual_divisions = num_divisions }
	subtract_from_variable = { num_actual_divisions = num_fake_intel_divisions }
	subtract_from_variable = { num_actual_divisions = num_expeditionary_divisions_received }
	add_to_variable = { num_actual_divisions = num_expeditionary_divisions_sent }
}
calculate_maximum_divisions = {
	### calculate base values - population and total factory count
	clear_variable = non_core_base
	clear_variable = base_units
	set_temp_variable = { factory_points = 0 }

	set_variable = { base_states = 0 }
	### normal behaviour - check all owned states of PREV
	add_to_variable = { base_states = num_owned_states }
	every_owned_state = {
		if = {
			limit = { is_core_of = PREV }
			add_to_variable = { PREV.base_units = state_population_k }

			add_to_temp_variable = { factory_points = building_level@industrial_complex }
			add_to_temp_variable = { factory_points = building_level@arms_factory }
			add_to_temp_variable = { factory_points = building_level@dockyard }
		}
		else = {
			calculate_manpower_based_on_compliance = yes
			add_to_variable = { PREV.non_core_base = state_manpower }

			calculate_available_factories_based_on_compliance = yes
		}
	}

	### if in a civil war, count the other sides' states as well
	if = {
		limit = { has_civil_war = yes }
		every_enemy_country = {
			limit = { civilwar_target = PREV }
			every_owned_state = {
				if = {
					limit = { is_core_of = PREV.PREV }
					add_to_variable = { PREV.PREV.base_states = 1 }
					add_to_variable = { PREV.PREV.base_units = state_population_k }

					add_to_temp_variable = { factory_points = building_level@industrial_complex }
					add_to_temp_variable = { factory_points = building_level@arms_factory }
					add_to_temp_variable = { factory_points = building_level@dockyard }
				}
				else = {
					calculate_manpower_based_on_compliance = yes
					add_to_variable = { PREV.PREV.non_core_base = state_manpower }

					calculate_available_factories_based_on_compliance = yes
				}
			}
		}
	}

	### if an overlord, check if any puppets should transfer part of their bases
	clear_variable = subject_states
	clear_variable = subject_base_units
	clear_variable = subject_non_core_base
	if = {
		limit = { num_subjects > 0 }
		every_subject_country = {
			limit = { check_variable = { modifier@unit_limit_subject_bonus > 0 } }

			set_temp_variable = { states_temp = num_owned_states }
			multiply_temp_variable = { states_temp = modifier@unit_limit_subject_bonus }
			add_to_variable = { PREV.subject_states = states_temp }

			set_temp_variable = { factories_temp = num_of_owned_factories }
			multiply_temp_variable = { factories_temp = modifier@unit_limit_subject_bonus }
			add_to_temp_variable = { factory_points = factories_temp }

			set_temp_variable = { base_units_temp = 0 }
			set_temp_variable = { non_core_base_temp = 0 }
			every_owned_state = {
				if = {
					limit = { is_core_of = PREV }
					add_to_temp_variable = { base_units_temp = state_population_k }

					add_to_temp_variable = { factory_points = building_level@industrial_complex }
					add_to_temp_variable = { factory_points = building_level@arms_factory }
					add_to_temp_variable = { factory_points = building_level@dockyard }
				}
				else = {
					calculate_manpower_based_on_compliance = yes
					add_to_temp_variable = { non_core_base_temp = state_manpower }

					calculate_available_factories_based_on_compliance = yes
				}
			}
			multiply_temp_variable = { base_units_temp = modifier@unit_limit_subject_bonus }
			add_to_variable = { PREV.subject_base_units = base_units_temp }

			multiply_temp_variable = { non_core_base_temp = modifier@unit_limit_subject_bonus }
			add_to_variable = { PREV.subject_non_core_base = non_core_base_temp }
		}
		add_to_variable = { base_states = subject_states }
		add_to_variable = { base_units = subject_base_units }
		divide_variable = { subject_base_units = 1000 } #for the tooltip

		# non-cores
		add_to_variable = { base_units = subject_non_core_base }
		divide_variable = { subject_non_core_base = 1000 } #for the tooltip
	}

	# non-cores
	add_to_variable = { base_units = non_core_base }
	divide_variable = { non_core_base = 1000 } #for the tooltip

	# base unit count = population / 1000
	divide_variable = { base_units = 1000 }

	# calculate core population for the tooltip
	set_variable = { core_base = base_units }
	subtract_from_variable = { core_base = non_core_base }
	subtract_from_variable = { core_base = subject_base_units }
	subtract_from_variable = { core_base = subject_non_core_base }

	# add number of states to the base
	add_to_variable = { base_units = base_states }

	# calculate the modifier -- 1 + [ ( industry - population ) / ( industry + population ) ]
	set_variable = { divisor = factory_points }
	add_to_variable = { divisor = base_units }

	set_variable = { industry_factor = factory_points }
	subtract_from_variable = { industry_factor = base_units }
	divide_variable = { industry_factor = divisor }
	add_to_variable = { industry_factor = 1 }

	# minimum modifier -- x0.5
	set_variable = { industry_factor_uncapped = industry_factor }
	clamp_variable = { var = industry_factor min = 0.5 }

	set_variable = { max_divisions = base_units }
	multiply_variable = { max_divisions = industry_factor }

	# apply multipliers
	set_temp_variable = { limit_multiplier = 1 }
	add_to_temp_variable = { limit_multiplier = modifier@unit_limit_factory_bonus } # +10% per economy law level above civilian economy
	if = {
		limit = { is_faction_leader = yes }
		add_to_temp_variable = { limit_multiplier = 0.15 } # +15% for faction leaders
	}
	multiply_variable = { max_divisions = limit_multiplier }

	# all countries get five free divisions
	add_to_variable = { max_divisions = 5 }

	# add any specific bonuses to the limit
	add_to_variable = { max_divisions = modifier@unit_limit_bonus }

	round_variable = max_divisions
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_actual_divisions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 1 }

	divide_variable = { mobilisation_penalty_var = 4 }
	clamp_variable = {
		var = mobilisation_penalty_var
		min = -0.25
		max = 0.25
	}

	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }

	#for negative effects
	multiply_variable = { mobilisation_penalty_var = -1 }
}

unit_limit_calculation_effect = {
	calculate_maximum_divisions = yes

	if = {
		limit = {
			NOT = { has_game_rule = { rule = unit_limit_options option = NONE } }
			OR = {
				has_game_rule = { rule = unit_limit_options option = STANDARD }
				is_ai = yes
			}
		}
		# step one, calculate num of actual divisions
		set_variable = { num_actual_divisions = num_divisions }

		# ignore fake intel divisions
		subtract_from_variable = { num_actual_divisions = num_fake_intel_divisions }

		# expeditionaries should count towards the sender's limit, not the receiver's
		clear_variable = num_expeditionary_divisions_sent
		clear_variable = num_expeditionary_divisions_received
		for_each_scope_loop = {
			array = faction_members
			if = {
				limit = {
					received_expeditionary_forces = { sender = PREV value > 0 }
				}
				set_temp_variable = { expeditionary_division_sent_temp = 0 }
				while_loop_effect = {
					limit = {
						received_expeditionary_forces = { sender = PREV value > expeditionary_division_sent_temp }
					}
					add_to_temp_variable = { expeditionary_division_sent_temp = 1 }
				}
				add_to_variable = { PREV.num_expeditionary_divisions_sent = expeditionary_division_sent_temp }
			}
			if = {
				limit = {
					PREV = { received_expeditionary_forces = { sender = PREV value > 0 } }
				}
				set_temp_variable = { expeditionary_division_received_temp = 0 }
				while_loop_effect = {
					limit = {
						PREV = { received_expeditionary_forces = { sender = PREV value > expeditionary_division_received_temp } }
					}
					add_to_temp_variable = { expeditionary_division_received_temp = 1 }
				}
				add_to_variable = { PREV.num_expeditionary_divisions_received = expeditionary_division_received_temp }
			}
		}
		subtract_from_variable = { num_actual_divisions = num_expeditionary_divisions_received }
		add_to_variable = { num_actual_divisions = num_expeditionary_divisions_sent }

		# if already suffering penalties, check if they still apply
		if = {
			limit = { has_dynamic_modifier = { modifier = mobilisation_penalty_modifier } }
			if = {
				limit = {
					OR = {
						is_ai = yes
						has_reached_maximum_divisions = no
					}
				}
				clear_variable = mobilisation_penalty_var
				clear_variable = mobilisation_penalty_var_positive
				remove_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
			}
			else = {
				calculate_mobilisation_penalty = yes
			}
		}
		# if not suffering penalties, check if they should apply
		else_if = {
			limit = {
				is_ai = no
				has_reached_maximum_divisions = yes
			}
			calculate_mobilisation_penalty = yes
			add_dynamic_modifier = { modifier = mobilisation_penalty_modifier }
		}
	}

	# check if demobilisation missions should apply
	# if = {
		# 	limit = {
			# 		is_ai = no
			# 		has_war = no
			# 		has_game_rule = { rule = demobilization_options option = STANDARD }
			# 	}
		# 	if = {
			# 		limit = {
				# 			has_unsupported_economic_law = yes
				# 			NOT = { has_active_mission = demobilization_economic }
				# 		}
			# 		activate_mission = demobilization_economic
			# 	}
		# 	if = {
			# 		limit = {
				# 			has_unsupported_manpower_law = yes
				# 			NOT = { has_active_mission = demobilization_manpower }
				# 		}
			# 		activate_mission = demobilization_manpower
			# 	}
		# }
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_divisions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 1 }

	divide_variable = { mobilisation_penalty_var = 4 }
	clamp_variable = {
		var = mobilisation_penalty_var
		min = -0.25
		max = 0.25
	}

	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }

	#for negative effects
	multiply_variable = { mobilisation_penalty_var = -1 }
}

increase_ruling_party_popularity_by_5 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.05
	}
}
increase_ruling_party_popularity_by_10 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.10
	}
}

increase_ruling_party_popularity_by_15 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.15
	}
}

increase_ruling_party_popularity_by_20 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.20
	}
}

increase_ruling_party_popularity_by_25 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.25
	}
}

increase_ruling_party_popularity_by_30 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.30
	}
}

increase_ruling_party_popularity_by_35 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.35
	}
}

increase_ruling_party_popularity_by_40 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.40
	}
}

increase_ruling_party_popularity_by_45 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.45
	}
}

increase_ruling_party_popularity_by_50 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = 0.50
	}
}

decrease_ruling_party_popularity_by_5 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.05
	}
}

decrease_ruling_party_popularity_by_10 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.10
	}
}

decrease_ruling_party_popularity_by_15 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.15
	}
}

decrease_ruling_party_popularity_by_20 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.20
	}
}

decrease_ruling_party_popularity_by_25 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.25
	}
}

decrease_ruling_party_popularity_by_30 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.30
	}
}

decrease_ruling_party_popularity_by_35 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.35
	}
}

decrease_ruling_party_popularity_by_40 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.40
	}
}

decrease_ruling_party_popularity_by_45 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.45
	}
}

decrease_ruling_party_popularity_by_50 = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = -0.50
	}
}

# to use:
#
# set_temp_variable = { ruling_party_pop_to_decrease = 0.13 }
# decrease_ruling_party_pop_by_num = yes

decrease_ruling_party_pop_by_num = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = var:ruling_party_pop_to_decrease # change to temp_var: if doesn't work
	}
}

increase_ruling_party_pop_by_num = {
	add_popularity = {
		ideology = var:current_party_ideology_group
		popularity = var:ruling_party_pop_to_increase # change to temp_var: if doesn't work
	}
}

# Auto-Generated; use the tool

remove_every_hog_trait = {
	hidden_effect = {
		remove_ideas_with_trait = hog_red_chairmen
		remove_ideas_with_trait = hog_ambitious_union_boss
		remove_ideas_with_trait = hog_backroom_backstabber
		remove_ideas_with_trait = hog_charismatic_charmer
		remove_ideas_with_trait = hog_corporate_suit
		remove_ideas_with_trait = hog_flamboyant_tough_guy
		remove_ideas_with_trait = hog_happy_amateur
		remove_ideas_with_trait = hog_local_tyrant
		remove_ideas_with_trait = hog_naive_optimist
		remove_ideas_with_trait = hog_old_admiral
		remove_ideas_with_trait = hog_old_air_marshal
		remove_ideas_with_trait = hog_old_general
		remove_ideas_with_trait = hog_political_protege
		remove_ideas_with_trait = hog_pragmatic_statesman
		remove_ideas_with_trait = hog_reformist_soldier
		remove_ideas_with_trait = hog_respected_war_hero
		remove_ideas_with_trait = hog_silent_workhorse
		remove_ideas_with_trait = hog_smiling_oilman
		remove_ideas_with_trait = hog_spiritual_leader
		remove_ideas_with_trait = hog_underground_figurehead
		remove_ideas_with_trait = hog_undergrounder_figurehead
		remove_ideas_with_trait = hog_antiwar_veteran
		remove_ideas_with_trait = hog_state_secularist
		remove_ideas_with_trait = hog_determined_populist
		remove_ideas_with_trait = hog_revanchist_conspirator
		remove_ideas_with_trait = hog_old_compromiser
		remove_ideas_with_trait = hog_iron_heel
		remove_ideas_with_trait = hog_oligarchic_council
		remove_ideas_with_trait = hog_generic_portrait
		remove_ideas_with_trait = hog_freikorps_veteran
		remove_ideas_with_trait = hog_lauriers_heir
		remove_ideas_with_trait = hog_king_emperor
		remove_ideas_with_trait = hog_mad_jack
		remove_ideas_with_trait = hog_meme_man
		remove_ideas_with_trait = hog_philosopher_general
		remove_ideas_with_trait = hog_ruthless_warlord
		remove_ideas_with_trait = hog_democratic_tyrant
		remove_ideas_with_trait = hog_privileged_socialist
		remove_ideas_with_trait = hog_sincere_internationalist
		remove_ideas_with_trait = hog_accomplished_diplomat
		remove_ideas_with_trait = hog_kingsmaker
		remove_ideas_with_trait = hog_holy_vice_marshal
		remove_ideas_with_trait = hog_nationalist_patriot
	}
}

remove_every_eco_trait = {
	hidden_effect = {
		remove_ideas_with_trait = eco_administrative_genius
		remove_ideas_with_trait = eco_balanced_budget_economy
		remove_ideas_with_trait = eco_bank_president
		remove_ideas_with_trait = eco_construction_magnate
		remove_ideas_with_trait = eco_corrupt_kleptocrat
		remove_ideas_with_trait = eco_industrial_chemist
		remove_ideas_with_trait = eco_industrialiser
		remove_ideas_with_trait = eco_keynesian_economy
		remove_ideas_with_trait = eco_laissez_faire_capitalist
		remove_ideas_with_trait = eco_military_entrepreneur
		remove_ideas_with_trait = eco_mixed_economy
		remove_ideas_with_trait = eco_oil_baron
		remove_ideas_with_trait = eco_planned_economy_proponent
		remove_ideas_with_trait = eco_reformer
		remove_ideas_with_trait = eco_devoted_monopoly_buster
		remove_ideas_with_trait = eco_resource_industrialist
		remove_ideas_with_trait = eco_steel_magnate
		remove_ideas_with_trait = eco_railway_magnate
		remove_ideas_with_trait = eco_theoretical_scientist
		remove_ideas_with_trait = eco_imbedded_unioneer
		remove_ideas_with_trait = eco_national_liberal
		remove_ideas_with_trait = eco_air_superiority_proponent
		remove_ideas_with_trait = eco_battlefield_support_proponent
		remove_ideas_with_trait = eco_battle_fleet_proponent
		remove_ideas_with_trait = eco_carrier_proponent
		remove_ideas_with_trait = eco_infantry_proponent
		remove_ideas_with_trait = eco_naval_aviation_proponent
		remove_ideas_with_trait = eco_u_boat_proponent
		remove_ideas_with_trait = eco_tank_proponent
		remove_ideas_with_trait = eco_trade_proponent
		remove_ideas_with_trait = eco_strategic_destruction_proponent
		remove_ideas_with_trait = eco_socred_economist
		remove_ideas_with_trait = eco_vernacular_industrialiser
		remove_ideas_with_trait = eco_Haushuhn_Herrenvolk
	}
}

remove_every_for_trait = {
	hidden_effect = {
		remove_ideas_with_trait = eco_the_minister_for_everything
		remove_ideas_with_trait = for_biased_intellectual
		remove_ideas_with_trait = for_ideological_crusader
		remove_ideas_with_trait = for_apologetic_clerk
		remove_ideas_with_trait = for_iron_fisted_brute
		remove_ideas_with_trait = for_hawkish_intervener
		remove_ideas_with_trait = for_relations_expert
		remove_ideas_with_trait = for_great_compromiser
		remove_ideas_with_trait = for_general_staffer
		remove_ideas_with_trait = for_the_cloak_n_dagger_schemer
		remove_ideas_with_trait = for_foreign_sympathizer
		remove_ideas_with_trait = for_world_patrician
		remove_ideas_with_trait = for_moderate_among_radicals
		remove_ideas_with_trait = for_radical_among_moderates
	}
}

remove_every_sec_trait = {
	hidden_effect = {
		remove_ideas_with_trait = sec_back_stabber
		remove_ideas_with_trait = sec_compassionate_gentleman
		remove_ideas_with_trait = sec_crime_fighter
		remove_ideas_with_trait = sec_crooked_kleptocrat
		remove_ideas_with_trait = sec_efficient_sociopath
		remove_ideas_with_trait = sec_great_soul
		remove_ideas_with_trait = sec_health_and_safety
		remove_ideas_with_trait = sec_man_of_the_people
		remove_ideas_with_trait = sec_media_magnate
		remove_ideas_with_trait = sec_prince_of_terror
		remove_ideas_with_trait = sec_driven_recruiter
		remove_ideas_with_trait = sec_regionalist
		remove_ideas_with_trait = sec_secret_police_chief
		remove_ideas_with_trait = sec_silent_lawyer
		remove_ideas_with_trait = sec_preserver_of_culture
	}
}

remove_every_cos_trait = {
	hidden_effect = {
		remove_ideas_with_trait = cos_school_of_manoeuvre
		remove_ideas_with_trait = cos_school_of_fire_support
		remove_ideas_with_trait = cos_school_of_mass_combat
		remove_ideas_with_trait = cos_school_of_psychology
		remove_ideas_with_trait = cos_school_of_defence
		remove_ideas_with_trait = cos_school_of_commando_operations
	}
}

remove_every_carm_trait = {
	hidden_effect = {
		remove_ideas_with_trait = carm_elastic_defence_doctrine
		remove_ideas_with_trait = carm_static_defence_doctrine
		remove_ideas_with_trait = carm_decisive_battle_doctrine
		remove_ideas_with_trait = carm_armoured_spearhead_doctrine
		remove_ideas_with_trait = carm_guns_and_butter_doctrine
		remove_ideas_with_trait = carm_commando_doctrine
		remove_ideas_with_trait = carm_doctrine_of_autonomy
	}
}

remove_every_cnav_trait = {
	hidden_effect = {
		remove_ideas_with_trait = cnav_open_seas_doctrine
		remove_ideas_with_trait = cnav_decisive_battle_doctrine
		remove_ideas_with_trait = cnav_power_projection_doctrine
		remove_ideas_with_trait = cnav_indirect_approach_doctrine
		remove_ideas_with_trait = cnav_base_control_doctrine
	}
}

remove_every_cair_trait = {
	hidden_effect = {
		remove_ideas_with_trait = cair_air_superiority_doctrine
		remove_ideas_with_trait = cair_naval_aviation_doctrine
		remove_ideas_with_trait = cair_battlefield_support_doctrine
		remove_ideas_with_trait = cair_carpet_bombing_doctrine
		remove_ideas_with_trait = cair_vertical_envelopment_doctrine
		remove_ideas_with_trait = cair_the_red_baron
	}
}

init_opinion_ideology_modifier_setup_for_tag = {
	if = {
		limit = { has_government = PREV }
		add_opinion_modifier = { target = PREV modifier = FX_same_ideology }
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					NOT = { has_government = PREV }
					OR = {
						has_government = social_conservative
						has_government = authoritarian_democrat
					}
					PREV = {
						OR = {
							has_government = social_conservative
							has_government = authoritarian_democrat
						}
					}
				}
				AND = {
					NOT = { has_government = PREV }
					OR = {
						has_government = social_democrat
						has_government = social_liberal
					}
					PREV = {
						OR = {
							has_government = social_democrat
							has_government = social_liberal
						}
					}
				}
				AND = {
					NOT = { has_government = PREV }
					OR = {
						has_government = valkist
						has_government = national_populist
					}
					PREV = {
						OR = {
							has_government = valkist
							has_government = national_populist
						}
					}
				}
			}
		}
		add_opinion_modifier = {
			target = PREV
			modifier = FX_similar_ideology_close
		}
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					has_government = social_democrat
					PREV = {
						OR = {
							has_government = market_liberal
							has_government = social_conservative
							has_government = authoritarian_democrat
						}
					}
				}
				AND = {
					OR = {
						has_government = market_liberal
						has_government = social_conservative
						has_government = authoritarian_democrat
					}
					PREV = { has_government = social_democrat }
				}
				AND = {
					has_government = vanguardist
					PREV = { has_government = collectivist }
				}
				AND = {
					has_government = collectivist
					PREV = { has_government = vanguardist }
				}
			}
		}
		add_opinion_modifier = {
			target = PREV
			modifier = FX_similar_ideology_distant
		}
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					has_socialist_government = yes
					PREV = { has_socialist_government = yes }
				}
				AND = {
					has_democratic_government = yes
					PREV = { has_democratic_government = yes }
				}
				AND = {
					has_dictatorship_government = yes
					PREV = { has_dictatorship_government = yes }
				}
				AND = {
					OR = {
						has_government = authoritarian_democrat
						has_government = paternal_autocrat
					}
					PREV = {
						OR = {
							has_government = authoritarian_democrat
							has_government = paternal_autocrat
						}
					}
				}
			}
		}
		add_opinion_modifier = {
			target = PREV
			modifier = FX_similar_ideology
		}
	}
	else_if = {
		limit = {
			OR = {
				AND = {
					has_government = social_democrat
					PREV = { has_government = collectivist }
				}
				AND = {
					has_government = collectivist
					PREV = { has_government = social_democrat }
				}
				AND = {
					has_government = paternal_autocrat
					PREV = { has_government = social_conservative }
				}
				AND = {
					has_government = social_conservative
					PREV = { has_government = paternal_autocrat }
				}
				AND = {
					has_government = national_populist
					PREV = {
						OR = {
							has_government = social_conservative
							has_government = authoritarian_democrat
						}
					}
				}
				AND = {
					OR = {
						has_government = social_conservative
						has_government = authoritarian_democrat
					}
					PREV = { has_government = national_populist }
				}
			}
		}
		add_opinion_modifier = {
			target = PREV
			modifier = FX_different_ideology_close
		}
	}
	else = {
		add_opinion_modifier = {
			target = PREV
			modifier = FX_different_ideology
		}
	}
	if = {
		limit = {
			has_government = vanguardist
		}
		set_country_flag = opinion_set_vanguardist
	}
	if = {
		limit = {
			has_government = collectivist
		}
		set_country_flag = opinion_set_collectivist
	}
	if = {
		limit = {
			has_government = libertarian_socialist
		}
		set_country_flag = opinion_set_libertarian_socialist
	}
	if = {
		limit = {
			has_government = social_democrat
		}
		set_country_flag = opinion_set_social_democrat
	}
	if = {
		limit = {
			has_government = social_liberal
		}
		set_country_flag = opinion_set_social_liberal
	}
	if = {
		limit = {
			has_government = market_liberal
		}
		set_country_flag = opinion_set_market_liberal
	}
	if = {
		limit = {
			has_government = social_conservative
		}
		set_country_flag = opinion_set_social_conservative
	}
	if = {
		limit = {
			has_government = authoritarian_democrat
		}
		set_country_flag = opinion_set_authoritarian_democrat
	}
	if = {
		limit = {
			has_government = paternal_autocrat
		}
		set_country_flag = opinion_set_paternal_autocrat
	}
	if = {
		limit = {
			has_government = national_populist
		}
		set_country_flag = opinion_set_national_populist
	}
	if = {
		limit = {
			has_government = valkist
		}
		set_country_flag = opinion_set_valkist
	}
}
