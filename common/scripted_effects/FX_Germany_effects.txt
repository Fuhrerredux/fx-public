
# Transfer non-valkist characters to the new puppet
# People of differing ideologies will go to differing places
GRP_democratic_setup = {
	GER = { 
		every_character = { 
			limit = { has_character_flag = GRP_dem }
			set_nationality = var:tag_to_release
		}
	}
}


# Transfer some non-valkist characters to the new puppet
# As of now, the criteria of non-valkists are those
# who are OTL opposition to funny mustache man
GER_transfer_characters_to_puppet = {
	for_each_loop = {
		array = GER.characters_grp
		value = v
		break = break
		
		meta_effect = {
			text = {
				every_possible_country = {
					limit = { has_character = [character_token] }
					random_character = {
						limit = { is_character = [character_token] }
						set_nationality = GRP
					}
				}
			}
			character_token = "[?v.GetTokenKey]"
		}
	}
	var:tag_to_release = {
		promote_character =	GRP_Kurt_Schumacher
		promote_character = GRP_Otto_Grotewohl 
		promote_character = GRP_Theodor_Heuss
		promote_character =	GRP_Wilhelm_Kulz
		promote_character = GRP_Hans_Lukaschek
		promote_character = GRP_Leo_Schwering
		GRP_Walter_Fisch = {
			promote_character = vanguardist_subtype
			promote_character = collectivist_subtype
			promote_character = libertarian_socialist_subtype
		}
		GRP_Fritz_Rossler = {
			promote_character = paternal_autocrat_subtype
			promote_character = national_populist_subtype
			promote_character = valkist_subtype
		}
	}
}

GRP_socialist_setup = {
	GER = { 
		every_character = { 
			limit = { has_character_flag = GRP_soc }
			set_nationality = var:tag_to_release
		}
	}
	var:tag_to_release = {
		promote_character = GRP_Ernst_Torgler
		promote_character = GER_Walter_Ulbricht
		GRP_Anton_Ackermann = {
			promote_character = vanguardist_subtype
			promote_character = collectivist_subtype
			promote_character = libertarian_socialist_subtype
		}
		remove_country_leader_role = {
			character = GER_Heinz_Neumann
			ideology = vanguardist_subtype
		}
		GRP_Otto_Nuschke = {
			promote_character = social_democrat_subtype
			promote_character = social_liberal_subtype
		}
		GRP_Karl_Otto_Hamann = {
			promote_character = market_liberal_subtype
			promote_character = social_conservative_subtype
		}
		GRP_Vincenz_Muller = {
			promote_character = authoritarian_democrat_subtype
			promote_character = paternal_autocrat_subtype	
			promote_character = national_populist_subtype
			promote_character = valkist_subtype
		}
	}
}

GRP_autocratic_setup = {
	GER = { 
		every_character = { 
			limit = { has_character_flag = GRP_aut }
			set_nationality = var:tag_to_release
		}
	}
	var:tag_to_release = {
		promote_character = GRP_Kurt_Schmitt
		promote_character = GRP_Werner_Willikens
		GRP_Kurt_Muller = {
			promote_character = vanguardist_subtype
			promote_character = collectivist_subtype
			promote_character = libertarian_socialist_subtype
		}
		GRP_Theodor_Haubach = {
			promote_character = social_democrat_subtype
			promote_character = social_liberal_subtype
		}
		GRP_Jakob_Kaiser = {
			promote_character = market_liberal_subtype
			promote_character = social_conservative_subtype
			promote_character = authoritarian_democrat_subtype
		}
	}
}

generate_new_german_puppet = {
	if = {
		limit = { NOT = { country_exists = GRP } }
		set_temp_variable = { tag_to_release = GRP }
		every_state = {
			limit = { is_germany = yes }
			add_claim_by = var:tag_to_release
		}
		release_targeted_tag = yes
		var:tag_to_release = { 
			set_cosmetic_tag = GRP_occupation
			GER_resistance_setup = yes
		}
	}
	else_if = {
		limit = { 
			country_exists = GRP 
			ROOT = { is_in_faction_with	= GRP }
		}
		every_state = {
			limit = { is_claimed_by = GRP }
			transfer_state_to = GRP
		}
	}
	else = {
		create_dynamic_country = {
			original_tag = GRP
			set_temp_variable = { tag_to_release = THIS }
			ROOT = {
				every_owned_state = {
					limit = { is_claimed_by = GRP }
					transfer_state_without_overriding_occupation = yes
				}
			}
		}
		puppet_released_tag = yes
		var:tag_to_release = {
			if = {
				limit = { has_socialist_government = yes }
				set_cosmetic_tag = GRP_soc_occupation_divided
			}
			if = {
				limit = { has_democratic_government = yes }
				set_cosmetic_tag = GRP_dem_occupation_divided
			}
			if = {
				limit = { has_dictatorship_government = yes }
				set_cosmetic_tag = GRP_aut_occupation_divided
			}
			GER_resistance_setup = yes
		}
		GRP = {
			if = {
				limit = { has_socialist_government = yes }
				set_cosmetic_tag = GRP_soc_occupation_divided
			}
			if = {
				limit = { has_democratic_government = yes }
				set_cosmetic_tag = GRP_dem_occupation_divided
			}
			if = {
				limit = { has_dictatorship_government = yes }
				set_cosmetic_tag = GRP_aut_occupation_divided
			}
		}
	}
}

GER_resistance_setup = {
	hidden_effect = {
		set_variable = { GER_valkist_resistance = GER.GER_valkist_resistance }
		set_variable = { GER_valkist_resistance_reverse = GER.GER_valkist_resistance_reverse }
		set_temp_variable = { GER_valkist_time_value = GER.GER_valkist_resistance }
		multiply_temp_variable = { GER_valkist_time_value = 100 }
		add_to_variable = { GRP_valkist_timer = GER_valkist_time_value }
		add_dynamic_modifier = { modifier = GRP_valkist_resistance }
		country_event = { id = grpdevalk.0 days = 1 }
		set_popularities = {
			vanguardist = GER.party_popularity_100@vanguardist
			collectivist = GER.party_popularity_100@collectivist
			libertarian_socialist = GER.party_popularity_100@libertarian_socialist
			social_democrat = GER.party_popularity_100@social_democrat
			social_liberal = GER.party_popularity_100@social_liberal
			market_liberal = GER.party_popularity_100@market_liberal
			social_conservative = GER.party_popularity_100@social_conservative
			authoritarian_democrat = GER.party_popularity_100@authoritarian_democrat
			paternal_autocrat = GER.party_popularity_100@paternal_autocrat
			national_populist = GER.party_popularity_100@national_populist
			valkist = GER.party_popularity_100@valkist
		}
		set_temp_variable = { GER_defeat_pop = GER.party_popularity_100@valkist }
		multiply_temp_variable = { GER_defeat_pop = -0.55 }
		set_temp_variable = { GER_defeat_natpop = GER.party_popularity_100@national_populist }
		multiply_temp_variable = { GER_defeat_natpop = -0.75 }
		set_temp_variable = { GER_defeat_ycpop = GER.party_popularity_100@paternal_autocrat }
		multiply_temp_variable = { GER_defeat_ycpop = -0.35 }
		add_popularity = {
			ideology = valkist
			popularity = GER_defeat_pop
		}
		add_popularity = {
			ideology = national_populist
			popularity = GER_defeat_natpop
		}
		add_popularity = {
			ideology = paternal_autocrat
			popularity = GER_defeat_ycpop
		}
		GER = { clear_variable = GER_valkist_resistance }
	}
}


GER_add_ship_variants = {
	if = {
		limit = { has_dlc_mtg = no }
		# Light Cruisers #
		create_equipment_variant = {
			name = "Königsberg Class"
			type = light_cruiser_1
			parent_version = 0
			upgrades = {
				ship_reliability_upgrade = 2
				ship_engine_upgrade = 2
				ship_gun_upgrade = 2
				ship_anti_air_upgrade = 2
			}
			obsolete = yes
		}
		# Heavy Cruisers #
		create_equipment_variant = {
			name = "Deutschland Class"
			type = heavy_cruiser_1
			parent_version = 0
			upgrades = {
				ship_reliability_upgrade = 1
				ship_engine_upgrade = 1
				ship_armor_upgrade = 1
				ship_gun_upgrade = 2
			}
		}
	}
	if = {
		limit = { has_dlc_mtg = yes }
		create_equipment_variant = {
			name = "Deutschland Class"
			type = ship_hull_cruiser_panzerschiff
			name_group = GER_CA_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_battery_slot = ship_heavy_battery_2
				fixed_ship_secondaries_slot = ship_secondaries_1
				fixed_ship_armor_slot = ship_armor_cruiser_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_engine_slot = cruiser_ship_engine_1
				rear_1_custom_slot = ship_torpedo_2
				mid_1_custom_slot = ship_airplane_launcher_1
				mid_2_custom_slot = dp_ship_secondaries_2
			}
		}
		create_equipment_variant = {
			name = "Type 24 Class"
			type = ship_hull_light_1
			name_group = GER_TB_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_light_battery_1
				fixed_ship_anti_air_slot = empty
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = light_ship_engine_1
				fixed_ship_torpedo_slot = ship_torpedo_1
				rear_1_custom_slot = ship_mine_layer_1
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Zerstörer 1934 Class"
			type = ship_hull_light_2
			name_group = GER_DD_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_light_battery_2
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = light_ship_engine_2
				fixed_ship_torpedo_slot = ship_torpedo_2
				mid_1_custom_slot = ship_torpedo_2
				rear_1_custom_slot = ship_depth_charge_1
			}
		}
		create_equipment_variant = {
			name = "Type II Class"
			type = ship_hull_submarine_1
			name_group = GER_SS_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_torpedo_slot = ship_torpedo_sub_1
				fixed_ship_engine_slot = sub_ship_engine_1
				rear_1_custom_slot = empty
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Type VII Class"
			type = ship_hull_submarine_2
			name_group = GER_SS_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_torpedo_slot = ship_torpedo_sub_2
				fixed_ship_engine_slot = sub_ship_engine_1
				rear_1_custom_slot = empty
			}
		}
		create_equipment_variant = {
			name = "Emden Class"
			type = ship_hull_cruiser_1
			name_group = GER_CL_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_light_medium_battery_1
				fixed_ship_anti_air_slot = empty
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = cruiser_ship_engine_2
				fixed_ship_armor_slot = ship_armor_cruiser_1
				mid_1_custom_slot = ship_light_medium_battery_1
				mid_2_custom_slot = ship_torpedo_2
				rear_1_custom_slot = ship_mine_layer_1
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Königsberg Class"
			type = ship_hull_cruiser_1
			name_group = GER_CL_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_light_medium_battery_2
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = cruiser_ship_engine_1
				fixed_ship_armor_slot = ship_armor_cruiser_1
				mid_1_custom_slot = ship_torpedo_1
				mid_2_custom_slot = dp_ship_secondaries_1
				rear_1_custom_slot = ship_light_medium_battery_2
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Leipzig Class"
			type = ship_hull_cruiser_2
			name_group = GER_CL_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_light_medium_battery_2
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = cruiser_ship_engine_1
				fixed_ship_armor_slot = ship_armor_cruiser_1
				front_1_custom_slot = ship_anti_air_1
				mid_1_custom_slot = ship_torpedo_2
				mid_2_custom_slot = ship_light_medium_battery_2
				rear_1_custom_slot = ship_mine_layer_1
			}
		}
		create_equipment_variant = {
			name = "Admiral Hipper Class"
			type = ship_hull_cruiser_2
			name_group = GER_CA_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_medium_battery_2
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = cruiser_ship_engine_2
				fixed_ship_armor_slot = ship_armor_cruiser_2
				front_1_custom_slot = ship_anti_air_1
				mid_1_custom_slot = ship_torpedo_2
				mid_2_custom_slot = dp_ship_secondaries_2
				rear_1_custom_slot = ship_airplane_launcher_1
			}
		}
		create_equipment_variant = {
			name = "Scharnhorst Class"
			type = ship_hull_heavy_2
			name_group = GER_BB_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_heavy_battery_2
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = heavy_ship_engine_2
				fixed_ship_secondaries_slot = ship_secondaries_1
				fixed_ship_armor_slot = ship_armor_bb_2
				front_1_custom_slot = ship_anti_air_1
				mid_1_custom_slot = dp_ship_secondaries_2
				mid_2_custom_slot = ship_secondaries_1
				rear_1_custom_slot = ship_heavy_battery_2
			}
		}
		create_equipment_variant = {
			name = "Deutschland Class"
			type = ship_hull_pre_dreadnought
			name_group = GER_BB_HISTORICAL
			parent_version = 0
			modules = {
				fixed_ship_battery_slot = ship_heavy_battery_1
				fixed_ship_anti_air_slot = ship_anti_air_1
				fixed_ship_fire_control_system_slot = ship_fire_control_system_0
				fixed_ship_radar_slot = empty
				fixed_ship_engine_slot = heavy_ship_engine_1
				fixed_ship_secondaries_slot = ship_secondaries_1
				fixed_ship_armor_slot = ship_armor_bb_1
				front_1_custom_slot = ship_anti_air_1
				mid_1_custom_slot = ship_torpedo_1
				rear_1_custom_slot = ship_anti_air_1
			}
			obsolete = yes
		}
	}
}

GER_add_aircraft_variants = {
	if = {
		limit = { has_dlc_bba = no }
		create_equipment_variant = {
			name = "Ju 86"
			type = tac_bomber_equipment_0
			upgrades = {
				plane_tac_bomb_upgrade = 5
				plane_range_upgrade = 5
				plane_engine_upgrade = 5
				plane_reliability_upgrade = 10
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Do 17"
			type = tac_bomber_equipment_0
			upgrades = {
				plane_tac_bomb_upgrade = 5
				plane_range_upgrade = 1
				plane_engine_upgrade = 1
				plane_reliability_upgrade = 5
			}
			obsolete = yes
		}
	}
	if = {
		limit = { has_dlc_bba = yes }
		create_equipment_variant = {
			name = "Do 23"
			type = medium_plane_airframe_0
			modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = empty
				fixed_auxiliary_weapon_slot_2 = empty
				fixed_auxiliary_weapon_slot_3 = empty
				engine_type_slot = engine_1_2x
				special_type_slot_1 = empty
				special_type_slot_2 = empty
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Ju 86"
			type = medium_plane_airframe_0
			modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = empty
				fixed_auxiliary_weapon_slot_2 = empty
				fixed_auxiliary_weapon_slot_3 = empty
				engine_type_slot = engine_2_2x
				special_type_slot_1 = lmg_defense_turret_2x
				special_type_slot_2 = fuel_tanks_medium
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "He 111"
			type = medium_plane_airframe_1
			modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = medium_bomb_bay
				fixed_auxiliary_weapon_slot_2 = empty
				fixed_auxiliary_weapon_slot_3 = empty
				engine_type_slot = engine_2_2x
				special_type_slot_1 = lmg_defense_turret_2x
				special_type_slot_2 = lmg_defense_turret_2x
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
		}
		create_equipment_variant = {
			name = "Do 17"
			type = small_plane_cas_airframe_0
			modules = {
				fixed_main_weapon_slot = small_bomb_bay
				engine_type_slot = engine_1_2x
				special_type_slot_1 = armor_plate_small #Turret no longer permitted for small cas airframe
			}
		}
		create_equipment_variant = {
			name = "He 51" #also covers Ar 68
			type = small_plane_airframe_0
			modules = {
				fixed_main_weapon_slot = light_mg_2x
				engine_type_slot = engine_1_1x
				special_type_slot_1 = empty
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Hs 123"
			type = small_plane_cas_airframe_0
			modules = {
				fixed_main_weapon_slot = bomb_locks
				engine_type_slot = engine_1_1x
				special_type_slot_1 = empty
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Bf 109 D"
			type = small_plane_airframe_1
			modules = {
				fixed_main_weapon_slot = light_mg_4x
				engine_type_slot = engine_2_1x
				special_type_slot_1 = empty
			}
		}
		create_equipment_variant = {
			name = "Ju 87"
			type = small_plane_cas_airframe_1
			modules = {
				fixed_main_weapon_slot = bomb_locks
				engine_type_slot = engine_2_1x
				special_type_slot_1 = lmg_defense_turret
				special_type_slot_2 = dive_brakes_small
			}
		}
		create_equipment_variant = {
			name = "Do 22"
			type = small_plane_naval_bomber_airframe_1
			modules = {
				fixed_main_weapon_slot = torpedo_mounting
				engine_type_slot = engine_1_1x
				special_type_slot_1 = lmg_defense_turret
				special_type_slot_2 = floats
			}
		}
	}
}

GER_add_armour_variants = {
	if = {
		limit = { has_dlc_nsb = yes }
		create_equipment_variant = {
			name = "Leichttraktor"
			type = light_tank_chassis_0
			parent_version = 0
			modules = {
				main_armament_slot = tank_small_cannon
				turret_type_slot = tank_light_two_man_tank_turret
				suspension_type_slot = tank_christie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
			}
			upgrades = {
				tank_nsb_engine_upgrade = 2
				tank_nsb_armor_upgrade = 2
			}
			obsolete = yes
			icon = "GFX_gwtank_medium"
		}
		create_equipment_variant = {
			name = "Panzer I Ausf. a"
			type = light_tank_chassis_1
			parent_version = 0
			modules = {
				main_armament_slot = tank_heavy_machine_gun
				turret_type_slot = tank_light_one_man_tank_turret
				suspension_type_slot = tank_christie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
			}
			upgrades = {
				tank_nsb_engine_upgrade = 5
				tank_nsb_armor_upgrade = 1
			}
			icon = "GFX_GER_basic_light_tank_medium"
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Neubaufahrzeug"
			type = heavy_tank_chassis_1
			parent_version = 0
			modules = {
				main_armament_slot = tank_close_support_gun
				turret_type_slot = tank_heavy_three_man_tank_turret
				suspension_type_slot = tank_bogie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
				special_type_slot_2 = secondary_turret_hmg
				special_type_slot_3 = secondary_turret_hmg
				special_type_slot_4 = secondary_turret_hmg
			}
			upgrades = {
				tank_nsb_engine_upgrade = 6
				tank_nsb_armor_upgrade = 2
			}
			icon = "GFX_GER_basic_heavy_tank_medium"
		}
		create_equipment_variant = {
			name = "Panzer II Ausf. a"
			type = light_tank_chassis_2
			parent_version = 0
			modules = {
				main_armament_slot = tank_auto_cannon
				turret_type_slot = tank_light_two_man_tank_turret
				suspension_type_slot = tank_christie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
			}
			upgrades = {
				tank_nsb_engine_upgrade = 3
				tank_nsb_armor_upgrade = 2
			}
			icon = "GFX_GER_improved_light_tank_medium"
		}
	}
}

GER_werwolf_clear = {
	if = {
		limit = { has_state_flag = GER_werwolfe_3 }
		clr_state_flag = GER_werwolfe_3
	}
	else_if = {
		limit = { has_state_flag = GER_werwolfe_2 }
		clr_state_flag = GER_werwolfe_2
	}
	else = { clr_state_flag = GER_werwolfe_1 }
}

GER_spg_get_nsb = {
	if = {
		limit = { has_tech = advanced_medium_tank_chassis }
		create_equipment_variant = {
			name = "Tücke"
			type = medium_tank_chassis_3
			modules = {
				main_armament_slot = tank_medium_howitzer_2
				turret_type_slot = tank_medium_fixed_superstructure_turret
				suspension_type_slot = tank_torsion_bar_suspension
				armor_type_slot = tank_welded_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = empty
				special_type_slot_2 = empty
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			upgrades = {
				tank_nsb_engine_upgrade = 3
				tank_nsb_armor_upgrade = 6
			}
		}
	}	
	else_if = {
		limit = { has_tech = improved_medium_tank_chassis }
		create_equipment_variant = {
			name = "List"
			type = medium_tank_chassis_2
			modules = {
				main_armament_slot = tank_medium_howitzer
				turret_type_slot = tank_medium_fixed_superstructure_turret
				suspension_type_slot = tank_torsion_bar_suspension
				armor_type_slot = tank_welded_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = empty
				special_type_slot_2 = empty
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			upgrades = {
				tank_nsb_engine_upgrade = 3
				tank_nsb_armor_upgrade = 1
			}
		}
	}
	else_if = {
		limit = { has_tech = basic_medium_tank_chassis }
		create_equipment_variant = {
			name = "Grille"
			type = medium_tank_chassis_1
			modules = {
				main_armament_slot = tank_medium_howitzer
				turret_type_slot = tank_medium_fixed_superstructure_turret
				suspension_type_slot = tank_torsion_bar_suspension
				armor_type_slot = tank_welded_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = empty
				special_type_slot_2 = empty
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			upgrades = {
				tank_nsb_engine_upgrade = 1
				tank_nsb_armor_upgrade = 1
			}
		}
	}
	else = {
		create_equipment_variant = {
			name = "Grille"
			type = medium_tank_chassis_0
			modules = {
				main_armament_slot = tank_close_support_gun
				turret_type_slot = tank_medium_fixed_superstructure_turret
				suspension_type_slot = tank_torsion_bar_suspension
				armor_type_slot = tank_welded_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = empty
				special_type_slot_2 = empty
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			upgrades = {
				tank_nsb_armor_upgrade = 1
			}
		}
	}
}

GER_promotion_base = {
	GER = {
		random_list = {
			1 = {
				modifier = {
					add = 10
					check_variable = { GER_promotion_val = 1 }
				}
				modifier = {
					add = 5
					check_variable = { GER_promotion_val = 2 }
				}
				modifier = {
					add = 5
					GER = { has_government = authoritarian_democrat }
				}
				modifier = {
					factor = 0
					GER = { GER_Hermann_Balck = { is_unit_leader = yes } }
				}
				GER = {
					GER_Hermann_Balck = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 10
					check_variable = { GER_promotion_val = 1 }
				}
				modifier = {
					add = 5
					check_variable = { GER_promotion_val = 2 }
				}
				modifier = {
					add = 5
					GER = { has_government = authoritarian_democrat }
				}
				modifier = {
					factor = 0.5
					GER = { has_government = national_populist }
				}
				modifier = {
					factor = 0
					GER = { GER_Hasso_von_Manteuffel = { is_unit_leader = yes } }
				}
				GER = {
					GER_Hasso_von_Manteuffel = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 10
					check_variable = { GER_promotion_val = 3 }
				}
				modifier = {
					add = 5
					check_variable = { GER_promotion_val = 2 }
				}
				modifier = {
					add = 15
					GER = { has_government = valkist }
				}
				modifier = {
					factor = 0
					GER = { GER_Ferdinand_Schoerner = { is_unit_leader = yes } }
				}
				GER = {
					GER_Ferdinand_Schoerner = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			57 = { # nothing
				modifier = {
					add = -25
					check_variable = { GER_promotion_level_up > 0 }
				}
			}  
		}	
	}
}

GER_promotion_staff = {
	GER = {
		random_list = {
			1 = {
				modifier = {
					add = 5
					check_variable = { GER_promotion_val = 3 }
				}
				modifier = {
					add = art_amount
				}
				modifier = {
					factor = 0
					GER = { GER_Helmuth_Weidling = { is_unit_leader = yes } }
				}
				GER = {
					GER_Helmuth_Weidling = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 10
					check_variable = { GER_promotion_val = 1 }
				}
				modifier = {
					add = 5
					check_variable = { GER_promotion_val = 2 }
				}
				modifier = {
					factor = 0
					GER = { GER_Walther_Wenck = { is_unit_leader = yes } }
				}
				GER = {
					GER_Walther_Wenck = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 10
					GER = { has_government = valkist }
				}
				modifier = {
					add = 10
					GER = { has_completed_focus = GER_restructure_high_command }
				}
				modifier = {
					factor = 0
					GER = { GER_Georg_Lindemann = { is_unit_leader = yes } }
				}
				GER = {
					GER_Georg_Lindemann = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 25
					GER = { has_government = authoritarian_democrat }
				}
				modifier = {
					factor = 0
					GER = { GER_Hans_Speidel = { is_unit_leader = yes } }
				}
				GER = {
					GER_Hans_Speidel = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			76 = { # nothing
				modifier = {
					add = -34
					check_variable = { GER_promotion_level_up > 0 }
				}
			}
		}
	}
}

GER_promotion_tst = {
	GER = {
		random_list = {
			1 = {
				modifier = {
					add = 30
					check_variable = { GER_promotion_val = 2 }
				}
				modifier = {
					factor = 0
					GER = { GER_Gustav_Lombard = { is_unit_leader = yes } }
				}
				GER = {
					GER_Gustav_Lombard = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 25
					check_variable = { GER_promotion_val = 1 }
				}
				modifier = {
					add = 15
					GER = { 
						OR = {
							has_completed_focus = GER_retrieve_old_guard
							has_completed_focus = GER_tst_valkist_compromise_army
						}
					}
				}
				modifier = {
					factor = 0
					GER = { GER_Hyacinth_Strachwitz = { is_unit_leader = yes } }
				}
				GER = {
					GER_Hyacinth_Strachwitz = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 25
					check_variable = { GER_promotion_val = 1 }
				}
				modifier = {
					factor = 0
					GER = { GER_Herbert_Ernst_Vahl = { is_unit_leader = yes } }
				}
				GER = {
					GER_Herbert_Ernst_Vahl = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 15
					GER = { has_government = valkist }
				}
				modifier = {
					factor = 0
					GER = { GER_Herbert_Gille = { is_unit_leader = yes } }
				}
				GER = {
					GER_Herbert_Gille = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			5 = { # politics
				modifier = {
					add = 15
					GER = { NOT = { has_completed_focus = GER_retrieve_old_guard } }
				}
				modifier = {
					factor = 0
					GER = { GER_Theodor_Eicke = { is_unit_leader = yes } }
				}
				GER = {
					GER_Theodor_Eicke = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 15
					GER = { has_government = national_populist }
				}
				modifier = {
					factor = 0
					GER = { GER_Walter_Kruger = { is_unit_leader = yes } }
				}
				GER = {
					GER_Walter_Kruger = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 15
					GER = { has_government = national_populist }
				}
				modifier = {
					factor = 0
					GER = { GER_Hermann_Preiss = { is_unit_leader = yes } }
				}
				GER = {
					GER_Hermann_Preiss = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 5
					NOT = { has_government = national_populist }
				}
				modifier = {
					add = 15
					check_variable = { GER_promotion_val = 3 }
				}
				modifier = {
					factor = 0
					GER = { GER_Matthias_Kleinheisterkamp = { is_unit_leader = yes } }
				}
				GER = {
					GER_Matthias_Kleinheisterkamp = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 5
					NOT = { has_government = national_populist }
				}
				modifier = {
					add = 15
					check_variable = { GER_promotion_val = 1 }
				}
				modifier = {
					add = 10
					check_variable = { GER_promotion_val = 2 }
				}
				modifier = {
					factor = 0
					GER = { GER_Wilhelm_Bittrich = { is_unit_leader = yes } }
				}
				GER = {
					GER_Wilhelm_Bittrich = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			1 = {
				modifier = {
					add = 10
					has_government = national_populist
				}
				modifier = {
					factor = 0
					date < 1940.01.01
				}
				modifier = {
					factor = 0
					GER = { GER_Otto_Kumm = { is_unit_leader = yes } }
				}
				GER = {
					GER_Otto_Kumm = { 
						set_nationality = FROM
						unit_leader_event = germil.8
					}
				}
			}
			180 = { # nothing
				modifier = {
					add = -100
					check_variable = { GER_promotion_level_up > 0 }
				}
				modifier = {
					add = -45
					check_variable = { GER_tst_command > 1 }
				}
			}
		}
	}
}

GER_tst_training = {
	random_list = {
		100 = {
			modifier = {
				factor = 0
				NOT = {
					has_trait = tst_better_commander
					skill > 6
				}
			}
			unit_leader_event = germil.10
		}
		15 = {
			modifier = {
				add = 5
				skill > 2
			}
			modifier = {
				add = 10
				skill > 3
			}
			modifier = {
				add = 15
				skill > 4
			}
			modifier = {
				add = 25
				skill > 5
			}
			modifier = {
				factor = 0
				NOT = { has_trait = tst_commander }
			}
			unit_leader_event = germil.9
		}
		85 = {
			modifier = {
				add = -15
				skill > 2
			}
			modifier = {
				add = -30
				skill > 3
			}
			modifier = {
				add = -55
				skill > 4
			}
			modifier = {
				add = -75
				skill > 5
			}
		}
	}
}

GER_determine_general_preference = {
	if = {
		limit = { 
			ROOT = { is_character = GER_Gerd_von_Rundstedt }
		}
		set_temp_variable = { GER_very_prussian = 3 } # how prussian he is, from 1 to 3, sorta to extremely
		set_temp_variable = { GER_likes_money = 2 } # how amenable they are to money, from 1 to 5, not really to yes
		set_temp_variable = { GER_traditional_outlook = 3 } # how traditional(christian/conservative) they are, from 1 to 5, apo to con
		set_temp_variable = { GER_revolutionary_outlook = 5 } # how sympathetic they are to valkism(and also to war in general), from 1 to 5, rev to apo
		set_temp_variable = { GER_nice_guy = 1 } # do they care about le TST, from 1 to 3, least to least least
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Gunther_von_Kluge }
		}
		set_temp_variable = { GER_very_prussian = 2 }
		set_temp_variable = { GER_likes_money = 4 }
		set_temp_variable = { GER_traditional_outlook = 2 }
		set_temp_variable = { GER_revolutionary_outlook = 4 }
		set_temp_variable = { GER_nice_guy = 2 }
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Fedor_von_Bock }
		}
		set_temp_variable = { GER_very_prussian = 3 }
		set_temp_variable = { GER_likes_money = 3 }
		set_temp_variable = { GER_traditional_outlook = 5 }
		set_temp_variable = { GER_revolutionary_outlook = 4 }
		set_temp_variable = { GER_nice_guy = 2 }
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Ritter_von_Leeb }
		}
		set_temp_variable = { GER_very_prussian = 1 }
		set_temp_variable = { GER_likes_money = 4 }
		set_temp_variable = { GER_traditional_outlook = 4 }
		set_temp_variable = { GER_revolutionary_outlook = 5 }
		set_temp_variable = { GER_nice_guy = 2 }
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Ewald_von_Kleist }
		}
		set_temp_variable = { GER_very_prussian = 2 }
		set_temp_variable = { GER_likes_money = 3 }
		set_temp_variable = { GER_traditional_outlook = 4 }
		set_temp_variable = { GER_revolutionary_outlook = 4 }
		set_temp_variable = { GER_nice_guy = 1 }
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Ludwig_Beck }
		}
		set_temp_variable = { GER_very_prussian = 2 }
		set_temp_variable = { GER_likes_money = 2 }
		set_temp_variable = { GER_traditional_outlook = 2 }
		set_temp_variable = { GER_revolutionary_outlook = 1 }
		set_temp_variable = { GER_nice_guy = 3 }
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Werner_von_Fritsch }
		}
		set_temp_variable = { GER_very_prussian = 3 }
		set_temp_variable = { GER_likes_money = 2 }
		set_temp_variable = { GER_traditional_outlook = 5 }
		set_temp_variable = { GER_revolutionary_outlook = 2 }
		set_temp_variable = { GER_nice_guy = 3 }
	}
	else_if = {
		limit = { 
			ROOT = { is_character = GER_Walther_von_Brauchitsch }
		}
		set_temp_variable = { GER_very_prussian = 2 }
		set_temp_variable = { GER_likes_money = 5 }
		set_temp_variable = { GER_traditional_outlook = 2 }
		set_temp_variable = { GER_revolutionary_outlook = 2 }
		set_temp_variable = { GER_nice_guy = 2 }
	}
	else = { # halder
		set_temp_variable = { GER_very_prussian = 2 }
		set_temp_variable = { GER_likes_money = 3 }
		set_temp_variable = { GER_traditional_outlook = 3 }
		set_temp_variable = { GER_revolutionary_outlook = 3 }
		set_temp_variable = { GER_nice_guy = 3 }
	}
}

GER_spawn_volkssturm_units = {
	ROOT = { GER_create_volkssturm_template = yes }
	if = {
		limit = { GER_is_attitude_very_high = yes }
		set_temp_variable = { GER_volkssturm_attitude = 5 }
	}
	else_if = {
		limit = { GER_is_attitude_high = yes }
		set_temp_variable = { GER_volkssturm_attitude = 4 }
	}
	else_if = {
		limit = { GER_is_attitude_neutral = yes }
		set_temp_variable = { GER_volkssturm_attitude = 3 }
	}
	else_if = {
		limit = { GER_is_attitude_low = yes }
		set_temp_variable = { GER_volkssturm_attitude = 2 }
	}
	else = {
		set_temp_variable = { GER_volkssturm_attitude = 1 }
	}
	if = {
		limit = { GER_is_progress_very_high = yes }
		set_temp_variable = { GER_volkssturm_progress = 4 }
	}
	else_if = {
		limit = { GER_is_progress_high = yes }
		set_temp_variable = { GER_volkssturm_progress = 3 }
	}
	else_if = {
		limit = { GER_is_progress_low = yes }
		set_temp_variable = { GER_volkssturm_progress = 2 }
	}
	else = {
		set_temp_variable = { GER_volkssturm_progress = 1 }
	}
	GER_spawn_volkssturm_divisions = yes
}

GER_spawn_volkssturm_divisions = {
	## calculate number of units to spawn
	set_temp_variable = { units_to_spawn = state_population_k }
	divide_temp_variable = { units_to_spawn = 1000 }
	
	### failsafe so at least one unit is always spawned
	clamp_temp_variable = { var = units_to_spawn min = 1 max = 50 }
	
	round_temp_variable = units_to_spawn
	
	### tooltip
	set_temp_variable = { total_units_to_spawn = units_to_spawn }
	round_temp_variable = total_units_to_spawn
	custom_effect_tooltip = ACW_recruit_units
	
	### spawn normal militias
	set_temp_variable = { counter = 1 }
	if = {
		limit = {
			check_variable = { var = units_to_spawn value = 1 compare = greater_than_or_equals }
		}
		for_loop_effect = {
			start = 1
			end = units_to_spawn
			compare = less_than_or_equals
			
			meta_effect = {
				text = {
					create_unit = {
						division = "name = [DIVISION] division_template = \"Deutscher Volkssturm-Division\" start_experience_factor = [TRAINING] start_equipment_factor = [EQUIPMENT] start_manpower_factor = [ATTITUDE]"
						allow_spawning_on_enemy_provs = yes
						owner = ROOT
						id = 1945 # lel
					}
				}
				DIVISION = "\\\"[?counter]. Volkssturm-Division\\\""
				TRAINING = "\\\"[GER_volkssturm_unit_training_factor]\\\""
				EQUIPMENT = "\\\"[GER_volkssturm_unit_equipment_factor]\\\""
				ATTITUDE = "\\\"[GER_volkssturm_unit_manpower_factor]\\\""
			}
			add_to_temp_variable = { counter = 1 }
		}
	}
}

GER_tst_army_recover = {
	if = {
		limit = { NOT = { has_completed_focus = GER_german_peoples_army } }
		effect_tooltip = {
			swap_ideas = {
				remove_idea = GER_military_purge_tst
				add_idea = GER_military_purge_tst1
			}
		}
	}
	if = {
		limit = {
			OR = {
				has_idea = GER_military_purge_tst
				has_idea = GER_military_purge_tst1
				has_idea = GER_military_purge_tst2
				has_idea = GER_military_purge_tst3
				has_idea = GER_military_purge_tst4
				has_idea = GER_military_purge_tst_cw
			}
		}
		GER_tst_army_reform = yes 
	}
}

GER_tst_army_reform = {
	if = {
		limit = { has_completed_focus = GER_retrieve_old_guard }
		GER_tst_army_fixer = yes 
	}
	else = { GER_tst_army_fix = yes }
}

GER_tst_army_fixer = {
	if = {
		limit = { has_idea = GER_military_purge_tst_cw }
		swap_ideas = {
			remove_idea = GER_military_purge_tst_cw
			add_idea = GER_tst_base_military
		}
		
	}
	else_if = {
		limit = { has_idea = GER_military_purge_tst3 }
		swap_ideas = {
			remove_idea = GER_military_purge_tst3
			add_idea = GER_tst_base_military
		}
		
	}
	else_if = {
		limit = { has_idea = GER_military_purge_tst1 }
		swap_ideas = {
			remove_idea = GER_military_purge_tst1
			add_idea = GER_military_purge_tst3
		}
	}
	else = {
		swap_ideas = {
			remove_idea = GER_military_purge_tst
			add_idea = GER_military_purge_tst1
		}
	}
}

GER_tst_army_fix = {
	if = {
		limit = { has_idea = GER_military_purge_tst_cw }
		swap_ideas = {
			remove_idea = GER_military_purge_tst_cw
			add_idea = GER_tst_base_military
		}
		
	}
	else_if = {
		limit = { has_idea = GER_military_purge_tst4 }
		swap_ideas = {
			remove_idea = GER_military_purge_tst4
			add_idea = GER_tst_base_military
		}
		
	}
	else_if = {
		limit = { has_idea = GER_military_purge_tst3 }
		swap_ideas = {
			remove_idea = GER_military_purge_tst3
			add_idea = GER_military_purge_tst4
		}
	}
	else_if = {
		limit = { has_idea = GER_military_purge_tst2 }
		swap_ideas = {
			remove_idea = GER_military_purge_tst2
			add_idea = GER_military_purge_tst3
		}
	}
	else_if = {
		limit = { has_idea = GER_military_purge_tst1 }
		swap_ideas = {
			remove_idea = GER_military_purge_tst1
			add_idea = GER_military_purge_tst2
		}
	}
	else = {
		swap_ideas = {
			remove_idea = GER_military_purge_tst
			add_idea = GER_military_purge_tst1
		}
	}
}

GER_stormtrooper_check = {
	if = {
		limit = {
			GER_stormtrooper_checks = yes
			check_variable = { GER_tst_army > 0.5 } # tst troops make up 50% of the army
		} 
		GER_balance_moment = yes
	}
	else = { GER_stormtrooper_buffs = yes } # tst troops don't make up 50% of the army
}

GER_balance_moment = {
	if = {
		limit = { has_dynamic_modifier = { modifier = GER_stormtrooper_bonus } }
		clear_variable = GER_stormtrooper_scaling
		remove_dynamic_modifier = { modifier = GER_stormtrooper_bonus }
		add_ideas = GER_too_many_tst
		if = {
			limit = { has_tech = tech_tst_military_elite }
			set_technology = { tech_tst_military_elite = 0 }
		}
		if = {
			limit = { has_tech = tech_tst_local_superiority }
			set_technology = { tech_tst_local_superiority = 0 }
		}
		if = {
			limit = { has_tech = tech_tst_reformed_training_standards }
			set_technology = { tech_tst_reformed_training_standards = 0 }
		}
		if = {
			limit = { has_tech = tech_tst_perfected_stormtroopers }
			set_technology = { tech_tst_perfected_stormtroopers = 0 }
		}
	}
	else_if = {
		limit = { has_idea = GER_waffen_tst }
		swap_ideas = {
			remove_idea = GER_waffen_tst
			add_idea = GER_weaker_waffen_tst
		}
	}
	else_if = {
		limit = { has_idea = GER_waffen_tst_buffed }
		swap_ideas = {
			remove_idea = GER_waffen_tst
			add_idea = GER_waffen_tst_buffed
		}
		set_country_flag = GER_waffen_tst_debuffed
	}
	else_if = {
		limit = { has_idea = GER_waffen_tst_buffed_alt }
		swap_ideas = {
			remove_idea = GER_waffen_tst
			add_idea = GER_waffen_tst_buffed_alt
		}
		set_country_flag = GER_waffen_tst_debuffed_alt
	}
}

GER_stormtrooper_buffs = {
	if = {
		limit = { has_completed_focus = GER_a_new_course }
		if = {
			limit = { check_variable = { GER_stormtrooper_scaling > 0.2 } }
			set_variable = { GER_stormtrooper_scaling = 0.2 }
		}
		if = {
			limit = { has_completed_focus = GER_military_elite }
			add_to_variable = { GER_stormtrooper_scaling = 0.1 }
		}
		if = {
			limit = { has_completed_focus = GER_local_superiority }
			add_to_variable = { GER_stormtrooper_scaling = 0.1 }
		}
		if = {
			limit = { has_completed_focus = GER_reformed_training_standards }
			add_to_variable = { GER_stormtrooper_scaling = 0.1 }
		}
		if = {
			limit = { has_completed_focus = GER_der_sturmer }
			add_to_variable = { GER_stormtrooper_scaling = 0.1 }
		}
		if = {
			limit = { GER_stormtrooper_checks = yes }
			subtract_from_variable = { GER_stormtrooper_scaling = GER_tst_army }
		}
		force_update_dynamic_modifier = yes
		if = {
			limit = { NOT = { has_dynamic_modifier = { modifier = GER_stormtrooper_bonus } } }
			add_dynamic_modifier = { modifier = GER_stormtrooper_bonus }
			force_update_dynamic_modifier = yes
			if = {
				limit = { has_completed_focus = GER_military_elite }
				set_technology = { tech_tst_military_elite = 1 }
			}
			if = {
				limit = { has_completed_focus = GER_local_superiority }
				set_technology = { tech_tst_local_superiority = 1 }
			}
			if = {
				limit = { has_completed_focus = GER_reformed_training_standards }
				set_technology = { tech_tst_reformed_training_standards = 1 }
			}
			if = {
				limit = { has_completed_focus = GER_der_sturmer }
				set_technology = { tech_tst_perfected_stormtroopers = 1 }
			}
		}
	}
	else_if = {
		limit = { has_idea = GER_weaker_waffen_tst has_country_flag = GER_waffen_tst_debuffed }
		clr_country_flag = GER_waffen_tst_debuffed
		swap_ideas = {
			remove_idea = GER_weaker_waffen_tst
			add_idea = GER_waffen_tst_buffed
		}
	}
	else_if = {
		limit = { has_idea = GER_weaker_waffen_tst has_country_flag = GER_waffen_tst_debuffed_alt }
		clr_country_flag = GER_waffen_tst_debuffed_alt
		swap_ideas = {
			remove_idea = GER_weaker_waffen_tst
			add_idea = GER_waffen_tst_buffed_alt
		}
	}
	else_if = {
		limit = { has_idea = GER_weaker_waffen_tst }
		swap_ideas = {
			remove_idea = GER_weaker_waffen_tst
			add_idea = GER_waffen_tst
		}
	}
}

GER_fix_steiner_army = {
	if = {
		limit = { has_idea = GER_segmented_military }
		swap_ideas = {
			remove_idea = GER_segmented_military
			add_idea = GER_segmented_military1
		}
	}
	else_if = {
		limit = { has_idea = GER_segmented_military1 }
		swap_ideas = {
			remove_idea = GER_segmented_military1
			add_idea = GER_segmented_military2
		}
	}
	else = {
		swap_ideas = {
			remove_idea = GER_segmented_military2
			add_idea = GER_segmented_military3
		}
	}
}

###########################################################
# 														#											  		#
#           MINISTRY OF PROPAGANDA MECHANIC				        #
#														  #														#
###########################################################

GER_init_propaganda_mechanic = {
	
	set_variable = { GER_propaganda_slot_x@0 = 10 }
	set_variable = { GER_propaganda_slot_y@0 = 0 }
	
	set_variable = { GER_propaganda_text_x@0 = 15 }
	set_variable = { GER_propaganda_text_y@0 = 215 }
	
	set_variable = { GER_propaganda_slot_x@1 = 170 }
	set_variable = { GER_propaganda_slot_y@1 = 0 }
	
	set_variable = { GER_propaganda_text_x@1 = 170 }
	set_variable = { GER_propaganda_text_y@1 = 215 }
	
	set_variable = { GER_propaganda_slot_x@2 = 325 }
	set_variable = { GER_propaganda_slot_y@2 = 0 }
	
	set_variable = { GER_propaganda_text_x@2 = 315 }
	set_variable = { GER_propaganda_text_y@2 = 215 }
	
	set_variable = { frame@0 = 1 }
	set_variable = { frame@1 = 1 }
	set_variable = { frame@2 = 1 }
	
	add_to_variable = { GER_propaganda_dirty = 1 }
	
}

GER_achievement_propaganda_counter_effect = { # why is this needed? Variable initialisation can occur just fine with add_to_variable
	if = { # tell me retired??
		limit = {
			check_variable = { var = propaganda_counter value = 1 compare = less_than }
		}
		set_variable = { var = propaganda_counter value = 1 } #setup variable
	}
	else = {
		add_to_variable = { propaganda_counter = 1 }
	}
}

GER_pick_propaganda_campaign_slot_effect = {
	# general remarks: this effect is really weird in the way its structured;
	# it took me a while to figure out how it works.
	# i do not know why vanilla did it this way, but from my understanding:
	# the effect is structured in a way that it will always pick the first slot that is empty.
	# it will then set the propaganda campaign to that slot.
	# if the slot is already taken, it will move on to the next slot.
	# if all slots are taken, it will not set the propaganda campaign to any slot... actually NO! If all are take it won't do shit;
	# it will just exit and the player will be left to wonder why this happened
	# this all could be done with a simple for_loop_effect that loops from 1 to 3 and then applies it to the respective slot
	# though i have used arrays so it is more wise to use for_each_loop to loop within the array; and also much simpler
	# also what is it with being 3 hidden events? wasn't 1 enough?
	# and why the fuck is there a hidden effect inside hidden effect?? lmao...
	# --thanasislanaras
	
	hidden_effect = {
		for_each_loop = {
			array = GER.propaganda_positions
			value = v
			break = break
			if = {
				limit = { check_variable = { frame@var:v = GER_propaganda_empty_slot_index } } # frame@slot
				set_variable = { frame@var:v = GER_new_propaganda_campaign } 
				# why cant we have 2D arrays? *sighs*
				set_variable = { age@var:v = 0 } # age@slot
				
				meta_effect = {
					text = {
						# set_country_flag = { flag = GER_slot_[val]_flag days = 180 }
						set_variable = { GER_propaganda_slot_[val] = 180 }
						set_variable = { GER_days_since_modified_[val] = 0 }
					}
					val = "[?v]"
				}
				add_to_variable = { GER_propaganda_dirty = 1 }
				set_temp_variable = { break = 1 }
			}
		}
		# TODO: make debug decision do smth
		# if = { #Debug -> Faster time
		# 	limit = { has_country_flag = GER_debug_fast_propaganda_campaigns_flag }
		# 	set_country_flag = { flag = GER_propaganda_left_days_remaining_flag days = 5 }
		# }
		# else = { #Regular time
		# 	set_country_flag = { flag = GER_propaganda_left_days_remaining_flag days = 180 } #Need code support to use a var here
		# }
		set_variable = { GER_new_propaganda_campaign = 0 } # Reset var
		add_to_variable = { GER_propaganda_campaigns_taken = 1 } #Update propaganda campaigns counter
	}
}

GER_reset_propaganda_campaign_slot_effect = {
	hidden_effect = {
		for_each_loop = {
			array = GER.propaganda_positions
			value = v
			break = break
			if = {
				limit = { check_variable = { frame@var:v = GER_propaganda_campaign_to_remove } }
				set_variable = { frame@var:v = GER_propaganda_empty_slot_index }
				clear_variable = age@var:v 
			}
			add_to_variable = { GER_propaganda_dirty = 1 }
			set_temp_variable = { break = 1 }
		}
		set_variable = { GER_propaganda_campaign_to_remove = 0 } # Reset var... why not use temp vars? --thanasislanaras
	}
}

GER_unlock_propaganda_campaign_slot_effect = {
	hidden_effect = {
		for_each_loop = {
			array = GER.propaganda_positions
			break = break
			value = v
			if = {
				limit = { check_variable = { frame@var:v = GER_propaganda_locked_slot_index } }
				set_variable = { frame@var:v = GER_propaganda_empty_slot_index }
				set_temp_variable = { break = 1 }
				add_to_variable = { GER_propaganda_dirty = 1 }
			} else = {
				# frame@var:v != GER_propaganda_locked_slot_index
				
				# do nothing
			}
		}
	}
}

GER_increase_propaganda_campaign_cost_effect = {
	multiply_variable = { GER_propaganda_cost = GER_propaganda_cost_increase } #Using generic var GER_propaganda_cost so that we only need to change this operation to tweak all propagandas' cost escalation
}

### END OF PROPAGANDA MECHANIC

GER_reduce_morale_invasion = {
	if = {
		limit = { event_target:GER_lost_core = { is_capital = yes } }
		set_temp_variable = { amount = -20 } # gee I wonder why
		GER_add_reichs_morale = yes
	}
	event_target:GER_lost_core = {
		set_temp_variable = { state_pop_value = state_population_k }
		divide_temp_variable = { state_pop_value = 1000 }
		
		clamp_temp_variable = { var = state_pop_value min = 0 max = 10 }
		multiply_temp_variable = { state_pop_value = -2 }
	}
	set_temp_variable = { amount = state_pop_value } 
	GER_add_reichs_morale = yes
	every_core_state = {
		limit = { controller = { has_war_with = GER } }
		set_temp_variable = { state_pop_value = state_population_k }
		divide_temp_variable = { state_pop_value = 1000 }
		
		clamp_temp_variable = { var = state_pop_value min = 0 max = 10 } # compounding
		multiply_temp_variable = { state_pop_value = -1 }
		set_temp_variable = { amount = state_pop_value } 
		GER_add_reichs_morale = yes
	}
}

GER_increase_morale_invasion = {
	if = {
		limit = { event_target:GER_gained_core = { is_capital = yes } }
		set_temp_variable = { amount = 20 } # yay!!!!
		GER_add_reichs_morale = yes
	}
	event_target:GER_gained_core = {
		set_temp_variable = { state_pop_value = state_population_k }
		divide_temp_variable = { state_pop_value = 1000 }
		
		clamp_temp_variable = { var = state_pop_value min = 0 max = 25 }
		multiply_temp_variable = { state_pop_value = 1 } # sadly less good
	}
	set_temp_variable = { amount = state_pop_value } 
	GER_add_reichs_morale = yes
}

GER_military_loyalty_cr_check = {
	effect_tooltip = {
		swap_ideas = {
			remove_idea = GER_military_disloyalty_dummy
			add_idea = GER_military_disloyalty_dummy_mod
		}
	}
	hidden_effect = {
		if = {
			limit = { has_dynamic_modifier = { modifier = GER_military_disloyalty_dynamic_mod } }
			clear_variable = GER_military_disloyalty_command_factor
			clear_variable = GER_military_disloyalty_social_factor
			for_each_scope_loop = {
				array = GER.army_leaders
				if = {
					limit = { has_trait = hidden_sympathies }
					PREV = { 
						add_to_variable = { GER_military_disloyalty_command_factor = -0.05 }
						add_to_variable = { GER_military_disloyalty_social_factor = -0.002 }
					}
				}
			}
		}
	}
}

##################
#  Kirchenkampf  #
##################

GER_kirchenkampf_multiply_factor = { # determines GER_kirchenkampf_intensity_factor
	set_temp_variable = { GER_kirchenkampf_intensity_multiplier = GER_kirchenkampf_intensity }
	multiply_temp_variable = { GER_kirchenkampf_intensity_multiplier = 0.02 }
	add_to_temp_variable = { GER_kirchenkampf_intensity_multiplier = 1 }
	multiply_temp_variable = { GER_kirchenkampf_intensity_multiplier = -1 }
	multiply_temp_variable = { GER_kirchenkampf_intensity_multiplier = party_popularity@social_conservative }
	set_variable = { GER_kirchenkampf_intensity_factor = GER_kirchenkampf_intensity_multiplier }
	set_variable = { GER_kirchenkampf_intensity_less_factor = GER_kirchenkampf_intensity_factor }
	multiply_variable = { GER_kirchenkampf_intensity_less_factor = 0.05 }
}

GER_start_kirchenkampf = {
	unlock_decision_category_tooltip = GER_kirchenkampf
	custom_effect_tooltip = tooltip_white_line
	add_stability = -0.05
	add_popularity = {
		ideology = social_conservative
		popularity = 0.05
	}
	set_party_name = {
		ideology = social_conservative
		long_name = GER_church_party_long
		name = GER_church_party
	}
	custom_effect_tooltip = tooltip_white_line
	set_country_flag = GER_started_kirchenkampf
	set_variable = { GER_kirchenkampf_intensity = 15 }
	GER_kirchenkampf_multiply_factor = yes
	# Kirchenkampf starts at 15% intensity, with intensity being a multiplier of social conservative popularity whereby 1% intensity equates to a 2% "boost" (102%)
	swap_ideas = {
		remove_idea = GER_clerical_spectre_2
		add_idea = GER_kirchenkampf_spirit
	}
	hidden_effect = {
		activate_targeted_decision = { target = ROOT decision = GER_mass_propaganda_campaign }
		activate_targeted_decision = { target = ROOT decision = GER_prohibit_catholics_in_civil_service }
		activate_targeted_decision = { target = ROOT decision = GER_prohibit_catholics_in_the_army }
		activate_targeted_decision = { target = ROOT decision = GER_raids_against_the_catholic_church }
		activate_targeted_decision = { target = ROOT decision = GER_end_kirchenkampf }
		activate_targeted_decision = { target = ROOT decision = GER_infiltrate_the_churches }
		activate_targeted_decision = { target = ROOT decision = GER_seize_all_non_religious_church_institutions }
	}
}

# set_temp_variable = { intensity = 0.1 }  # increase intensity by 10% (future note: I only changed intensity at the very end of development)
# GER_increase_intensity = yes
# figure it out...

GER_increase_intensity = {
	custom_effect_tooltip = GER_kk_intensity_change
	multiply_temp_variable = { intensity = 100 }
	add_to_variable = { GER_kirchenkampf_intensity = intensity }
	GER_kirchenkampf_multiply_factor = yes
	force_update_dynamic_modifier = yes
	clamp_variable = { var = GER_kirchenkampf_intensity min = 0 max = 100 }
}

GER_calculate_kk_intensity_monthly = { # ch-ch-changes
	hidden_effect = {
		set_temp_variable = { intensity = -0.1 }
		GER_increase_intensity = yes
		set_temp_variable = { GER_kirchenkampf_intensity_effect = GER_kirchenkampf_intensity_factor }
		multiply_temp_variable = { GER_kirchenkampf_intensity_effect = -0.25 }
		clamp_variable = { var = GER_kirchenkampf_intensity min = 0 max = 100 }
		if = {
			limit = { has_country_flag = GER_resist_doctrinal_division_flag }
			add_stability = -0.01
			add_to_variable = { GER_resist_doctrinal_division_counter = 1 }
			if = {
				limit = { check_variable = { GER_resist_doctrinal_division_counter > 14 } }
				clr_country_flag = GER_resist_doctrinal_division_flag
			}
		}
	}
}

GER_end_kirchenkampf = {
	set_temp_variable = { GER_kirchenkampf_factors = GER_kirchenkampf_intensity }
	add_to_temp_variable = { GER_kirchenkampf_factors = party_popularity_100@social_conservative }
	multiply_temp_variable = { GER_kirchenkampf_factors = 0.5 } # add both, divide them - higher is worse
	if = {
		limit = { check_variable = { GER_kirchenkampf_factors > 74 } } # bad
		country_event = gerdom.53
	}
	else_if = {
		limit = { 
			check_variable = { GER_kirchenkampf_factors < 75 } # normal
			check_variable = { GER_kirchenkampf_factors > 24 }
		} 
		divide_temp_variable = { GER_kirchenkampf_factors = 100 }
		multiply_temp_variable = { GER_kirchenkampf_factors = -0.25 }
		add_war_support = var:GER_kirchenkampf_factors
		country_event = gerdom.51
	}
	else_if = {
		limit = { check_variable = { GER_kirchenkampf_factors < 25 } }  # good
		country_event = gerdom.52
	}
	clear_variable = GER_kirchenkampf_intensity_factor
	clear_variable = GER_kirchenkampf_intensity
	clear_variable = GER_kirchenkampf_intensity_less_factor
	clr_country_flag = GER_started_kirchenkampf
	if = {
		limit = { has_country_flag = GER_resist_doctrinal_division_flag }
		clr_country_flag = GER_resist_doctrinal_division_flag
	}
}

###########################################################
# 														#													  #
#				CULTURAL REVOLUTION MECHANIC		                  #
#														  #													  #
###########################################################

# set_temp_variable = { GER_number_increase_cr_cap = whatever you want to increase by }

GER_increase_cr_decision_cap = {
	custom_effect_tooltip = GER_increase_cr_decision_cap_tt
	hidden_effect = {
		add_to_variable = { GER_extra_cultural_option = GER_number_increase_cr_cap }
	}
}

GER_block_cultural_decisions = {
	if = {
		limit = { check_variable = { GER_extra_cultural_option > 0 } }
		subtract_from_variable = { GER_extra_cultural_option = 1 }
		add_to_variable = { GER_extra_cultural_option_refund = 1 }
	}
	if = {
		limit = { NOT = { check_variable = { GER_extra_cultural_option > 0 } } }
		set_country_flag = GER_is_doing_cultural_decision
	}
}

GER_block_kk_decisions = {
	set_country_flag = GER_is_doing_kk_decision
}

GER_release_kk_decisions = {
	clr_country_flag = GER_is_doing_kk_decision 
}

GER_release_cultural_decisions = {
	if = {
		limit = { check_variable = { GER_extra_cultural_option_refund > 0 } }
		subtract_from_variable = { GER_extra_cultural_option_refund = 1 }
		add_to_variable = { GER_extra_cultural_option = 1 }
	}
	if = {
		limit = { NOT = { check_variable = { GER_extra_cultural_option < 0 } } }
		clr_country_flag = GER_is_doing_cultural_decision
	}
}

# country scope
GER_add_reichs_morale = {
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_reichs_morale_tt
	}
	else = {
		custom_effect_tooltip = GER_increase_reichs_morale_tt
	}
	add_to_variable = { reich_morale = amount }
	GER_compute_gauge_position = yes
	clear_variable = amount
	GER_compute_national_morale_modifier = yes
}

# country scope
GER_add_social_outlook = {
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_social_outlook_tt
	}
	else = {
		custom_effect_tooltip = GER_increase_social_outlook_tt
	}
	add_to_variable = { reich_outlook = amount }
	GER_compute_gauge_position = yes
	clear_variable = amount
	GER_compute_social_outlook_modifier = yes
}

#TODO: Replace state-scoped effects that utilise event targets with non-event target versions

# state scope
# set_temp_variable = { amount = 5 }
# 64 = { save_event_target_as = target_region }
# @deprecated
GER_add_attitude_to_region = {
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_attitude_tt
	}
	else = {
		custom_effect_tooltip = GER_increase_attitude_tt
	}
	hidden_effect = {
		event_target:target_region = {
			GER = {
				add_to_variable = { attitude@PREV.belongs_to_region = amount }
				GER_compute_cultural_revolution_modifiers = yes
			}
			GER_compute_state_gauge_position = yes
		}
		clear_variable = amount
	}
}

# state scoped, used for scripted gui so errors dont get fired
GER_add_attitude_to_root_region = { # may eventually replace other one as not sure event target scope is needed
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_attitude_tt
	} else = {
		custom_effect_tooltip = GER_increase_attitude_tt
	}
	hidden_effect = {
		GER = {
			add_to_variable = { attitude@PREV.belongs_to_region = amount }
			GER_compute_cultural_revolution_modifiers = yes
		}
		GER_compute_state_gauge_position = yes
		clear_variable = amount
	}
}

d_test_attitude = {
	set_temp_variable = { amount = args^0 } # first argument is amount
	set_temp_variable = { target_state = args^1 }
	var:target_state = {
		GER_add_attitude_to_root_region = yes
	}
}

test_attitude_2 = {
	set_temp_variable = {
		amount = 15
	}
	50 = { GER_add_attitude_to_root_region = yes }
}

GER_clamp_attitude_progress = {
	clamp_variable = { var = progress@PREV.belongs_to_region min = 0 max = 100 }
	clamp_variable = { var = attitude@PREV.belongs_to_region min = -100 max = 100 }
}

# state scope
# set_temp_variable = { amount = 5 }
# 64 = { save_event_target_as = target_region }
# @deprecated
GER_add_progress_to_region = {
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_progress_tt
	}
	else = {
		custom_effect_tooltip = GER_increase_progress_tt
	}
	hidden_effect = {
		event_target:target_region = { 
			GER = {
				add_to_variable = { progress@PREV.belongs_to_region = amount }
				GER_clamp_attitude_progress = yes
			}
		}
		clear_variable = amount
	}
}

GER_add_progress_to_root_region = { # may eventually replace other one as not sure event target scope is needed
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_progress_tt
	}
	else = {
		custom_effect_tooltip = GER_increase_progress_tt
	}
	hidden_effect = {
		GER = {
			add_to_variable = { progress@PREV.belongs_to_region = amount }
			GER_clamp_attitude_progress = yes
		}
		clear_variable = amount
	}
}

GER_clamp_attitude_progress_direct = {
	clamp_variable = { var = progress@region_to_apply.region_to_apply min = 0 max = 100 }
	clamp_variable = { var = attitude@region_to_apply.region_to_apply min = -100 max = 100 }
}

# set_temp_variable = { region_to_apply = token:wurttemberg }, don't forget the amount
GER_add_progress_to_region_direct = { # why is everything scoped based, just apply it directly!!!!
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_progress_direct_tt
	}
	else = {
		custom_effect_tooltip = GER_increase_progress_direct_tt
	}
	hidden_effect = {
		add_to_variable = { progress@region_to_apply.region_to_apply = amount }
		clear_variable = amount
		GER_clamp_attitude_progress_direct = yes
	}
}

# ditto statements...
GER_add_attitude_to_region_direct = { 
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_attitude_direct_tt
	} 
	else = {
		custom_effect_tooltip = GER_increase_attitude_direct_tt
	}
	hidden_effect = {
		GER = {
			add_to_variable = { attitude@region_to_apply.region_to_apply = amount }
			GER_compute_cultural_revolution_modifiers = yes
			GER_clamp_attitude_progress_direct = yes
			# this effect should technically not be needed anymore, due to usage of dirty variables
			# TODO: check and remove
			random_owned_state = { # not that efficient but not much i can do abt it for now
				limit = {
					check_variable = { belongs_to_region = region_to_apply.region_to_apply }
				}
				GER_compute_state_gauge_position = yes
			}
		}
		clear_variable = amount
	}
}

# just set amount like set_temp_variable = { amount = whatever } ... 

GER_add_attitude_to_region_everywhere = { 
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_attitude_direct_every_tt
	} 
	else = {
		custom_effect_tooltip = GER_increase_attitude_direct_every_tt
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = cultural_target_state
			GER = {
				add_to_variable = { attitude@PREV.belongs_to_region = amount }
				GER_clamp_attitude_progress = yes
				GER_compute_state_gauge_position = yes # it needs to be state scoped...
			}
		}
		clear_variable = amount
	}
}

GER_add_progress_to_region_everywhere = { 
	if = {
		limit = { check_variable = { amount < 0 } }
		custom_effect_tooltip = GER_decrease_progress_direct_every_tt
	} 
	else = {
		custom_effect_tooltip = GER_increase_progress_direct_every_tt
	}
	hidden_effect = {
		for_each_scope_loop = {
			array = cultural_target_state
			GER = {
				add_to_variable = { progress@PREV.belongs_to_region = amount }
				GER_clamp_attitude_progress = yes
				GER_compute_state_gauge_position = yes # it needs to be state scoped...
			}
		}
		clear_variable = amount
	}
}

GER_compute_cultural_revolution_modifiers = {
	every_owned_state = {
		if = {
			limit = { has_variable = belongs_to_region }
			clamp_variable = { var = GER.attitude@THIS.belongs_to_region min = -100 max = 100 }
			clamp_variable = { var = GER.progress@THIS.belongs_to_region min = 0 max = 100 }
			set_variable = { base_attitude = GER.attitude@THIS.belongs_to_region }
			# log = "[THIS.GetId] ([THIS.GetName]) attitude: [?base_attitude]"
			set_variable = { GER.state_intel@THIS.belongs_to_region = -0.005 }
			set_variable = { GER.state_manpower@THIS.belongs_to_region = 0.005 }
			set_variable = { GER.state_resources@THIS.belongs_to_region = 0.005 }
			# log = "[THIS.GetId] ([THIS.GetName]) intel: [?GER.state_intel@THIS.belongs_to_region], manpower: [?GER.state_manpower@THIS.belongs_to_region], resources: [?GER.state_resources@THIS.belongs_to_region]"
			multiply_variable = { GER.state_intel@THIS.belongs_to_region = base_attitude }
			multiply_variable = { GER.state_manpower@THIS.belongs_to_region = base_attitude }
			multiply_variable = { GER.state_resources@THIS.belongs_to_region = base_attitude }
			# log = "MULTIPLIED: [THIS.GetId] ([THIS.GetName]) intel: [?GER.state_intel@THIS.belongs_to_region], manpower: [?GER.state_manpower@THIS.belongs_to_region], resources: [?GER.state_resources@THIS.belongs_to_region]"
			clamp_variable = { var = GER.state_intel@THIS.belongs_to_region min = -0.50 max = 0.50 }
			clamp_variable = { var = GER.state_manpower@THIS.belongs_to_region min = -0.50 max = 0.50 }
			clamp_variable = { var = GER.state_resources@THIS.belongs_to_region min = -0.50 max = 0.50 }
			if = {
				limit = { check_variable = { base_attitude > 0 } }
				set_temp_variable = { GER_progress_multiplier = GER.progress@THIS.belongs_to_region }
				multiply_temp_variable = { GER_progress_multiplier = 0.01 }
				multiply_variable = { GER.state_intel@THIS.belongs_to_region = GER_progress_multiplier }
				multiply_variable = { GER.state_manpower@THIS.belongs_to_region = GER_progress_multiplier }
				multiply_variable = { GER.state_resources@THIS.belongs_to_region = GER_progress_multiplier }
			}
			# log = "CLAMPED: [THIS.GetId] ([THIS.GetName]) intel: [?GER.state_intel@THIS.belongs_to_region], manpower: [?GER.state_manpower@THIS.belongs_to_region], resources: [?GER.state_resources@THIS.belongs_to_region]"
			set_temp_variable = { temp_intel = GER.state_intel@THIS.belongs_to_region }
			set_temp_variable = { temp_manpower = GER.state_manpower@THIS.belongs_to_region }
			set_temp_variable = { temp_resources = GER.state_resources@THIS.belongs_to_region }
			# print_variables = {
			# 	file = "ger_culturalrev_vars"
			# 	var_list = { temp_intel temp_manpower temp_resources }
			# 	text = "German Cultural Revolution Variables"
			# }
			clear_variable = base_attitude
			
			if = {
				limit = { 
					has_dynamic_modifier = { modifier = GER_cultural_revolution_state_dynamic_modifier }
				}
				force_update_dynamic_modifier = yes
			}
			else = {
				add_dynamic_modifier = { modifier = GER_cultural_revolution_state_dynamic_modifier }
			}
		}
	}
}

GER_compute_regional_progress_rate = { # State Scoped
	set_variable = { GER.outlook_rate@THIS.belongs_to_region = GER.reich_outlook }
	set_variable = { GER.attitude_rate@THIS.belongs_to_region = GER.attitude@THIS.belongs_to_region }
	if = {
		limit = { check_variable = { GER.reich_outlook > 49 } }
		set_temp_variable = { temp_reich_outlook = GER.reich_outlook }
		subtract_from_temp_variable = { temp_reich_outlook = 50 }
		divide_temp_variable = { temp_reich_outlook = 100 }
		multiply_temp_variable = { temp_reich_outlook = 0.25 }
		multiply_variable = { GER.outlook_rate@THIS.belongs_to_region = temp_reich_outlook }
	}
	else = {
		set_temp_variable = { temp_reich_outlook = 50 }
		subtract_from_temp_variable = { temp_reich_outlook = GER.reich_outlook }
		divide_temp_variable = { temp_reich_outlook = 100 }
		multiply_temp_variable = { temp_reich_outlook = -0.25 }
		set_variable = { GER.outlook_rate@THIS.belongs_to_region = temp_reich_outlook } 
	}
	multiply_variable = { GER.attitude_rate@THIS.belongs_to_region = 0.025 } # hoi4 allows up to 3 decimal places, 0.0025 wont work. Converted to 0.025 from 0.0025
	set_temp_variable = { GER_multiplier_rates = GER.outlook_rate@THIS.belongs_to_region }
	add_to_temp_variable = { GER_multiplier_rates = GER.attitude_rate@THIS.belongs_to_region }
	add_to_variable = { GER.progress_rate@THIS.belongs_to_region = GER_multiplier_rates }
	if = {
		limit = {
			check_variable = { GER.outlook_rate@THIS.belongs_to_region < 0 }
			check_variable = { GER.attitude_rate@THIS.belongs_to_region < 0 }
			GER = { NOT = { has_country_flag = GER_starting_cultural_revolution } }
		}
		divide_temp_variable = { GER_multiplier_rates = GER.progress_rate@THIS.belongs_to_region }
		divide_temp_variable = { GER_multiplier_rates = 10 }
		add_to_variable = { GER.progress_rate@THIS.belongs_to_region = GER_multiplier_rates }
	}
	clamp_variable = { var = GER.progress_rate@THIS.belongs_to_region min = -3 max = 3 }
}

GER_compute_regional_progress = {
	for_each_scope_loop = {
		array = cultural_target_state
		GER_compute_regional_progress_rate = yes
		add_to_variable = { GER.progress@THIS.belongs_to_region = GER.progress_rate@THIS.belongs_to_region }
		clamp_variable = { var = GER.progress@THIS.belongs_to_region min = 0 max = 100 }
		clear_variable = computed
	}
}

GER_compute_national_morale_modifier = {
	clamp_variable = { var = reich_morale min = 0 max = 100 }
	if = {
		limit = { GER_is_morale_very_low = yes }
		set_variable = { morale_surrender_limit = -0.25 }
		set_variable = { morale_stability_factor = -0.05 }
		set_variable = { morale_war_support_factor = -0.1 }
	}
	else_if = {
		limit = { GER_is_morale_low = yes }
		set_variable = { morale_surrender_limit = -0.15 }
		set_variable = { morale_stability_factor = -0.05 }
		set_variable = { morale_war_support_factor = -0.075 }
	}
	else_if = {
		limit = { GER_is_morale_medium = yes }
		set_variable = { morale_surrender_limit = 0.05 }
		set_variable = { morale_stability_factor = -0.025 }
		set_variable = { morale_war_support_factor = -0.05 }
	}
	else_if = {
		limit = { GER_is_morale_high = yes }
		set_variable = { morale_surrender_limit = 0.1 }
		set_variable = { morale_stability_factor = 0.025 }
		set_variable = { morale_war_support_factor = 0.05 }
	}
	else_if = {
		limit = { GER_is_morale_very_high = yes }
		set_variable = { morale_surrender_limit = 0.2 }
		set_variable = { morale_stability_factor = 0.05 }
		set_variable = { morale_war_support_factor = 0.1 }
	}
}

GER_compute_social_outlook_modifier = {
	clamp_variable = { var = reich_outlook min = 0 max = 100 }
	if = {
		limit = { GER_is_outlook_very_low = yes }
		set_variable = { outlook_factory_capacity = -0.1 }
		set_variable = { outlook_speed_buildings = -0.1 }
		set_variable = { outlook_drift_defence = -0.2 }
		set_variable = { outlook_free_repair = -0.1 }
	}
	else_if = {
		limit = { GER_is_outlook_low = yes }
		set_variable = { outlook_factory_capacity = -0.075 }
		set_variable = { outlook_speed_buildings = -0.075 }
		set_variable = { outlook_drift_defence = -0.1 }
		set_variable = { outlook_free_repair = -0.1 }
	}
	else_if = {
		limit = { GER_is_outlook_medium = yes }
		set_variable = { outlook_factory_capacity = -0.025 }
		set_variable = { outlook_speed_buildings = -0.025 }
		set_variable = { outlook_drift_defence = 0.05 }
		set_variable = { outlook_free_repair = 0.05 }
	}
	else_if = {
		limit = { GER_is_outlook_high = yes }
		set_variable = { outlook_factory_capacity = 0.05 }
		set_variable = { outlook_speed_buildings = 0.05 }
		set_variable = { outlook_drift_defence = 0.1 }
		set_variable = { outlook_free_repair = 0.1 }
	}
	else_if = {
		limit = { GER_is_outlook_very_high = yes }
		set_variable = { outlook_factory_capacity = 0.1 }
		set_variable = { outlook_speed_buildings = 0.1 }
		set_variable = { outlook_drift_defence = 0.2 }
		set_variable = { outlook_free_repair = 0.2 }
	}
}

GER_start_the_cultural_revolution = {
	set_global_flag = GER_cultural_revolution_started
	set_variable = { reich_morale = 10 }
	set_variable = { reich_outlook = 10 }
	set_variable = { cultural_decision_cost = 50 }
	set_variable = { cultural_decision_days_remove = 80 }
	set_variable = { cultural_decision_days_re_enable = 240 }
	GER_compute_gauge_position = yes
	add_dynamic_modifier = { 
		modifier = GER_national_morale_dynamic_modifier
		scope = ROOT
	}
	add_dynamic_modifier = {
		modifier = GER_social_outlook_dynamic_modifier
		scope = ROOT
	}
	GER_compute_national_morale_modifier = yes
	GER_compute_social_outlook_modifier = yes
	
	set_country_flag = { flag = GER_starting_cultural_revolution days = 100 value = 1 } # so the player can ease in
	country_event = { id = gerdom.54 days = 1 }
	
	add_to_array = { cultural_target_state = 50 } # Wurttemberg
	add_to_array = { cultural_target_state = 53 } # Bavaria
	add_to_array = { cultural_target_state = 783 } # Baden
	add_to_array = { cultural_target_state = 55 } # Hessen
	add_to_array = { cultural_target_state = 57 } # Westfalen
	add_to_array = { cultural_target_state = 59 } # Hanover
	add_to_array = { cultural_target_state = 65 } # Saschen
	add_to_array = { cultural_target_state = 64 } # Brandenburg
	add_to_array = { cultural_target_state = 66 } # Silesia
	add_to_array = { cultural_target_state = 85 } # Prussia
	add_to_array = { cultural_target_state = 51 } # Rhineland
	add_to_array = { cultural_target_state = 803 } # Austria
	add_to_array = { cultural_target_state = 28 } # Alsace
	add_to_array = { cultural_target_state = 69 } # Sudetenland
	add_to_array = { cultural_target_state = 991 } # Schleswig-Holstein
	
	set_variable = { attitude@wurttemberg = -80 }
	set_variable = { progress@wurttemberg = 12 }
	set_variable = { progress_base_rate@wurttemberg = 0.1 }
	set_variable = { progress_rate@wurttemberg = progress_base_rate@wurttemberg }
	
	set_variable = { attitude@bayern = 24 }
	set_variable = { progress@bayern = 24 }
	set_variable = { progress_base_rate@bayern = 0.1 }
	set_variable = { progress_rate@bayern = progress_base_rate@bayern }
	
	set_variable = { attitude@baden = -12 }
	set_variable = { progress@baden = 17 }
	set_variable = { progress_base_rate@baden = 0.1 }
	set_variable = { progress_rate@baden = progress_base_rate@baden }
	
	set_variable = { attitude@hessen = 15 }
	set_variable = { progress@hessen = 20 }
	set_variable = { progress_base_rate@hessen = 0.1 }
	set_variable = { progress_rate@hessen = progress_base_rate@hessen }
	
	set_variable = { attitude@westfalen = 69 }
	set_variable = { progress@westfalen = 34 }
	set_variable = { progress_base_rate@westfalen = 0.1 }
	set_variable = { progress_rate@westfalen = progress_base_rate@westfalen }
	
	set_variable = { attitude@niedersachsen = -23 }
	set_variable = { progress@niedersachsen = 12 }
	set_variable = { progress_base_rate@niedersachsen = 0.1 }
	set_variable = { progress_rate@niedersachsen = progress_base_rate@niedersachsen }
	
	set_variable = { attitude@obersachsen = 19 }
	set_variable = { progress@obersachsen = 27 }
	set_variable = { progress_base_rate@obersachsen = 0.1 }
	set_variable = { progress_rate@obersachsen = progress_base_rate@obersachsen  }
	
	set_variable = { attitude@brandenburg = -54 }
	set_variable = { progress@brandenburg = 5 }
	set_variable = { progress_base_rate@brandenburg = 0.1 }
	set_variable = { progress_rate@brandenburg = progress_base_rate@brandenburg }
	
	set_variable = { attitude@schlesien = 18 }
	set_variable = { progress@schlesien = 10 }
	set_variable = { progress_base_rate@schlesien = 0.1 }
	set_variable = { progress_rate@schlesien = progress_base_rate@schlesien }
	
	set_variable = { attitude@prussen = -23 }
	set_variable = { progress@prussen = 29 }
	set_variable = { progress_base_rate@prussen = 0.1 }
	set_variable = { progress_rate@prussen = progress_base_rate@prussen }
	
	set_variable = { attitude@rhein = 3 }
	set_variable = { progress@rhein = 3 }
	set_variable = { progress_base_rate@rhein = 0.1 }
	set_variable = { progress_rate@rhein = progress_base_rate@rhein }
	
	set_variable = { attitude@osterreich = -10 }
	set_variable = { progress@osterreich = 10 }
	set_variable = { progress_base_rate@osterreich = 0.1 }
	set_variable = { progress_rate@osterreich = progress_base_rate@osterreich }
	
	set_variable = { attitude@elsass_lorithgen = 10 }
	set_variable = { progress@elsass_lorithgen = 13 }
	set_variable = { progress_base_rate@elsass_lorithgen = 0.1 }
	set_variable = { progress_rate@elsass_lorithgen = progress_base_rate@elsass_lorithgen }
	
	set_variable = { attitude@schlewig_holstein = 39 }
	set_variable = { progress@schlewig_holstein = 13 }
	set_variable = { progress_base_rate@schlewig_holstein = 0.1 }
	set_variable = { progress_rate@schlewig_holstein = progress_base_rate@schlewig_holstein }
	
	set_variable = { attitude@sudetenland = 39 }
	set_variable = { progress@sudetenland = 13 }
	set_variable = { progress_base_rate@sudetenland = 0.1 }
	set_variable = { progress_rate@sudetenland = progress_base_rate@sudetenland }
	
	for_each_scope_loop = {
		array = cultural_target_state
		GER_compute_regional_progress_rate = yes
	}
	
	swap_ideas = {
		remove_idea = GER_clerical_spectre
		add_idea = GER_clerical_spectre_2
	}
	
	if = {
		limit = { has_government = valkist NOT = { has_completed_focus = GER_eliminate_reactionaries } }
		add_ideas = GER_military_disloyalty
	}
	
	GER_compute_cultural_revolution_modifiers = yes
	force_update_dynamic_modifier = yes
}

GER_clear_cultural_revolution = {
	clr_global_flag = GER_cultural_revolution_started
	clear_variable = reich_morale
	clear_variable = reich_outlook
	clear_variable = cultural_decision_cost
	clear_variable = cultural_decision_days_remove
	clear_variable = cultural_decision_days_re_enable
	
	add_dynamic_modifier = { 
		modifier = GER_national_morale_dynamic_modifier
		scope = ROOT
	}
	add_dynamic_modifier = {
		modifier = GER_social_outlook_dynamic_modifier
		scope = ROOT
	}
	remove_dynamic_modifier = { modifier = GER_national_morale_dynamic_modifier }
	remove_dynamic_modifier = { modifier = GER_social_outlook_dynamic_modifier }
	
	
	clear_array = cultural_target_state
	
	clear_variable = progress@wurttemberg
	clear_variable = progress_base_rate@wurttemberg
	clear_variable = progress_rate@wurttemberg
	
	clear_variable = progress@bayern
	clear_variable = progress_base_rate@bayern
	clear_variable = progress_rate@bayern
	
	clear_variable = progress@baden
	clear_variable = progress_base_rate@baden
	clear_variable = progress_rate@baden
	
	clear_variable = progress@hessen
	clear_variable = progress_base_rate@hessen
	clear_variable = progress_rate@hessen
	
	clear_variable = progress@westfalen
	clear_variable = progress_base_rate@westfalen
	clear_variable = progress_rate@westfalen
	
	clear_variable = progress@niedersachsen
	clear_variable = progress_base_rate@niedersachsen
	clear_variable = progress_rate@niedersachsen
	
	clear_variable = progress@obersachsen
	clear_variable = progress_base_rate@obersachsen
	clear_variable = progress_rate@obersachsen
	
	clear_variable = progress@brandenburg
	clear_variable = progress_base_rate@brandenburg
	clear_variable = progress_rate@brandenburg
	
	clear_variable = progress@schlesien
	clear_variable = progress_base_rate@schlesien
	clear_variable = progress_rate@schlesien
	
	clear_variable = progress@prussen
	clear_variable = progress_base_rate@prussen
	clear_variable = progress_rate@prussen
	
	clear_variable = progress@rhein
	clear_variable = progress_base_rate@rhein
	clear_variable = progress_rate@rhein
	
	clear_variable = progress@osterreich
	clear_variable = progress_base_rate@osterreich
	clear_variable = progress_rate@osterreich
	
	clear_variable = progress@elsass_lorithgen
	clear_variable = progress_base_rate@elsass_lorithgen
	clear_variable = progress_rate@elsass_lorithgen
	
	clear_variable = progress@schlewig_holstein
	clear_variable = progress_base_rate@schlewig_holstein
	clear_variable = progress_rate@schlewig_holstein
	
	clear_variable = progress@sudetenland
	clear_variable = progress_base_rate@sudetenland
	clear_variable = progress_rate@sudetenland
}

# 
# How to use:
# set_temp_variable = { region_to_use = region }
#

GER_fix_variables_for_frame = {
	# use a linear transformation formula, mapping a value `x` from an original range [a, b] to a new range [c, d]
	# the formula: mapped_value = (((x - a) * (d - c)) / (b - a) + c)
	# let range [a, b] = [-100, 100]
	# let range [c, d] = [0, 20], then
	# 
	# mapped_value = 0 + ((x-(-100))*(20-0))/(100-(-100), thus
	# mapped_value = ((x + 100) * 20) / (200), thus
	# mapped_value = (x + 100) / 10
	#
	# for any value `x` in range -100 to 100, you calculate the mapped value in the range 0 to 20 using the above-mentioned formula
	for_each_loop = {
		array = GER.regions
		value = v
		set_variable = { fixed = GER.attitude@var:v }
		add_to_variable = { fixed = 100 }
		divide_variable = { fixed = 10 }
		round_variable = fixed
		
		clamp_variable = { var = fixed min = 0 max = 20 }
		set_variable = { GER.frame@var:v = fixed }
		clear_variable = fixed
	}
}

GER_compute_monthly_national_morale = {
	if = {
		limit = { NOT = { check_variable = { modifier@GER_reich_morale_change_monthly = 0 } } }
		
		set_temp_variable = { reich_morale_add = modifier@GER_reich_morale_change_monthly }
		multiply_temp_variable = { reich_morale_add = 100 }
		add_to_variable = { reich_morale = reich_morale_add }
		GER_compute_gauge_position = yes
		GER_compute_national_morale_modifier = yes
	}
}

GER_compute_monthly_social_outlook = {
	if = {
		limit = { NOT = { check_variable = { modifier@GER_social_outlook_change_monthly = 0 } } }
		
		set_temp_variable = { reich_outlook_add = modifier@GER_reich_morale_change_monthly }
		multiply_temp_variable = { reich_outlook_add = 100 }
		add_to_variable = { reich_outlook = reich_outlook_add }
		GER_compute_gauge_position = yes
		GER_compute_social_outlook_modifier = yes
	}
}

GER_compute_monthly_cultural_revolution = {
	if = {
		limit = { 
			NOT = { has_country_flag = GER_starting_cultural_revolution has_idea = GER_victory_fever }
			check_variable = { reich_morale > 50 }
		}
		set_temp_variable = { amount = -2 }
		GER_add_reichs_morale = yes
	}
	if = {
		limit = {
			NOT = { has_country_flag = GER_starting_cultural_revolution has_idea = GER_victory_fever has_country_flag = GER_expanded_political_college }
			check_variable = { reich_outlook > 50 }
		}
		set_temp_variable = { amount = -1 }
		GER_add_social_outlook = yes
	}
	
	if = {
		limit = { 
			NOT = { has_country_flag = GER_starting_cultural_revolution }
			check_variable = { reich_morale < 35 }
		}
		set_temp_variable = { amount = 1 }
		GER_add_reichs_morale = yes
	}
	if = {
		limit = {
			NOT = { has_country_flag = GER_starting_cultural_revolution }
			check_variable = { reich_outlook < 35 }
		}
		set_temp_variable = { amount = 1 }
		GER_add_social_outlook = yes
	}
	GER_compute_monthly_national_morale = yes
	GER_compute_monthly_social_outlook = yes
}

GER_victory_fever_effect = {
	if = {
		limit = { 
			NOT = { has_idea = GER_victory_fever }
			event_target:defeated_country = {
				OR = {
					tag = FRA
					tag = ITA
					tag = SOV
					tag = ENG
					tag = USA
				}
			}
		}
		add_timed_idea = {
			idea = GER_victory_fever
			months = 3
		}
	}
	if = {
		limit = { 
			has_idea = GER_victory_fever
			event_target:defeated_country = { is_actual_major = yes }
		}
		modify_timed_idea = {
			idea = GER_victory_fever
			months = 1
		}
	}
	if = {
		limit = { 
			has_idea = GER_victory_fever
			event_target:defeated_country = { 
				OR = {
					tag = SER
					tag = ROM
					tag = GRE
					tag = BEL
					tag = POL
				}
			}
		}
		modify_timed_idea = {
			idea = GER_victory_fever
			days = 15
		}
	}
	if = {
		limit = { 
			has_idea = GER_victory_fever
			event_target:defeated_country = { 
				OR = {
					tag = SOV
					tag = ENG
					tag = USA
				}
			}
		}
		modify_timed_idea = {
			idea = GER_victory_fever
			months = 3
		}
	}
}

GER_compute_gauge_position = {
	# if we assume that reich morale goes up to 100, then, because the frames are 5, we have;
	#
	# frame 1: between 10 and 20
	# frame 2: between 30 and 40
	# frame 3: between 50 and 60
	# frame 4: between 60 and 80
	# frame 5: between 80 and 100
	if = {
		limit = { GER_is_morale_very_low = yes }
		set_variable = { reich_morale_gauge = 1 } # do not use add, as that would complicate things
	} else_if = {
		limit = { GER_is_morale_low = yes }
		set_variable = { reich_morale_gauge = 2 }
	} else_if = {
		limit = { GER_is_morale_medium = yes }
		set_variable = { reich_morale_gauge = 3 }
	} else_if = {
		limit = { GER_is_morale_high = yes }
		set_variable = { reich_morale_gauge = 4 }
	} else_if = {
		limit = { GER_is_morale_very_high = yes }
		set_variable = { reich_morale_gauge = 5 }
	} else = { # assume variable is more or less than any of these values
		clamp_variable = {
			var = reich_morale
			min = 0
			max = 100
		}
	}
	if = {
		limit = { GER_is_outlook_very_low = yes }
		set_variable = { reich_outlook_gauge = 1 } # do not use add, as that would complicate things
	} else_if = {
		limit = { GER_is_outlook_low = yes }
		set_variable = { reich_outlook_gauge = 2 }
	} else_if = {
		limit = { GER_is_outlook_medium = yes }
		set_variable = { reich_outlook_gauge = 3 }
	} else_if = {
		limit = { GER_is_outlook_high = yes }
		set_variable = { reich_outlook_gauge = 4 }
	} else_if = {
		limit = { GER_is_outlook_very_high = yes }
		set_variable = { reich_outlook_gauge = 5 }
	} else = { # assume variable is more or less than any of these values
		clamp_variable = {
			var = reich_outlook
			min = 0
			max = 100
		}
		GER_compute_gauge_position = yes # recursion
	}
}

# state scope
GER_compute_state_gauge_position = {
	# States
	clamp_variable = { var = GER.attitude@THIS.belongs_to_region min = -100 max = 100 }
	if = {
		limit = { GER_is_attitude_very_low = yes }
		set_variable = { state_attitude_gauge = 1 } # do not use add, as that would complicate things
	} else_if = {
		limit = { GER_is_attitude_low = yes }
		set_variable = { state_attitude_gauge = 2 }
	} else_if = {
		limit = { GER_is_attitude_neutral = yes }
		set_variable = { state_attitude_gauge = 3 }
	} else_if = {
		limit = { GER_is_attitude_high = yes }
		set_variable = { state_attitude_gauge = 4 }
	} else_if = {
		limit = { GER_is_attitude_very_high = yes }
		set_variable = { state_attitude_gauge = 5 }
	}
}

# To work with the below, set_temp_variable = { cd_change = value you want to change by }
# 

GER_change_cd_reenable = {
	set_temp_variable = { cd_change_tooltip = cd_change }
	if = {
		limit = { check_variable = { cd_change < 0 } }
		multiply_temp_variable = { cd_change_tooltip = -1 }
	}
	custom_effect_tooltip = GER_cultural_decision_days_re_enable_change
	if = {
		limit = { has_variable = cultural_decision_days_re_enable }
		add_to_variable = { cultural_decision_days_re_enable = cd_change }
	}
}

GER_change_cd_timer = {
	set_temp_variable = { cd_change_tooltip = cd_change }
	if = {
		limit = { check_variable = { cd_change < 0 } }
		multiply_temp_variable = { cd_change_tooltip = -1 }
	}
	custom_effect_tooltip = GER_cultural_decision_days_remove_change
	if = {
		limit = { has_variable = cultural_decision_days_remove }
		add_to_variable = { cultural_decision_days_remove = cd_change }
	}
}

GER_change_cd_cost = {
	set_temp_variable = { cd_change_tooltip = cd_change }
	if = {
		limit = { check_variable = { cd_change < 0 } }
		multiply_temp_variable = { cd_change_tooltip = -1 }
	}
	custom_effect_tooltip = GER_cultural_decision_cost_change
	if = {
		limit = { has_variable = cultural_decision_cost }
		add_to_variable = { cultural_decision_cost = cd_change }
	}
}

# for valkist constitution, set_temp_variable = { cd_change = value you want to change by } 

GER_reconstructive_revolution_spirit_change = {
	custom_effect_tooltip = GER_reconstructive_revolution_spirit_change_tt
	hidden_effect = {
		if = {
			limit = { check_variable = { change_factor = 1 } }
			add_to_variable = { GER_reconstructive_revolution_valkist_factor = cd_change }
		}
		if = {
			limit = { check_variable = { change_factor = 2 } }
			add_to_variable = { GER_reconstructive_revolution_war_stab_factor = cd_change }
		}
		if = {
			limit = { check_variable = { change_factor = 3 } }
			add_to_variable = { GER_reconstructive_revolution_conscription_factor = cd_change }
		}
		if = {
			limit = { check_variable = { change_factor = 4 } }
			add_to_variable = { GER_reconstructive_revolution_pop_stab_factor = cd_change }
		}
		if = {
			limit = { check_variable = { change_factor = 5 } }
			add_to_variable = { GER_reconstructive_revolution_civ_build_factor = cd_change }
		}
		if = {
			limit = { check_variable = { change_factor = 6 } }
			add_to_variable = { GER_reconstructive_revolution_mil_build_factor = cd_change } 
		}
		if = {
			limit = { check_variable = { change_factor = 7 } }
			add_to_variable = { GER_reconstructive_revolution_command_max_factor = cd_change }
		}
		if = {
			limit = { check_variable = { change_factor = 8 } }
			add_to_variable = { GER_reconstructive_revolution_command_gain_factor = cd_change }
		}
		else = {
			add_to_variable = { GER_reconstructive_revolution_pp_factor = cd_change }
		}
	}
}

GER_hire_possedist_ministers = {
	activate_advisor = GER_Fritz_Kloppe_hog_val
	activate_advisor = GER_Ernst_Wilhelm_Bohle_for_val
	activate_advisor = GER_Franz_Josef_Furtwangler_eco_val
	activate_advisor = GER_Ernst_von_Salomon_sec_val
}

GER_hire_paetelist_ministers = {
	activate_advisor = GER_Karl_Otto_Paetel_hog_val
	activate_advisor = GER_Hans_von_Henting_for_val
	activate_advisor = GER_August_Winnig_eco_val
	activate_advisor = GER_Friedrich_Wilhelm_Heinz_sec_val
}

GER_hire_young_conservative_ministers = {
	activate_advisor = GER_Edgar_Julius_Jung_hog_pau
	activate_advisor = GER_Ernst_von_Weizsacker_for_pau
	activate_advisor = GER_Gustav_Hulser_eco_pau
	activate_advisor = GER_Ferdinand_von_Luninck_sec_pau
}

GER_hire_tst_ministers = {
	activate_advisor = GER_Franz_Pfeffer_von_Salomon_hog_npo
	activate_advisor = GER_Axel_von_Freytagh_for_npo
	activate_advisor = GER_Gottfried_Feder_eco_npo
	activate_advisor = GER_Friedrich_Schmitt_sec_npo
}

GER_yc_set_up = {
	country_event = { id = geryc.1 hours = 3 }
	activate_advisor = GER_Ferdinand_von_Luninck_sec_pau
	set_temp_variable = { coalition_partner_var = token:valkist }
	add_to_coalition = yes
	set_temp_variable = { coalition_partner_var = token:national_populist }
	add_to_coalition = yes
}

GER_tst_set_up = {
	hidden_effect = {
		country_event = gertst.0
		country_event = { id = germil.5 days = 7 }
		remove_ideas = GER_a_reich_divided
		set_temp_variable = { coalition_partner_var = token:paternal_autocrat }
		add_to_coalition = yes
		set_temp_variable = { coalition_partner_var = token:valkist }
		add_to_coalition = yes
	}
}

GER_tst_rule_idea = {
	if = {
		limit = { has_idea = GER_tst_elite }
		swap_ideas = {
			remove_idea = GER_tst_elite
			add_idea = GER_tst_elite1
		}
	}
	else_if = {
		limit = { has_idea = GER_tst_elite1 }
		swap_ideas = {
			remove_idea = GER_tst_elite1
			add_idea = GER_tst_elite2
		}
	}
	else_if = {
		limit = { has_idea = GER_tst_elite_sturm }
		swap_ideas = {
			remove_idea = GER_tst_elite_sturm
			add_idea = GER_tst_elite_sturm1
		}
	}
	else_if = {
		limit = { has_idea = GER_tst_elite_sturm1 }
		swap_ideas = {
			remove_idea = GER_tst_elite_sturm1
			add_idea = GER_tst_elite_sturm2
		}
	}
	else = {
		effect_tooltip = {
			custom_effect_tooltip = GER_warrior_class_tt
			if = {
				limit = { has_idea = GER_tst_elite1 }
				swap_ideas = {
					remove_idea = GER_tst_elite1
					add_idea = GER_tst_elite2
				}
			}
			else = {
				swap_ideas = {
					remove_idea = GER_tst_elite
					add_idea = GER_tst_elite1
				}
			}
			custom_effect_tooltip = tooltip_white_line
			custom_effect_tooltip = GER_warrior_class_tt_2
			if = {
				limit = { has_idea = GER_tst_elite_sturm1 }
				swap_ideas = {
					remove_idea = GER_tst_elite_sturm1
					add_idea = GER_tst_elite_sturm2
				}
			}
			else = {
				swap_ideas = {
					remove_idea = GER_tst_elite_sturm
					add_idea = GER_tst_elite_sturm1
				}
			}
		}
	}
}

GER_central_council_add = {
	if = {
		limit = { has_idea = GER_central_council }
		swap_ideas = {
			remove_idea = GER_central_council
			add_idea = GER_central_council_1
		}
	}
	else_if = {
		limit = { has_idea = GER_central_council_1 }
		swap_ideas = {
			remove_idea = GER_central_council_1
			add_idea = GER_central_council_2
		}
	}
	else_if = {
		limit = { 
			OR = {
				has_idea = GER_central_council_2
				has_idea = GER_central_council_3
			}
		}
		swap_ideas = {
			remove_idea = GER_central_council_2
			add_idea = GER_central_council_3
		}
	}
	else = { add_ideas = GER_central_council }
}

GER_val_ending_cultural_revolution = {
	if = {
		limit = {
			GER_measure_morale_ending_factor = yes
			GER_measure_outlook_ending_factor = yes
		}
		set_variable = { GER_val_ending_pol_factor = GER_temp_ending_state_factor }	
		set_variable = { GER_val_ending_econ_capacity = GER_temp_ending_state_factor_alt } 
		add_to_temp_variable = { GER_val_ending_pol_factor = GER_legalized_dictatorship_stability_factor }
	}
	clear_variable = GER_legalized_dictatorship_stability_factor
	GER_clear_cultural_revolution = yes
}

GER_tst_ending_cultural_revolution = {
	if = {
		limit = {
			GER_measure_morale_ending_factor = yes
			GER_measure_outlook_ending_factor = yes
		}
		if = {
			limit = { GER_is_morale_very_low = yes }
			set_temp_variable = { GER_tst_ending_negative_pol_factor = -0.15 }
		}
		else_if = {
			limit = { GER_is_morale_low = yes }
			set_temp_variable = { GER_tst_ending_negative_pol_factor = -0.10 }
		}
		set_variable = { GER_tst_ending_pol_factor = GER_temp_ending_state_factor }
		
		if = {
			limit = { GER_is_outlook_very_low = yes }
			add_to_temp_variable = { GER_tst_ending_negative_pol_factor = -0.2 }
		}
		else_if = {
			limit = { GER_is_outlook_low = yes }
			add_to_temp_variable = { GER_tst_ending_negative_pol_factor = -0.1 }
		}
		set_variable = { GER_tst_ending_econ_capacity = GER_temp_ending_state_factor_alt }
	}
	
	GER_clear_cultural_revolution = yes
}

GER_yc_ending_cultural_revolution = {
	if = {
		limit = {
			GER_measure_morale_ending_factor = yes
			GER_measure_outlook_ending_factor = yes
		}
		if = {
			limit = { GER_is_morale_very_low = yes }
			set_temp_variable = { GER_yc_ending_negative_pol_factor = -0.075 }
		}
		else_if = {
			limit = { GER_is_morale_low = yes }
			set_temp_variable = { GER_yc_ending_negative_pol_factor = -0.025 }
		}
		set_variable = { GER_tst_ending_pol_factor = GER_temp_ending_state_factor }
		
		if = {
			limit = { GER_is_outlook_very_low = yes }
			add_to_temp_variable = { GER_yc_ending_negative_pol_factor = -0.1 }
		}
		else_if = {
			limit = { GER_is_outlook_low = yes }
			add_to_temp_variable = { GER_yc_ending_negative_pol_factor = -0.05 } # favouritism!!!!
		}
		set_variable = { GER_tst_ending_econ_capacity = GER_temp_ending_state_factor_alt } 
	}
	
	GER_clear_cultural_revolution = yes
}

GER_begin_tst_event_power_chain = {
	if = {
		limit = { has_country_leader = { character = GER_Rudolf_Jung } }
		country_event = { id = gertst.15 random_days = 60 } 
	}
	else = {
		country_event = { id = gertst.12 random_days = 60 } 
	}
}

GER_set_up_local_group = {
	hidden_effect = {
		if = {
			limit = { check_variable = { tag_to_release = FRP } }
			ROOT = {
				every_owned_state = {
					limit = {
						OR = {
							state = 19
							state = 22
							state = 31
							state = 1015
							state = 1016
						}
					}
					transfer_state_to = OCC
					OCC = {
						ROOT = {
							set_autonomy = {
								target = OCC
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						set_cosmetic_tag = GER_OCC_reduced
						FRP = { FRP_Adrien_Marquet = { set_nationality = OCC } }
						add_country_leader_role = {
							character = FRP_Adrien_Marquet
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = FRP_Adrien_Marquet
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = FRP_Adrien_Marquet
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
						add_ideas = GER_artificial_state
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 15
							state = 743
							state = 749
						}
					}
					transfer_state_to = NRM
					NRM = {
						ROOT = {
							set_autonomy = {
								target = NRM
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						set_cosmetic_tag = GER_NRM_reduced
						FRP = { FRP_Rene_Bouffet = { set_nationality = NRM } }
						add_country_leader_role = {
							character = FRP_Rene_Bouffet
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = FRP_Rene_Bouffet
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = FRP_Rene_Bouffet
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
						add_ideas = GER_artificial_state
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 14
							state = 989
							state = 990
						}
					}
					transfer_state_to = BRI
					BRI = {
						ROOT = {
							set_autonomy = {
								target = BRI
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 17
							state = 20
							state = 1004
							state = 747
							state = 32
							state = 735
							state = 21
							state = 748
							state = 755
						}
					}
					transfer_state_to = WLL
					WLL = {
						ROOT = {
							set_autonomy = {
								target = WLL
								autonomous_state = autonomy_occupied_puppet
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						set_cosmetic_tag = GER_WLL_reduced
						add_ideas = GER_artificial_state
						GER = { GER_Otto_Abetz = { set_nationality = WLL } }
						add_country_leader_role = {
							character = GER_Otto_Abetz
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = GER_Otto_Abetz
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = GER_Otto_Abetz
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
					}
				}
				every_owned_state = {
					limit = { state = 29 }
					ROOT = {
						if = {
							limit = { NOT = { country_exists = FLA } }
							set_country_flag = GER_FLA_dont_exist
						}
					}
					transfer_state_to = FLA
					if = {
						limit = {
							OR = {
								FLA = { is_subject_of = GER }
								ROOT = { has_country_flag = GER_FLA_dont_exist }
							}
							FLA = { NOT = { has_cosmetic_tag = GER_FLA_reduced } }
						}
						FLA = {
							ROOT = {
								set_autonomy = {
									target = FLA
									autonomous_state = autonomy_occupied_puppet
									end_wars = no
									end_civil_wars = no
								}
								if = {
									limit = {
										OR = {
											has_completed_focus = GER_create_the_confenderations
											has_completed_focus = GER_support_local_valkist_groups
										}
									}
									activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
								}
							}
							set_cosmetic_tag = GER_FLA_reduced
							if = {
								limit = { GER = { has_completed_focus = GER_german_peoples_army } }
								GER = { GER_Friedrich_Wilhelm_Kruger = { set_nationality = FLA } }
								add_country_leader_role = {
									character = GER_Friedrich_Wilhelm_Kruger
									promote_leader = yes
									country_leader = {
										ideology = national_populist_subtype
									}
								}
							}
							else_if = {
								limit = { GER = { NOT = { has_completed_focus = GER_german_peoples_army } has_character = GER_Carl_Heinrich_von_Stuelpnagel } }
								GER = { GER_Carl_Heinrich_von_Stuelpnagel = { set_nationality = FLA } }
								add_country_leader_role = {
									character = GER_Carl_Heinrich_von_Stuelpnagel
									promote_leader = yes
									country_leader = {
										ideology = valkist_subtype
									}
								}
								add_country_leader_role = {
									character = GER_Carl_Heinrich_von_Stuelpnagel
									promote_leader = yes
									country_leader = {
										ideology = paternal_autocrat_subtype
									}
								}
							}
							else = {
								GER = { GER_Friedrich_Dollmann = { set_nationality = FLA } }
								add_country_leader_role = {
									character = GER_Friedrich_Dollmann
									promote_leader = yes
									country_leader = {
										ideology = valkist_subtype
									}
								}
								add_country_leader_role = {
									character = GER_Friedrich_Dollmann
									promote_leader = yes
									country_leader = {
										ideology = national_populist_subtype
									}
								}
							}
							add_ideas = GER_artificial_state
							clr_country_flag = GER_FLA_dont_exist
						}
					}
				}
				every_owned_state = {
					limit = { state = 1 }
					transfer_state_to = COR
					COR = {
						ROOT = {
							set_autonomy = {
								target = COR
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
					}
				}
				every_owned_state = {
					limit = {
						NOT = {
							state = 19
							state = 22
							state = 31
							state = 1015
							state = 1016
							state = 15
							state = 743
							state = 749
							state = 14
							state = 989
							state = 990
							state = 17
							state = 20
							state = 1004
							state = 747
							state = 32
							state = 735
							state = 21
							state = 748
							state = 755
							state = 29 
							state = 1
						}
						is_core_of = var:tag_to_release
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = var:tag_to_release
					var:tag_to_release = {
						ROOT = {
							set_autonomy = {
								target = var:tag_to_release
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						set_cosmetic_tag = FRP_reduced
						FRA = { FRA_Marcel_Deat = { set_nationality = var:tag_to_release } }
						add_country_leader_role = {
							character = FRA_Marcel_Deat
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = FRA_Marcel_Deat
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = FRA_Marcel_Deat
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = BEL } }
			every_owned_state = {
				limit = { 
					is_core_of = var:tag_to_release
					is_claim_or_core_of_ROOT = no
				}
				ROOT = {
					if = {
						limit = { NOT = { country_exists = FLA } }
						set_country_flag = GER_FLA_dont_exist
					}
				}
				transfer_state_to = FLA
				if = {
					limit = {
						OR = {
							FLA = { is_subject_of = GER }
							ROOT = { has_country_flag = GER_FLA_dont_exist }
						}
						FLA = { NOT = { has_cosmetic_tag = GER_FLA_reduced } }
					}
					FLA = {
						ROOT = {
							set_autonomy = {
								target = FLA
								autonomous_state = autonomy_occupied_puppet
								end_wars = no
								end_civil_wars = no
							}
							clr_country_flag = GER_FLA_dont_exist
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						set_cosmetic_tag = GER_FLA_reduced
						if = {
							limit = { GER = { has_completed_focus = GER_german_peoples_army } }
							GER = { GER_Friedrich_Wilhelm_Kruger = { set_nationality = FLA } }
							add_country_leader_role = {
								character = GER_Friedrich_Wilhelm_Kruger
								promote_leader = yes
								country_leader = {
									ideology = national_populist_subtype
								}
							}
						}
						else_if = {
							limit = { GER = { NOT = { has_completed_focus = GER_german_peoples_army } has_character = GER_Carl_Heinrich_von_Stuelpnagel } }
							GER = { GER_Carl_Heinrich_von_Stuelpnagel = { set_nationality = FLA } }
							add_country_leader_role = {
								character = GER_Carl_Heinrich_von_Stuelpnagel
								promote_leader = yes
								country_leader = {
									ideology = valkist_subtype
								}
							}
							add_country_leader_role = {
								character = GER_Carl_Heinrich_von_Stuelpnagel
								promote_leader = yes
								country_leader = {
									ideology = paternal_autocrat_subtype
								}
							}
						}
						else = {
							GER = { GER_Friedrich_Dollmann = { set_nationality = FLA } }
							add_country_leader_role = {
								character = GER_Friedrich_Dollmann
								promote_leader = yes
								country_leader = {
									ideology = valkist_subtype
								}
							}
							add_country_leader_role = {
								character = GER_Friedrich_Dollmann
								promote_leader = yes
								country_leader = {
									ideology = national_populist_subtype
								}
							}
						}
						add_ideas = GER_artificial_state
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = ITP } }
			ROOT = {
				every_owned_state = {
					limit = {
						OR = {
							state = 115
							state = 850
							state = 117
							state = 849
							state = 156
						}
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = SIC
					SIC = {
						ROOT = {
							set_autonomy = {
								target = SIC
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
						set_cosmetic_tag = GER_SIC_reduced
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 162
							state = 851
							state = 852
							state = 2
							state = 157
						}
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = UPC
					UPC = {
						ROOT = {
							set_autonomy = {
								target = UPC
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_ideas = GER_artificial_state
						set_cosmetic_tag = GER_UPC_reduced
						ITP = { ITP_Giuseppe_Bottai = { set_nationality = UPC } }
						add_country_leader_role = {
							character = ITP_Giuseppe_Bottai
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = ITP_Giuseppe_Bottai
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = ITP_Giuseppe_Bottai
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 768
							state = 114
						}
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = SRD
					SRD = {
						ROOT = {
							set_autonomy = {
								target = SRD
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
					}
				}
				every_owned_state = {
					limit = {
						NOT = {
							state = 162
							state = 851
							state = 852
							state = 2
							state = 157
							state = 115
							state = 850
							state = 117
							state = 849
							state = 156
						}
						is_core_of = var:tag_to_release
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = var:tag_to_release
					var:tag_to_release = {
						ROOT = {
							set_autonomy = {
								target = var:tag_to_release
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
						set_cosmetic_tag = GER_LOM_reduced
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = SPF } }
			ROOT = {
				every_owned_state = {
					limit = {
						OR = {
							state = 171
							state = 833
						}
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = SPR
					SPR = {
						ROOT = {
							set_autonomy = {
								target = SPR
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
						set_cosmetic_tag = GER_SPR_reduced
						add_country_leader_role = {
							character = SPR_Vicente_Risco
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = SPR_Vicente_Risco
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = SPR_Vicente_Risco
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 166
							state = 165
							state = 1005
							state = 167
						}
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = SPA
					SPA = {
						ROOT = {
							set_autonomy = {
								target = SPA
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
						set_cosmetic_tag = GER_SPA_reduced
						add_country_leader_role = {
							character = CAT_Daniel_Cardona
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = CAT_Daniel_Cardona
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = CAT_Daniel_Cardona
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
					}
				}
				every_owned_state = {
					limit = {
						OR = {
							state = 169
							state = 834
							state = 173
							state = 168
						}
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = SPM
					SPM = {
						ROOT = {
							set_autonomy = {
								target = SPM
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
						set_cosmetic_tag = GER_SPM_reduced
						add_country_leader_role = {
							character = SPM_Juan_Aparicio_Lopez
							promote_leader = yes
							country_leader = {
								ideology = valkist_subtype
							}
						}
						add_country_leader_role = {
							character = SPM_Juan_Aparicio_Lopez
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						add_country_leader_role = {
							character = SPM_Juan_Aparicio_Lopez
							promote_leader = yes
							country_leader = {
								ideology = paternal_autocrat_subtype
							}
						}
					}
				}
				every_owned_state = {
					limit = {
						NOT = {
							state = 171
							state = 833
							state = 166
							state = 165
							state = 1005
							state = 167
							state = 169
							state = 834
							state = 173
							state = 168
						}
						is_core_of = var:tag_to_release
						is_claim_or_core_of_ROOT = no
					}
					transfer_state_to = var:tag_to_release
					var:tag_to_release = {
						ROOT = {
							set_autonomy = {
								target = var:tag_to_release
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
						set_cosmetic_tag = GER_SPF_reduced
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = ROM } }
			every_owned_state = {
				limit = { 
					OR = {
						state = 762
						state = 83
						state = 84
						state = 76
						state = 1040
					}
					is_claim_or_core_of_ROOT = no
				}
				ROOT = {
					if = {
						limit = { NOT = { country_exists = TRA } }
						set_country_flag = GER_TRA_dont_exist
					}
				}
				transfer_state_to = TRA
				if = {
					limit = {
						OR = {
							TRA = { is_subject_of = GER }
							ROOT = { has_country_flag = GER_TRA_dont_exist }
						}
					}
					TRA = {
						ROOT = {
							set_autonomy = {
								target = TRA
								autonomous_state = autonomy_valkist_protectorate
								end_wars = no
								end_civil_wars = no
							}
							clr_country_flag = GER_TRA_dont_exist
							if = {
								limit = {
									OR = {
										has_completed_focus = GER_create_the_confenderations
										has_completed_focus = GER_support_local_valkist_groups
									}
								}
								activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
							}
						}
						add_timed_idea = {
							idea = GER_illegitimate_state
							days = 1825
						}
					}
				}
			}
			every_owned_state = {
				limit = { 
					OR = {
						state = 79
						state = 80
						state = 1041
						state = 78
						state = 853
					}
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = ROR
				ROR = {
					ROOT = {
						set_autonomy = {
							target = ROR
							autonomous_state = autonomy_valkist_protectorate
							end_wars = no
							end_civil_wars = no
						}
						if = {
							limit = {
								OR = {
									has_completed_focus = GER_create_the_confenderations
									has_completed_focus = GER_support_local_valkist_groups
								}
							}
							activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
						}
					}
					add_ideas = GER_artificial_state
					set_cosmetic_tag = GER_ROR_reduced
				}
			}
			if = {
				limit = { HSR = { exists = yes has_cosmetic_tag = GER_HSR_reduced } }
				every_owned_state = {
					limit = { state = 82 }
					transfer_state_to = HSR
				}
			}
			else = {
				every_owned_state = {
					limit = { state = 82 }
					transfer_state_to = HSR
					HSR = {
						if = {
							limit = { is_subject = no }
							ROOT = {
								set_autonomy = {
									target = HSR
									autonomous_state = autonomy_occupied_puppet
									end_wars = no
									end_civil_wars = no
								}
								if = {
									limit = {
										OR = {
											has_completed_focus = GER_create_the_confenderations
											has_completed_focus = GER_support_local_valkist_groups
										}
									}
									activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
								}
							}
							add_ideas = GER_artificial_state
							set_cosmetic_tag = GER_HSR_reduced
							if = {
								limit = { 
									OR = {
										has_completed_focus = GER_german_peoples_army
										has_completed_focus = GER_lutze_gambit
									}
								}
								GER = { GER_Otto_Kumm = { set_nationality = ROOT } }
								GER = { GER_Otto_Kumm = { set_nationality = HSR } }
								add_country_leader_role = {
									character = GER_Otto_Kumm
									promote_leader = yes
									country_leader = {
										ideology = valkist_subtype
									}
								}
								add_country_leader_role = {
									character = GER_Otto_Kumm
									promote_leader = yes
									country_leader = {
										ideology = national_populist_subtype
									}
								}
							}
							else = {
								GER = { GER_Eugen_Meindl = { set_nationality = ROOT } }
								GER = { GER_Eugen_Meindl = { set_nationality = HSR } }
								add_country_leader_role = {
									character = GER_Eugen_Meindl
									promote_leader = yes
									country_leader = {
										ideology = valkist_subtype
									}
								}
								add_country_leader_role = {
									character = GER_Eugen_Meindl
									promote_leader = yes
									country_leader = {
										ideology = national_populist_subtype
									}
								}
								add_country_leader_role = {
									character = GER_Eugen_Meindl
									promote_leader = yes
									country_leader = {
										ideology = paternal_autocrat_subtype
									}
								}
							}
						}
					}
				}
			}
			every_owned_state = {
				limit = { 
					NOT = {
						state = 762
						state = 83
						state = 84
						state = 76
						state = 1040
						state = 79
						state = 80
						state = 1041
						state = 78
						state = 853
					}
					is_core_of = var:tag_to_release
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = var:tag_to_release
				var:tag_to_release = {
					ROOT = {
						set_autonomy = {
							target = var:tag_to_release
							autonomous_state = autonomy_valkist_protectorate
							end_wars = no
							end_civil_wars = no
						}
						if = {
							limit = {
								OR = {
									has_completed_focus = GER_create_the_confenderations
									has_completed_focus = GER_support_local_valkist_groups
								}
							}
							activate_targeted_decision = { target = PREV decision = GER_valkist_crush_resistance }
						}
					}
					add_country_leader_role = {
						character = ROM_Ion_Antonescu
						promote_leader = yes
						country_leader = {
							ideology = valkist_subtype
						}
					}
					add_country_leader_role = {
						character = ROM_Ion_Antonescu
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
					add_country_leader_role = {
						character = ROM_Ion_Antonescu
						promote_leader = yes
						country_leader = {
							ideology = paternal_autocrat_subtype
						}
					}
					add_timed_idea = {
						idea = GER_illegitimate_state
						days = 1825
					}
					set_cosmetic_tag = GER_ROM_reduced
				}
			}
		}
		every_country = {
			limit = {
				OR = {
					has_cosmetic_tag = FRP_reduced
					has_cosmetic_tag = GER_NRM_reduced
					has_cosmetic_tag = GER_OCC_reduced
					has_cosmetic_tag = GER_WLL_reduced
					has_cosmetic_tag = GER_FLA_reduced
					has_cosmetic_tag = GER_LOM_reduced
					has_cosmetic_tag = GER_UPC_reduced
					has_cosmetic_tag = GER_SIC_reduced
					has_cosmetic_tag = GER_HSR_reduced
					has_cosmetic_tag = GER_ROM_reduced
					has_cosmetic_tag = GER_ROR_reduced
					has_cosmetic_tag = GER_SPF_reduced
					has_cosmetic_tag = GER_SPA_reduced
					has_cosmetic_tag = GER_SPM_reduced
					has_cosmetic_tag = GER_SPR_reduced
				}
			}
			every_core_state = {
				limit = { NOT = { is_owned_by = PREV } }
				remove_core_of = PREV  
				add_claim_by = PREV
			}
		}
		ROOT = {
			every_owned_state = {
				limit = { 
					has_resistance = no
					should_initiate_resistance = yes
				}
				start_resistance = yes
			}
		}
	}
}

GER_set_up_confederation = {
	custom_effect_tooltip = establish_confederation_commit
	hidden_effect = {
		if = {
			limit = { 
				OR = { # east confederation 
					check_variable = { tag_to_release = POL }
					check_variable = { tag_to_release = UKR }
					check_variable = { tag_to_release = BLR }
					check_variable = { tag_to_release = LIT }
					check_variable = { tag_to_release = EST }
					check_variable = { tag_to_release = LAT }
				}
			}
			every_owned_state = {
				limit = {
					OR = {
						state = 86
						state = 67
						state = 752
						state = 87
						state = 98
						state = 889
						state = 188
					}
					is_claim_or_core_of_ROOT = no
				}
				add_claim_by = ROOT
			}
			release_targeted_tag = yes
			if = {
				limit = {
					OR = {
						has_completed_focus = GER_create_the_confenderations
						has_completed_focus = GER_support_local_valkist_groups
					}
				}
				activate_targeted_decision = { target = var:tag_to_release decision = GER_valkist_crush_resistance }
			}
			var:tag_to_release = {
				set_cosmetic_tag = GER_east_confederation
				save_global_event_target_as = german_eastern_confederation
				load_focus_tree = generic_focus
				set_party_name = {
					ideology = valkist
					long_name = GER_confederation_party_long
					name = GER_confederation_party
				}
				set_party_name = {
					ideology = national_populist
					long_name = GER_confederation_party_long
					name = GER_confederation_party
				}
				add_timed_idea = {
					days = 1825
					idea = GER_recently_established_admin_confed
				}
				add_ideas = GER_artificial_state
			}
		}
		if = {
			limit = { 
				OR = { # west confederation 
					check_variable = { tag_to_release = HOL }
					check_variable = { tag_to_release = BEL }
				}
			}
			release_targeted_tag = yes
			if = {
				limit = {
					OR = {
						has_completed_focus = GER_create_the_confenderations
						has_completed_focus = GER_support_local_valkist_groups
					}
				}
				activate_targeted_decision = { target = var:tag_to_release decision = GER_valkist_crush_resistance }
			}
			var:tag_to_release = {
				set_cosmetic_tag = GER_west_confederation
				save_global_event_target_as = german_western_confederation
				load_focus_tree = generic_focus
				set_party_name = {
					ideology = valkist
					long_name = GER_confederation_party_long
					name = GER_confederation_party
				}
				set_party_name = {
					ideology = national_populist
					long_name = GER_confederation_party_long
					name = GER_confederation_party
				}
				add_timed_idea = {
					days = 1825
					idea = GER_recently_established_admin_confed
				}
				add_ideas = GER_artificial_state
				add_state_claim = 29
				add_state_claim = 18
				add_state_claim = 747
				add_state_claim = 749
				add_state_claim = 743
				add_state_claim = 15
				add_state_claim = 30
				add_state_claim = 989
				add_state_claim = 15
				add_state_claim = 990
				add_state_claim = 14
				if = {
					limit = {
						ROOT = {
							OR = {
								owns_state = 29
								owns_state = 18
								owns_state = 747
								owns_state = 749
								owns_state = 743
								owns_state = 15
								owns_state = 30
								owns_state = 989
								owns_state = 15
								owns_state = 990
								owns_state = 14
							}
						}
					}
					ROOT = {
						every_owned_state = {
							limit = {
								OR = {
									state = 29
									state = 18
									state = 747
									state = 749
									state = 743
									state = 15
									state = 30
									state = 989
									state = 15
									state = 990
									state = 14
								}
							}
							transfer_state_to = var:tag_to_release
						}
					}
				}
			}
		}
		if = {
			limit = { 
				OR = { # north confederation 
					check_variable = { tag_to_release = NOR }
					check_variable = { tag_to_release = DEN }
					check_variable = { tag_to_release = SWE }
					check_variable = { tag_to_release = FIN }
				}
			}
			release_targeted_tag = yes
			if = {
				limit = {
					OR = {
						has_completed_focus = GER_create_the_confenderations
						has_completed_focus = GER_support_local_valkist_groups
					}
				}
				activate_targeted_decision = { target = var:tag_to_release decision = GER_valkist_crush_resistance }
			}
			var:tag_to_release = {
				set_cosmetic_tag = GER_north_confederation
				save_global_event_target_as = german_northern_confederation
				load_focus_tree = generic_focus
				set_party_name = {
					ideology = valkist
					long_name = GER_confederation_party_long
					name = GER_confederation_party
				}
				set_party_name = {
					ideology = national_populist
					long_name = GER_confederation_party_long
					name = GER_confederation_party
				}
				add_timed_idea = {
					days = 1825
					idea = GER_recently_established_admin_confed
				}
				add_ideas = GER_artificial_state
			}
		}
		ROOT = {
			every_owned_state = {
				limit = { 
					has_resistance = no
					should_initiate_resistance = yes
				}
				start_resistance = yes
			}
		}
	}
}

GER_rl_effect = {
	hidden_effect = {
		GER_check_rl_exists = yes
		if = {
			limit = { NOT = { has_country_flag = GER_rl_exists_failsafe } }
			GER_check_rl = yes
			GER_set_up_rl = yes
			if = {
				limit = { NOT = { has_active_mission = GER_guns_support_rl } }
				activate_mission = GER_guns_support_rl
			}
			if = {
				limit = { NOT = { has_active_mission = GER_manpower_support_rl } }
				activate_mission = GER_manpower_support_rl
			}
			if = {
				limit = { has_country_flag = gertst_11_fire }
				clr_country_flag = gertst_11_fire
				country_event = gertst.11
			}
			if = {
				limit = {
					country_exists = RLU
					country_exists = RLW
				}
				country_event = { id = gertst.5 hours = 6 }
			}
		}
	}
}

GER_check_rl_exists = {
	if = {
		limit = {
			OR = {
				check_variable = { tag_to_release = HOL }
				check_variable = { tag_to_release = BEL }
			}
			country_exists = RLL
		}
		ROOT = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = HOL
						is_core_of = BEL
						state = 29
					}
					NOT = { state = 802 }
					NOT = { state = 806 }
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = RLL
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
	if = {
		limit = { 
			check_variable = { tag_to_release = NOR } 
			any_country_with_original_tag = {
				original_tag_to_check = NOR
				OR = {
					has_cosmetic_tag = GER_NOR_gg
					has_cosmetic_tag = GER_NORD_gg
				}
			}
		}
		random_country_with_original_tag = {
			original_tag_to_check = NOR
			limit = { 
				OR = {
					has_cosmetic_tag = GER_NOR_gg
					has_cosmetic_tag = GER_NORD_gg
				}
			}
			save_event_target_as = GER_norway_rk
		}
		ROOT = {
			every_owned_state = {
				limit = {
					is_core_of = NOR
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = event_target:GER_norway_rk
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
	if = {
		limit = { 
			check_variable = { tag_to_release = SLO } 
			any_country_with_original_tag = {
				original_tag_to_check = SLO
				has_cosmetic_tag = GER_SLO_gg
			}
		}
		random_country_with_original_tag = {
			original_tag_to_check = SLO
			limit = { has_cosmetic_tag = GER_SLO_gg }
			save_event_target_as = GER_slovak_rk
		}
		ROOT = {
			every_owned_state = {
				limit = {
					is_core_of = SLO
				}
				add_to_temp_array = { temp_rl_states = THIS }
				transfer_state_to = event_target:GER_slovak_rk
			}
		}
	}
	if = {
		limit = { 
			check_variable = { tag_to_release = POL } 
			any_country_with_original_tag = {
				original_tag_to_check = POL
				has_cosmetic_tag = GER_POL_gg
			}
		}
		random_country_with_original_tag = {
			original_tag_to_check = POL
			limit = { has_cosmetic_tag = GER_POL_gg }
			save_event_target_as = GER_general_government
		}
		ROOT = {
			every_owned_state = {
				limit = {
					OR = {
						state = 10
						state = 90
						state = 799
						state = 92
						state = 1065
						state = 88
						state = 89
						state = 91
					}
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = event_target:GER_general_government
				87 = { add_claim_by = ROOT }
				98 = { add_claim_by = ROOT }
				889 = { add_claim_by = ROOT }
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
	if = {
		limit = { 
			OR = { # ostland
				check_variable = { tag_to_release = BLR }
				check_variable = { tag_to_release = LIT }
				check_variable = { tag_to_release = EST }
				check_variable = { tag_to_release = LAT }
			}
			country_exists = RLW
		}
		ROOT = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = LIT
						is_core_of = EST
						is_core_of = LAT
						is_core_of = BLR
						state = 948
						state = 791
						state = 210
						state = 209
						state = 208
						state = 242
						state = 243
						state = 791
					}
					NOT = { state = 194 }
					NOT = { state = 188 }
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = RLW
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
	if = {
		limit = {
			check_variable = { tag_to_release = UKR }
			country_exists = RLU
		}
		227 = { add_core_of = UKR }
		228 = { add_core_of = UKR }
		ROOT = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = UKR
						state = 218
						state = 234
						state = 1063
						state = 245
						state = 238
						state = 265
						state = 260
						state = 240
						state = 220
						state = 224
						state = 228
						state = 227
						state = 194
						state = 1062
					}
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = RLU
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
	if = {
		limit = { 
			check_variable = { tag_to_release = VRS }
			country_exists = RLR
		}
		ROOT = {
			every_owned_state = {
				limit = {
					is_core_of = VRS
					NOT = {
						state = 914
						state = 948
						state = 791
						state = 210
						state = 209
						state = 208
						state = 242
						state = 243
						state = 791
						state = 218
						state = 234
						state = 1063
						state = 245
						state = 238
						state = 265
						state = 260
						state = 240
						state = 220
						state = 224
						state = 228
						state = 227
						state = 194
						state = 1062
						state = 235
						state = 237
					}
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = RLR
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
	if = {
		limit = { 
			OR = { # kaukasien
				check_variable = { tag_to_release = GEO }
				check_variable = { tag_to_release = ARM }
				check_variable = { tag_to_release = AZR }
				check_variable = { tag_to_release = GOR }
			}
			country_exists = RLK
		}
		ROOT = {
			every_owned_state = {
				limit = {
					OR = {
						is_core_of = GEO
						is_core_of = ARM
						is_core_of = AZR
						is_core_of = GOR
						state = 235
						state = 237
					}
					is_claim_or_core_of_ROOT = no
				}
				transfer_state_to = RLK
			}
		}
		set_country_flag = GER_rl_exists_failsafe
	}
}

GER_check_rl = {
	hidden_effect = {
		if = {
			limit = {
				OR = {
					check_variable = { tag_to_release = HOL }
					check_variable = { tag_to_release = BEL }
				}
			}
			create_dynamic_country = {
				original_tag = HOL 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_HOL_gg
					set_party_name = {
						ideology = national_populist
						long_name = HOL_gg_party_long
						name = HOL_gg_party
					}
					HOL = { HOL_Henk_Feldmeijer = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = HOL_Henk_Feldmeijer
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							OR = {
								is_core_of = HOL
								is_core_of = BEL
								state = 29
							}
							NOT = { state = 802 }
							NOT = { state = 806 }
							is_claim_or_core_of_ROOT = no
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = NOR } }
			create_dynamic_country = {
				original_tag = NOR 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_NOR_gg
					set_party_name = {
						ideology = national_populist
						long_name = NOR_gg_party_long
						name = NOR_gg_party
					}
					NOR = { NOR_Jonas_Lie = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = NOR_Jonas_Lie
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							is_core_of = NOR
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = SLO } }
			create_dynamic_country = {
				original_tag = SLO 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_SLO_gg
					set_party_name = {
						ideology = national_populist
						long_name = SLO_gg_party_long
						name = SLO_gg_party
					}
					SLO = { GER_Franz_Karmasin = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = GER_Franz_Karmasin
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							is_core_of = SLO
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = POL } }
			create_dynamic_country = {
				original_tag = POL 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_POL_gg
					set_party_name = {
						ideology = national_populist
						long_name = POL_gg_party_long
						name = POL_gg_party
					}
					ROOT = { GER_Werner_Best = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = GER_Werner_Best
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							OR = {
								state = 10
								state = 90
								state = 799
								state = 92
								state = 1065
								state = 88
								state = 89
								state = 91
							}
							is_claim_or_core_of_ROOT = no
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
						87 = { add_claim_by = ROOT }
						98 = { add_claim_by = ROOT }
						889 = { add_claim_by = ROOT }
					}
				}
			}
		}
		if = {
			limit = { 
				OR = { # ostland
					check_variable = { tag_to_release = BLR }
					check_variable = { tag_to_release = LIT }
					check_variable = { tag_to_release = EST }
					check_variable = { tag_to_release = LAT }
				}
			}
			create_dynamic_country = {
				original_tag = BLR 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_BLR_gg
					set_party_name = {
						ideology = national_populist
						long_name = BLR_gg_party_long
						name = BLR_gg_party
					}
					ROOT = { GER_Karl_Siegmund_Litzmann = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = GER_Karl_Siegmund_Litzmann
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							OR = {
								is_core_of = LIT
								is_core_of = EST
								is_core_of = LAT
								is_core_of = BLR
								state = 948
								state = 791
								state = 210
								state = 209
								state = 208
								state = 242
								state = 243
								state = 791
							}
							NOT = { state = 194 }
							NOT = { state = 188 }
							is_claim_or_core_of_ROOT = no
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = UKR } }
			227 = { add_core_of = UKR }
			228 = { add_core_of = UKR }
			create_dynamic_country = {
				original_tag = UKR 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_UKR_gg
					set_party_name = {
						ideology = national_populist
						long_name = UKR_gg_party_long
						name = UKR_gg_party
					}
					if = {
						limit = { has_global_flag = GER_meyer_rosenberg }
						ROOT = { GER_Alfred_Meyer = { set_nationality = var:tag_to_release } }
						add_country_leader_role = {
							character = GER_Alfred_Meyer
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
						clr_global_flag = GER_meyer_rosenberg
					}
					else = {
						ROOT = { GER_Wilhelm_Schepmann = { set_nationality = var:tag_to_release } }
						add_country_leader_role = {
							character = GER_Wilhelm_Schepmann
							promote_leader = yes
							country_leader = {
								ideology = national_populist_subtype
							}
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							OR = {
								is_core_of = UKR
								state = 218
								state = 234
								state = 1063
								state = 245
								state = 238
								state = 265
								state = 260
								state = 240
								state = 220
								state = 224
								state = 228
								state = 227
								state = 194
								state = 1062
							}
							is_claim_or_core_of_ROOT = no
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
		if = {
			limit = { check_variable = { tag_to_release = VRS } }
			create_dynamic_country = {
				original_tag = VRS 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_RUS_gg
					set_party_name = {
						ideology = national_populist
						long_name = RUS_gg_party_long
						name = RUS_gg_party
					}
					ROOT = { GER_Erich_von_dem_Bach_Zelewski = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = GER_Erich_von_dem_Bach_Zelewski
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							is_core_of = VRS
							NOT = {
								state = 914
								state = 948
								state = 791
								state = 210
								state = 209
								state = 208
								state = 242
								state = 243
								state = 791
								state = 218
								state = 234
								state = 1063
								state = 245
								state = 238
								state = 265
								state = 260
								state = 240
								state = 220
								state = 224
								state = 228
								state = 227
								state = 194
								state = 1062
								state = 235
								state = 237
							}
							is_claim_or_core_of_ROOT = no
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
		if = {
			limit = { 
				OR = { # kaukasien
					check_variable = { tag_to_release = GEO }
					check_variable = { tag_to_release = ARM }
					check_variable = { tag_to_release = AZR }
					check_variable = { tag_to_release = GOR }
				}
			}
			create_dynamic_country = {
				original_tag = GOR 
				reserve_dynamic_country = yes
				set_temp_variable = { tag_to_release = THIS }
				var:tag_to_release = { 
					set_cosmetic_tag = GER_KAU_gg
					set_party_name = {
						ideology = national_populist
						long_name = KAU_gg_party_long
						name = KAU_gg_party
					}
					ROOT = { GER_Otto_Gohdes = { set_nationality = var:tag_to_release } }
					add_country_leader_role = {
						character = GER_Otto_Gohdes
						promote_leader = yes
						country_leader = {
							ideology = national_populist_subtype
						}
					}
				}
				ROOT = {
					every_owned_state = {
						limit = {
							OR = {
								is_core_of = GEO
								is_core_of = ARM
								is_core_of = AZR
								is_core_of = GOR
								state = 235
								state = 237
							}
							is_claim_or_core_of_ROOT = no
						}
						add_to_temp_array = { temp_rl_states = THIS }
						transfer_state_without_overriding_occupation = yes
					}
				}
			}
		}
	}
}

GER_set_up_rl = {
	set_autonomy = {
		target = var:tag_to_release
		autonomous_state = autonomy_reichslander
		end_wars = no
		end_civil_wars = no
	}
	var:tag_to_release = {
		load_focus_tree = generic_focus
		add_timed_idea = {
			days = 1825
			idea = GER_recently_established_admin_rl
		}
		every_owned_state = { 
			remove_core_of = var:tag_to_release
			add_claim_by = var:tag_to_release
		}
		set_country_flag = GER_is_reichslander
		every_core_state = {
			remove_core_of = var:tag_to_release
			if = {
				limit = {
					is_on_continent = europe
					NOT = {
						owner = { original_tag = GER }
						state = 914
						state = 948
						state = 791
						state = 210
						state = 209
						state = 208
						state = 242
						state = 243
						state = 791
						state = 218
						state = 234
						state = 1063
						state = 245
						state = 238
						state = 265
						state = 260
						state = 240
						state = 220
						state = 224
						state = 228
						state = 227
						state = 194
						state = 1062
					}
				}
				add_claim_by = owner
			}
		}
		every_owned_state = {
			limit = { has_resistance = no }
			start_resistance = yes
		}
		every_owned_state = {
			limit = { has_resistance = yes }
			ROOT = { activate_targeted_decision = { target = PREV decision = GER_crush_local_resistance_rl } }
		}
		ROOT = {
			activate_targeted_decision = { target = var:tag_to_release decision = GER_integrate_rl }
			if = {
				limit = { has_completed_focus = GER_work_with_foreign_groups }
				activate_targeted_decision = { target = var:tag_to_release decision = GER_gather_collab_rl }
			}
			every_owned_state = {
				limit = { 
					has_resistance = no
					should_initiate_resistance = yes
				}
				start_resistance = yes
			}
		}
		add_to_array = { global.GER_reichslander = THIS }
	}
}

GER_calculate_fervor_effects = {
	# fervor level is 1 - surrender_progress (i.e. 1 at start of war - 0 when capitulated)
	set_variable = { fervor_level = THIS.surrender_progress }
	multiply_variable = { fervor_level = -1 }
	add_to_variable = { fervor_level = 1 }
	
	# org modifier lerp +20% to -20%
	set_variable = { fervor_org_modifier = fervor_level }
	multiply_variable = { fervor_org_modifier = 0.4 }
	add_to_variable = { fervor_org_modifier = -0.2 }
	
	# reinforce rate modifier lerp +3% to -3%
	set_variable = { fervor_reinforce_modifier = fervor_org_modifier }
	multiply_variable = { fervor_reinforce_modifier = 3 }
	multiply_variable = { fervor_reinforce_modifier = 0.05 }
	
	# terrain modifier lerp +40% to -40%
	set_variable = { fervor_terrain_modifier = fervor_org_modifier }
	multiply_variable = { fervor_terrain_modifier = 2 }
	
	# att/def modifier lerp +10% to -10%
	set_variable = { fervor_combat_modifier = fervor_org_modifier }
	multiply_variable = { fervor_combat_modifier = 0.5 }
	
	# movement and recovery speed modifier lerp +20% to -20%
	set_variable = { fervor_fast_modifier = fervor_org_modifier }
	
	# entrenchment modifier lerp 0 to -50%
	set_variable = { fervor_dig_modifier = fervor_level }
	multiply_variable = { fervor_dig_modifier = 0.5 }
	add_to_variable = { fervor_dig_modifier = -0.5 }
	
	log = "GCW FERVOR [THIS.GetName] LEVEL = [?fervor_level], org = [?fervor_org_modifier], def = [?fervor_combat_modifier]"
	force_update_dynamic_modifier = yes
}

GER_create_infantry_template = {
	if = {
		limit = { NOT = { has_template = "Infanterie-Division" } }
		division_template = {
			name = "Infanterie-Division"
			division_names_group = GER_INF_01
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }
				infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }
				infantry = { x = 2 y = 0 }
				infantry = { x = 2 y = 1 }
				infantry = { x = 2 y = 2 }
			}
			support = {
				engineer = { x = 0 y = 0 }
				artillery = { x = 0 y = 1 }
			}
		}
	}
}

GER_create_cavalry_template = {
	if = {
		limit = { NOT = { has_template = "Kavallerie-Brigade" } }
		division_template = {
			name = "Kavallerie-Brigade"
			division_names_group = GER_CAV_01
			
			regiments = {
				cavalry = { x = 0 y = 0 }
				cavalry = { x = 0 y = 1 }
				cavalry = { x = 1 y = 0 }
				cavalry = { x = 1 y = 1 }
			}
			support = {
				recon = { x = 0 y = 0 }
				artillery = { x = 0 y = 1 }
			}
		}
	}
}

GER_create_garrison_template = {
	if = {
		limit = { NOT = { has_template = "Kampfregimenter" } }
		division_template = {
			name = "Kampfregimenter"
			division_names_group = GER_MLT_01
			regiments = {
				militia = { x = 0 y = 0 }
				militia = { x = 0 y = 1 }
				militia = { x = 0 y = 2 }
				militia = { x = 1 y = 0 }
				militia = { x = 1 y = 1 }
				militia = { x = 1 y = 2 }
			}
		}
	}
}

GER_create_mountaineer_template = {
	if = {
		limit = { NOT = { has_template = "Gebirgs-Brigade" } }
		division_template = {
			name = "Gebirgs-Brigade"
			division_names_group = GER_MNT_01
			
			regiments = {
				mountaineers = { x = 0 y = 0 }
				mountaineers = { x = 0 y = 1 }
				mountaineers = { x = 0 y = 2 }
				mountaineers = { x = 1 y = 0 }
				mountaineers = { x = 1 y = 1 }
				mountaineers = { x = 1 y = 2 }
			}
		}
	}
}

GER_create_tst_template = {
	if = {
		limit = { NOT = { has_template = "Standarte der Trutzbündische Stoßtruppe" } }
		division_template = {
			name = "Standarte der Trutzbündische Stoßtruppe"
			division_names_group = GER_TST_01
			priority = 2
			
			regiments = {
				trutzbundischestosstruppe = { x = 0 y = 0 }
				trutzbundischestosstruppe = { x = 0 y = 1 }
				trutzbundischestosstruppe = { x = 0 y = 2 }
				trutzbundischestosstruppe = { x = 1 y = 0 }
				trutzbundischestosstruppe = { x = 1 y = 1 }
				trutzbundischestosstruppe = { x = 1 y = 2 }
				trutzbundischestosstruppe = { x = 2 y = 0 }
				trutzbundischestosstruppe = { x = 2 y = 1 }
				trutzbundischestosstruppe = { x = 2 y = 2 }
			}
			support = {
				recon = { x = 0 y = 0 }
				engineer = { x = 0 y = 1 }
				artillery = { x = 0 y = 2 }
			}
		}
	}
}

GER_create_tst_militia_template = {
	if = {
		limit = { NOT = { has_template = "Reserve-Trutzbündische Stoßtruppe Obergruppe" } }
		division_template = {
			name = "Reserve-Trutzbündische Stoßtruppe Obergruppe"
			division_names_group = GER_TST_02
			priority = 2
			
			regiments = {
				trutzbundischestosstruppe = { x = 0 y = 0 }
				trutzbundischestosstruppe = { x = 0 y = 1 }
				trutzbundischestosstruppe = { x = 0 y = 2 }
				trutzbundischestosstruppe = { x = 1 y = 0 }
				trutzbundischestosstruppe = { x = 1 y = 1 }
				trutzbundischestosstruppe = { x = 1 y = 2 }
			}
			support = {
				recon = { x = 0 y = 0 }
				engineer = { x = 0 y = 1 }
			}
		}
	}
}

GER_create_tst_mp_template = {
	if = {
		limit = { NOT = { has_template = "TST-Sicherungs-Division" } }
		division_template = {
			name = "TST-Sicherungs-Division"
			division_names_group = GER_TST_01
			priority = 2
			
			regiments = {
				infantry = { x = 0 y = 0 }
				infantry = { x = 0 y = 1 }
				infantry = { x = 0 y = 2 }
				infantry = { x = 1 y = 0 }
				infantry = { x = 1 y = 1 }
				infantry = { x = 1 y = 2 }
			}
			support = {
				trutzbundischesicherheitstruppe = { x = 0 y = 0 }
				artillery = { x = 0 y = 1 }
				engineer = { x = 0 y = 2 }
			}
		}
	}
}

GER_create_volkssturm_template = {
	if = {
		limit = { NOT = { has_template = "Deutscher Volkssturm-Division" } }
		division_template = {
			name = "Deutscher Volkssturm-Division"
			division_names_group = GER_MLT_02
			priority = 0
			is_locked = yes
			
			regiments = {
				militia = { x = 0 y = 0 }
				militia = { x = 0 y = 1 }
				militia = { x = 0 y = 2 }
				militia = { x = 1 y = 0 }
				militia = { x = 1 y = 1 }
				militia = { x = 1 y = 2 }
			}
		}
	}
}


GER_create_jungdeutscher_militia_template = {
	if = {
		limit = { NOT = { has_template = "Jungdeutscher Militia" } }
		division_template = {
			name = "Jungdeutscher Militia"
			division_names_group = GER_GAR_01
			regiments = {
				militia = { x = 0 y = 0 }
				militia = { x = 0 y = 1 }
				militia = { x = 0 y = 2 }
				militia = { x = 0 y = 3 }
			}
			priority = 0
		}
	}
}

GER_transfer_characters_to_WGR = {
	hidden_effect = {
		GER = {
			GER_Eduard_Stadtler = { set_nationality = ROOT }
			GER_Heinrich_von_Gleichen = { set_nationality = ROOT }
			GER_Otto_Bornemann = { set_nationality = ROOT }
			GER_Josias_zu_Waldeck_Pyrmont = { set_nationality = ROOT }
		}
	}
	for_each_loop = {
		array = GER.characters_wgr
		value = v
		break = break
		
		meta_effect = {
			text = {
				if = {
					limit = {
						has_character = [character_token]
					}
					set_nationality = {
						target_country = event_target:germany_yc
						character = [character_token]
					}
				}
			}
			character_token = "[?v.GetTokenKey]"
		}
	}
	
	event_target:germany_yc = {
		if = { 
			limit = { has_character = GER_Artur_Mahraun }
			GER_Artur_Mahraun = { promote_character = yes }
		}
		GER_hire_young_conservative_ministers = yes
	}
}

GER_transfer_characters_to_DDR = {
	hidden_effect = {
		GER = {
			GER_Gustav_Lombard = { set_nationality = ROOT }
			GER_Franz_von_Horauf = { set_nationality = ROOT }
			GER_Hyacinth_Strachwitz = { set_nationality = ROOT }
			GER_Herbert_Gille = { set_nationality = ROOT }
			GER_Theodor_Eicke = { set_nationality = ROOT }
			GER_Walter_Kruger = { set_nationality = ROOT }
			GER_Hermann_Preiss = { set_nationality = ROOT }
			GER_Matthias_Kleinheisterkamp = { set_nationality = ROOT }
			GER_Eduard_von_Schleich = { set_nationality = ROOT }
			GER_Harry_Bulow_Bothkamp = { set_nationality = ROOT }
			GER_Karl_Sauke = { set_nationality = ROOT }
			GER_Peter_Hansen = { set_nationality = ROOT }
			GER_Hilmar_Wackerle = { set_nationality = ROOT }
			GER_Werner_Ballauff = { set_nationality = ROOT }
			GER_Cassius_von_Montigny = { set_nationality = ROOT }
			GER_Friedemann_Goetze = { set_nationality = ROOT }
			GER_Wim_Brandt = { set_nationality = ROOT }
			GER_Wilhelm_Bittrich = { set_nationality = ROOT }
			GER_Curt_von_Gottberg = { set_nationality = ROOT }
			GER_Herbert_Ernst_Vahl = { set_nationality = ROOT }
			GER_Otto_Kumm = { set_nationality = ROOT }
			
			GER_Arthur_Seyss_Inquart = { set_nationality = ROOT }
			GER_Alfred_Rosenberg = { set_nationality = ROOT }
			GER_Wolf_von_Helldorff = { set_nationality = ROOT }
			GER_Friedrich_Grimm = { set_nationality = ROOT }
			
			GER_Paul_Hausser = { set_nationality = XXB }
			
		}
	}
	for_each_loop = {
		array = GER.characters_ddr
		value = v
		break = break
		
		meta_effect = {
			text = {
				if = {
					limit = {
						has_character = [character_token]
					}
					set_nationality = {
						target_country = event_target:germany_tst
						character = [character_token]
					}
				}
			}
			character_token = "[?v.GetTokenKey]"
		}
	}
	
	event_target:germany_tst = {
		if = {
			limit = { has_character = GER_Viktor_Lutze }
			GER_Viktor_Lutze = { promote_character = yes }
		}
		if = {
			limit = { has_character = GER_Hermann_Gauch }
			GER_Hermann_Gauch = { promote_character = yes }
		}
		GER_hire_tst_ministers = yes
	}
}

GER_transfer_admirals_characters = {
	for_each_loop = {
		array = GER.german_admirals
		value = v
		break = break
		
		meta_effect = {
			text = {
				GER = {
					if = {
						limit = {
							has_character = [character_token]
						}
						set_nationality = {
							target_country = ROOT
							character = [character_token]
						}
					}
				}
			}
			character_token = "[?v.GetTokenKey]"
		}
	}
}

GER_transfer_air_marshals_characters = {
	for_each_loop = {
		array = GER.german_air_marshals
		value = v
		break = break
		
		meta_effect = {
			text = {
				GER = {
					if = {
						limit = {
							has_character = [character_token]
						}
						set_nationality = {
							target_country = ROOT
							character = [character_token]
						}
					}
				}
			}
			character_token = "[?v.GetTokenKey]"
		}
	}
}

GER_replicate_original_tag_situation = {
	inherit_technology = GER
	set_technology = { tech_militias = 1 }
	
	GER_calculate_fervor_effects = yes
	GER_add_armour_variants = yes
	GER_add_aircraft_variants = yes
	GER_add_ship_variants = yes
	
	add_ideas = {
		GER_die_wacht_am_rhein
		GER_a_reich_divided
		GER_was_ist_des_deutschen_vaterland
		GER_reconstructive_revolution
	}
}

GER_replicate_dynamic_tag_situation = {
	inherit_technology = ROOT
	set_technology = { tech_militias = 1 }
	
	GER_add_armour_variants = yes
	GER_add_aircraft_variants = yes
	GER_add_ship_variants = yes
	
	add_ideas = {
		GER_die_wacht_am_rhein
		GER_a_reich_divided
		GER_was_ist_des_deutschen_vaterland
		GER_clerical_spectre
		GER_ENG_naval_treaty
		
	}
	if = {
		limit = { has_government = valkist NOT = { has_idea = GER_reconstructive_revolution } }
		add_ideas = GER_reconstructive_revolution
	}
}

GER_finish_event_chain_focus = {
	complete_national_focus = GER_the_triumphate
	set_country_flag = GER_event_chain_finished
}

GER_start_civil_war = {
	log = "FX_Event_Logging;GCW STARTS;[GetDateText]"
	set_global_flag = german_civil_war
	add_named_threat = {
		threat = 10
		name = GER_civil_war_threat
	}
	hidden_effect = {
		add_to_temp_array = { GER_dressler_states = 65.id }
		add_to_temp_array = { GER_dressler_states = 60.id }
		add_to_temp_array = { GER_dressler_states = 54.id }
		add_to_temp_array = { GER_dressler_states = 53.id }
		add_to_temp_array = { GER_dressler_states = 52.id }
		add_to_temp_array = { GER_dressler_states = 50.id }
		add_to_temp_array = { GER_dressler_states = 773.id }
		add_to_temp_array = { GER_dressler_states = 782.id }
		add_to_temp_array = { GER_dressler_states = 783.id }
		
		every_owned_state = {
			teleport_armies = { to_state_array = GER_dressler_states }
		}
		
		GER = {
			add_war_support = 0.65
			set_stability = 0.60
			if = {
				limit = { has_political_power < 0 }
				set_political_power = 0
			}
			increase_mobilization = yes
			increase_conscription = yes
			
			if = {
				limit = { has_template = "Standarte der Trutzbündische Stoßtruppe" }
				delete_unit_template_and_units = {
					division_template = "Standarte der Trutzbündische Stoßtruppe"
					disband = yes
				}
			}
			
			end_coalition = yes
			
			GER_finish_event_chain_focus = yes
			set_country_flag = GER_status_quo_flag
			set_country_flag = GER_dressler_solo
			mark_focus_tree_layout_dirty = yes
			
			GER_Richard_Scheringer = { 
				set_character_flag = GER_interim_chancellor
				add_temp_unit_leader_role = yes
				unit_leader_event = { id = gerdom.24 days = 1 }
			}
			
			activate_advisor = GER_Richard_Scheringer_hog_val
			activate_advisor = GER_Ernst_Wilhelm_Bohle_for_val
			activate_advisor = GER_Franz_Josef_Furtwangler_eco_val
			activate_advisor = GER_Ernst_von_Salomon_sec_val
			
			dismantle_faction = yes
			
			hidden_effect = {
				GER_Eduard_Dietl = { set_nationality = ROOT }
				GER_Wernher_von_Braun = { set_nationality = XXB }
				GER_Erich_Muller = { set_nationality = XXB }
				GER_Karl_Becker = { set_nationality = XXB }
				GER_Franz_Dorsch = { set_nationality = XXB }
				GER_Friedrich_Schurer = { set_nationality = XXB }
				GER_Hellmuth_Walter = { set_nationality = XXB }
				GER_Wilhelm_Runge = { set_nationality = XXB }
				GER_Wilhelm_Wimmer = { set_nationality = XXB }
				GER_Hans_Ohain = { set_nationality = XXB }
				GER_Werner_Heisenberg = { set_nationality = XXB }
				GER_Paul_Harteck = { set_nationality = XXB }
				GER_Kurt_Student = { set_nationality = XXB }
				GER_Eugen_Meindl = { set_nationality = XXB }
				GER_Hasso_von_Manteuffel = { set_nationality = XXB }
				GER_Ferdinand_Schoerner = { set_nationality = XXB }
				GER_Helmuth_Weidling = { set_nationality = XXB }
				GER_Walther_Wenck = { set_nationality = XXB }
				GER_Georg_Lindemann = { set_nationality = XXB }
				GER_Hermann_Balck = { set_nationality = XXB }
				GER_Hans_Speidel = { set_nationality = XXB }
			}
			
		}
		
		create_dynamic_country = {
			reserve_dynamic_country = yes
			original_tag = GER
			save_global_event_target_as = germany_yc
			
			GER_replicate_original_tag_situation = yes
			
			GER_create_infantry_template = yes
			GER_create_cavalry_template = yes
			GER_create_garrison_template = yes
			GER_create_mountaineer_template = yes
			GER_create_jungdeutscher_militia_template = yes
			
			set_politics = {
				ruling_party = paternal_autocrat
				elections_allowed = no
			}
			
			end_coalition = yes
			
			set_popularities = {
				vanguardist = 0
				collectivist = 0
				libertarian_socialist = 0
				social_democrat = 0
				social_liberal = 2
				market_liberal = 12
				social_conservative = 24
				authoritarian_democrat = 22
				paternal_autocrat = 30
				national_populist = 10
				valkist = 0
			}
			
			load_focus_tree = { tree = german_focus_fx keep_completed = yes }
			set_country_flag = GER_established_emergency_government
			mark_focus_tree_layout_dirty = yes
			set_country_flag = GER_event_chain_finished
		}
		
		create_dynamic_country = {
			reserve_dynamic_country = yes
			original_tag = GER
			save_global_event_target_as = germany_tst
			
			GER_replicate_original_tag_situation = yes
			
			GER_create_infantry_template = yes
			GER_create_cavalry_template = yes
			GER_create_garrison_template = yes
			GER_create_mountaineer_template = yes
			GER_create_tst_template = yes
			
			set_politics = {
				ruling_party = national_populist
				elections_allowed = no
			}
			
			end_coalition = yes
			
			set_popularities = {
				vanguardist = 0
				collectivist = 0
				libertarian_socialist = 0
				social_democrat = 0
				social_liberal = 0
				market_liberal = 0
				social_conservative = 19
				authoritarian_democrat = 4
				paternal_autocrat = 12
				national_populist = 40
				valkist = 25
			}
			
			load_focus_tree = { tree = german_focus_fx keep_completed = yes }
			set_country_flag = GER_tst_coup
			mark_focus_tree_layout_dirty = yes
			set_country_flag = GER_event_chain_finished
		}
		
		send_equipment_fraction = { target = event_target:yc value = 0.33 }
		send_equipment_fraction = { target = event_target:tst value = 0.5 } #50% of the remaining 66% = 33%
		
		GER_transfer_characters_to_DDR = yes
		every_owned_state = {
			limit = {
				is_controlled_by = ROOT
				OR = {
					state = 5  #East Prussia
					state = 62 #Vorpommern
					state = 63 #Hinter Pommern
					state = 64 #Brandenburg
					state = 66 #Upper Aragon
					state = 85 #Westpreußen
					state = 794 #Niederschlesien
					state = 795 #Luzice
					state = 786 #Neumark
					state = 807 #Danzig
				}
			}
			transfer_state_to = event_target:germany_tst
		}
		declare_war_on = {
			target = event_target:germany_tst
			type = civil_war
		}
		add_civil_war_target = event_target:germany_tst
		transfer_units_fraction = {
			target = event_target:germany_tst
			size = 0.2
			stockpile_ratio = 0.1
			army_ratio = 0.15
			keep_unit_leaders_trigger = { always = yes }
		}
		event_target:germany_tst = {
			set_temp_variable = { DDR_militia = 13 }
			set_temp_variable = { DDR_infantry = 10 }
			
			for_loop_effect = {
				start = 1
				end = DDR_militia
				compare = less_than_or_equals
				
				random_owned_controlled_state = {
					limit = { valid_state_for_spawning_friendly_unit = yes }
					create_unit = {
						division = "division_template = \"Kampfregimenter\" start_experience_factor = 0.1"
						owner = PREV
					}
				}
			}
			for_loop_effect = {
				start = 1
				end = DDR_infantry
				compare = less_than_or_equals
				
				random_owned_controlled_state = {
					limit = { valid_state_for_spawning_friendly_unit = yes }
					create_unit = {
						division = "division_template = \"Infanterie-Division\" start_experience_factor = 0.1"
						owner = PREV
					}
				}
			}
			
			if = {
				limit = { owns_state = 64 }
				set_capital = { state = 64 }
			}
			
			add_ideas = DDR_civil_war_fervor
			add_ideas = one_party_dictatorship
			GER_calculate_fervor_effects = yes
			set_cosmetic_tag = GER_TST_revolt
			
			add_equipment_to_stockpile = { type = train_equipment_1 amount = 10 producer = GER }
			add_equipment_production = {
				equipment = {
					type = infantry_equipment_1
					creator = "GER"
				}
				requested_factories = 3
				progress = 0.42
				efficiency = 100
			}
			add_equipment_production = {
				equipment = {
					type = artillery_equipment_1
					creator = "GER"
				}
				requested_factories = 1
				progress = 0.24
				efficiency = 100
			}
			add_equipment_production = {
				equipment = {
					type = support_equipment_1
					creator = "GER"
				}
				requested_factories = 1
				progress = 0.24
				efficiency = 100
			}
			add_equipment_production = {
				equipment = {
					type = convoy_1
				}
				requested_factories = 2
				progress = 0.20
				efficiency = 100
			}
			unlock_national_focus = GER_german_peoples_army
			add_ideas = GER_military_purge_tst_cw
		}
		
		GER_transfer_characters_to_WGR = yes
		every_owned_state = {
			limit = {
				is_controlled_by = ROOT
				OR = {
					state = 51 #Östliches Rheinland
					state = 55 #Hessen
					state = 56 #Hessen
					state = 57 #Weser-Ems
					state = 59 #Westfalen
					state = 61 #Mecklenberg
					state = 915 #Hamburg
					state = 991 #Holstein
				}
			}
			transfer_state_to = event_target:germany_yc
		}
		declare_war_on = {
			target = event_target:germany_yc
			type = civil_war
		}
		add_civil_war_target = event_target:germany_yc
		
		transfer_units_fraction = {
			target = event_target:germany_yc
			size = 0.2
			stockpile_ratio = 0.1
			army_ratio = 0.15
			keep_unit_leaders_trigger = { always = yes }
		}
		event_target:germany_yc = {
			set_temp_variable = { WGR_militia = 7 }
			set_temp_variable = { WGR_infantry = 16 }
			
			for_loop_effect = {
				start = 1
				end = WGR_militia
				compare = less_than_or_equals
				
				random_owned_controlled_state = {
					limit = { valid_state_for_spawning_friendly_unit = yes }
					create_unit = {
						division = "division_template = \"Kampfregimenter\" start_experience_factor = 0.1"
						owner = PREV
					}
				}
			}
			for_loop_effect = {
				start = 1
				end = WGR_infantry
				compare = less_than_or_equals
				
				random_owned_controlled_state = {
					limit = { valid_state_for_spawning_friendly_unit = yes }
					create_unit = {
						division = "division_template = \"Infanterie-Division\" start_experience_factor = 0.1"
						owner = PREV
					}
				}
			}
			if = {
				limit = { has_template = "Standarte der Trutzbündische Stoßtruppe" }
				delete_unit_template_and_units = {
					division_template = "Standarte der Trutzbündische Stoßtruppe"
					disband = yes
				}
			}
			
			if = {
				limit = { owns_state = 51 }
				set_capital = { state = 51 }
			}
			add_ideas = WGR_civil_war_fervor
			add_ideas = one_party_dictatorship
			GER_calculate_fervor_effects = yes
			set_cosmetic_tag = GER_YC_revolt
			
			event_target:germany_tst = {
				declare_war_on = {
					target = PREV
					type = civil_war
				}
				add_civil_war_target = PREV
			}
			
			add_equipment_to_stockpile = { type = train_equipment_1 amount = 10 producer = GER }
			add_equipment_production = {
				equipment = {
					type = infantry_equipment_1
					creator = "GER"
				}
				requested_factories = 3
				progress = 0.42
				efficiency = 100
			}
			add_equipment_production = {
				equipment = {
					type = artillery_equipment_1
					creator = "GER"
				}
				requested_factories = 1
				progress = 0.24
				efficiency = 100
			}
			add_equipment_production = {
				equipment = {
					type = support_equipment_1
					creator = "GER"
				}
				requested_factories = 1
				progress = 0.24
				efficiency = 100
			}
			add_equipment_production = {
				equipment = {
					type = convoy_1
				}
				requested_factories = 2
				progress = 0.20
				efficiency = 100
			}
		}
		GER_calculate_fervor_effects = yes
		add_ideas = GER_civil_war_fervor
		news_event = { id = fxnews.21 days = 1 }
	}
	effect_tooltip = {
		event_target:germany_yc = {
			ROOT = {
				declare_war_on = {
					target = PREV
					type = civil_war
				}
			}
		}
		event_target:germany_tst = {
			ROOT = {
				declare_war_on = {
					target = PREV
					type = civil_war
				}
			}
		}
	}
	GER = { save_global_event_target_as = GER_original }
}

GER_post_civil_war = {
	event_target:GER_original = { 
		change_tag_from = ROOT 
		GER_replicate_dynamic_tag_situation = yes #retired change this effect to whatever it needs to do ^^
		# i cant concentrate and have no idea what to do after, if oyu can figure out how to copy the tag just do it else i will eventually
		load_focus_tree = { tree = german_focus_fx keep_completed = yes } # so the completed focuses remain
		
	}
	every_owned_state = {
		transfer_state_to = event_target:GER_original
	}
	clr_global_flag = german_civil_war
	set_global_flag = german_civil_war_aftermath
	set_country_flag = GER_aftermath_civil_war
	country_event = { id = gerdom.22 days = 1 }
	set_capital = { state = 64 }
	save_global_event_target_as = germany
	drop_cosmetic_tag = yes
	GER_transfer_admirals_characters = yes
	GER_transfer_air_marshals_characters = yes
	
	if = {
		limit = { has_country_flag = GER_tst_coup }
		set_cosmetic_tag = GER_TST
	}
	else_if = {
		limit = { has_country_flag = GER_established_emergency_government }
		set_cosmetic_tag = GER_YC
	}
	
	if = {
		limit = { 
			HOL = { 
				is_subject = no
				is_in_faction = no
				has_authoritarian_government = yes
			} 
		}
		
		if = {
			limit = {
				HOL = { has_completed_focus = HOL_expand_german_economic_cooperation }
			}
			add_ideas = HOL_dutch_german_economic_cooperation_1
		}
		else = {
			add_ideas = HOL_dutch_german_economic_cooperation
		}
		
		create_faction = stahlpakt
		add_to_faction = HOL
	}
}

d_set_yc_rule = {
	set_politics = {
		ruling_party = paternal_autocrat
		elections_allowed = no
	}
	GER_hire_young_conservative_ministers = yes
	
	hidden_effect = {
		set_country_flag = GER_young_conservative_coup
		mark_focus_tree_layout_dirty = yes
		GER_finish_event_chain_focus = yes
	}
}

d_set_tst_rule = {
	set_politics = {
		ruling_party = national_populist
		elections_allowed = no
	}
	GER_hire_tst_ministers = yes
	hidden_effect = {
		set_country_flag = GER_tst_coup
		mark_focus_tree_layout_dirty = yes
		GER_finish_event_chain_focus = yes
		country_event = gertst.1
	}
}

add_temp_unit_leader_role = {
	hidden_effect = {
		if = {
			limit = { is_unit_leader = no }
			add_corps_commander_role = {
				skill = 1
				traits = { just_visiting }
				visible = { always = no }
			}
			set_character_flag = temp_unit_leader
		}
	}
}

remove_temp_unit_leader_role = {
	hidden_effect = {
		if = {
			limit = { has_character_flag = temp_unit_leader }
			remove_unit_leader_role = yes
			clr_character_flag = temp_unit_leader
		}
	}
}

# Usage;
#
# set_temp_variable = { idea_name = token:idea_name }
# add_idea_german_tag = yes
#

# add_idea_german_tag_root = {
# 	meta_effect = {
# 		text = {
# 			add_idea = [TAG]_[name]
# 		}
# 		TAG = "[?ROOT.GetTag]"
# 		name = "[?idea_name.GetTokenKey]"
# 	}
# }


d_test_smh = {
	log = "[?attitude@bayern]"
}

# cant get this shit to work, i give up
# d_test_2darr = {

# 	add_to_array = { global.german_renames_1 = 10 }
# 	add_to_array = { global.german_renames_1 = 3544 }

# 	add_to_array = { global.german_renames_2 = 799 }
# 	add_to_array = { global.german_renames_2 = 9427 }

# 	# global.east_states_GER^num
# 	set_variable = { global.east_states_GER_length = 42 }
# 	add_to_variable = { global.east_states_GER_length = 1 }
# 	for_loop_effect = {
# 		start = 1
# 		end = global.east_states_GER_length
# 		value = v
# 		add_to_array = { global.east_states_GER_indices = v }
# 		log = "Adding [?v] to arr global.east_states_GER_indices"
# 	}

# 	for_each_loop = {
# 		array = global.east_states_GER_indices
# 		value = v
# 		for_each_loop = {
# 			array = global.german_renames_@var:v
# 			value = v
# 			if = { 
# 				limit = { check_variable = { i = 0 } }
# 				set_temp_variable = { curr_state = v }
# 			} else_if = {
# 				limit = { check_variable = { i = 1 } }
# 				set_temp_variable = { curr_province = v }
# 			} else = { set_variable = { break = 1 } }
# 		}
# 		log = "[?curr_state] ::: [?curr_province]"
# 		# set_temp_variable = { curr_state = global.german_renames_@var:v^0 }
# 		# set_temp_variable = { curr_province = global.german_renames_@var:v^1 }
# 		if = {
# 			limit = {
# 				var:curr_state = {
# 					controller = { GER_rl_control_check = yes }
# 				}
# 			}
# 			var:curr_state = {
# 				meta_effect = {
# 					debug = yes
# 					text = {
# 						set_state_name = GER_STATE_[GetState]
# 						set_province_name = {
# 							id = [GetProvince]
# 							name = GER_STATE_[GetState]
# 						}
# 					}
# 					GetState = "[?curr_state]"
# 					GetProvince = "[?curr_province]"
# 				}
# 			}
# 			# meta_effect = {
# 			# 	debug = yes
# 			# 	text = {
# 			# 		[GetState] = {
# 			# 			set_state_name = GER_STATE_[GetState]
# 			# 			set_province_name = {
# 			# 				id = [GetProvince]
# 			# 				name = GER_STATE_[GetState]
# 			# 			}
# 			# 		}
# 			# 	}
# 			# 	GetState = "[?curr_state]"
# 			# 	GetProvince = "[?curr_province]"
# 			# }
# 		}

# 		clear_variable = curr_state
# 		clear_variable = curr_province
# 	}
# 		# for_each_loop = {
# 		# 	array = global.german_renames_@var:v
# 		# 	value = j
# 		# 	index = i
# 		# }
# 	}
# }

GER_rename_east = { # retired, remove if you aint gon use it, change ifs/loc accordingly :) -- bruh this is not what I meant.
	if = {
		limit = { 10 = { controller = { GER_rl_control_check = yes } } }
		10 = {
			set_state_name = GER_STATE_10
			set_province_name = {
				id = 3544
				name = GER_STATE_10
			}
		}
	}
	if = {
		limit = { 799 = { controller = { GER_rl_control_check = yes } } }
		799 = {
			set_state_name = GER_STATE_799
			set_province_name = {
				id = 9427
				name = GER_STATE_799
			}
		}
	}
	if = {
		limit = { 1065 = { controller = { GER_rl_control_check = yes } } }
		1065 = { set_state_name = GER_chelm }
	}
	if = {
		limit = { 88 = { controller = { GER_rl_control_check = yes } } }
		88 = {
			set_state_name = GER_przemysl
			set_province_name = {
				id = 6522
				name = GER_przemysl
			}
		}
	}
	if = {
		limit = { 89 = { controller = { GER_rl_control_check = yes } } }
		89 = {
			set_state_name = GER_stanislawow
			set_province_name = {
				id = 11411
				name = GER_stanislawow
			}
		}
	}
	if = {
		limit = { 91 = { controller = { GER_rl_control_check = yes } } }
		91 = {
			set_state_name = GER_lwow
			set_province_name = {
				id = 11479
				name = GER_lwow
			}
		}
	}
	if = {
		limit = { 97 = { controller = { GER_rl_control_check = yes } } }
		97 = {
			set_state_name = GER_grodno
			set_province_name = {
				id = 3393
				name = GER_grodno
			}
		}
	}
	if = {
		limit = { 889 = { controller = { GER_rl_control_check = yes } } }
		889 = {
			set_state_name = GER_bialystok
			set_province_name = {
				id = 11301
				name = GER_bialystok
			}
		}
	}
	if = {
		limit = { 11 = { controller = { GER_rl_control_check = yes } } }
		11 = {
			set_state_name = GER_kaunas
			set_province_name = {
				id = 6296
				name = GER_kaunas
			}
		}
	}
	if = {
		limit = { 189 = { controller = { GER_rl_control_check = yes } } }
		189 = {
			set_state_name = GER_siauliai
			set_province_name = {
				id = 9483
				name = GER_siauliai
			}
		}
	}
	if = {
		limit = { 96 = { controller = { GER_rl_control_check = yes } } }
		96 = {
			set_state_name = GER_vilnius
			set_province_name = {
				id = 3320
				name = GER_vilnius
			}
		}
	}
	if = {
		limit = { 13 = { controller = { GER_rl_control_check = yes } } }
		13 = {
			set_state_name = GER_STATE_13
			set_province_name = {
				id = 3152
				name = GER_tallinn
			}
		}
	}
	if = {
		limit = { 191 = { controller = { GER_rl_control_check = yes } } }
		191 = {
			set_state_name = GER_tartu
			set_province_name = {
				id = 9221
				name = GER_tartu
			}
		}
	}
	if = {
		limit = { 758 = { controller = { GER_rl_control_check = yes } } }
		758 = { set_state_name = GER_STATE_12 }
	}
	if = {
		limit = { 19 = { controller = { GER_rl_control_check = yes } } }
		19 = {
			set_state_name = GER_STATE_190
			set_province_name = {
				id = 3194
				name = GER_kuldiga
			}
		}
	}
	if = {
		limit = { 12 = { controller = { GER_rl_control_check = yes } } }
		12 = { set_state_name = GER_STATE_12 }
	}
	if = {
		limit = { 914 = { controller = { GER_rl_control_check = yes } } }
		914 = {
			set_state_name = GER_daugavpils
			set_province_name = {
				id = 310
				name = GER_daugavpils
			}
		}
	}
	if = {
		limit = { 95 = { controller = { GER_rl_control_check = yes } } }
		95 = {
			set_province_name = {
				id = 9304
				name = GER_baranavichy
			}
		}
	}
	if = {
		limit = { 204 = { controller = { GER_rl_control_check = yes } } }
		204 = {
			set_state_name = GER_babruysk
			set_province_name = {
				id = 386
				name = GER_babruysk
			}
		}
	}
	if = {
		limit = { 194 = { controller = { GER_rl_control_check = yes } } }
		194 = {
			set_state_name = GER_STATE_194
			set_province_name = {
				id = 3203
				name = GER_mozyr
			}
		}
	}
	if = {
		limit = { 206 = { controller = { GER_rl_control_check = yes } } }
		206 = {
			set_province_name = {
				id = 9289
				name = GER_mogilev
			}
			set_province_name = {
				id = 406
				name = GER_maladzyechna
			}
		}
	}
	if = {
		limit = { 207 = { controller = { GER_rl_control_check = yes } } }
		207 = {
			set_state_name = GER_STATE_207
			set_province_name = {
				id = 6371
				name = GER_polatsk
			}
		}
	}
	if = {
		limit = { 72 = { controller = { GER_rl_control_check = yes } } }
		72 = {
			set_state_name = GER_sevastopol
			set_province_name = {
				id = 3686
				name = GER_sevastopol
			}
		}
	}
	if = {
		limit = { 137 = { controller = { GER_rl_control_check = yes } } }
		137 = {
			set_state_name = GER_STATE_137
			set_province_name = {
				id = 6704
				name = GER_simferopol
			}
			set_province_name = {
				id = 9680
				name = GER_kerch
			}
		}
	}
	if = {
		limit = { 953 = { controller = { GER_rl_control_check = yes } } }
		953 = { set_state_name = GER_mozyr }
	}
	if = {
		limit = { 94 = { controller = { GER_rl_control_check = yes } } }
		94 = {
			set_state_name = GER_STATE_94
			set_province_name = {
				id = 3392
				name = GER_berestia
			}
		}
	}
	if = {
		limit = { 93 = { controller = { GER_rl_control_check = yes } } }
		93 = {
			set_state_name = GER_STATE_93
			set_province_name = {
				id = 474
				name = GER_rivne
			}
		}
	}
	if = {
		limit = { 199 = { controller = { GER_rl_control_check = yes } } }
		199 = {
			set_state_name = GER_proskoriv
			set_province_name = {
				id = 3457
				name = GER_proskoriv
			}
		}
	}
	if = {
		limit = { 201 = { controller = { GER_rl_control_check = yes } } }
		201 = {
			set_state_name = GER_zhytomyr
			set_province_name = {
				id = 11514
				name = GER_zhytomyr
			}
		}
	}
	if = {
		limit = { 198 = { controller = { GER_rl_control_check = yes } } }
		198 = {
			set_state_name = GER_vinnytsia
			set_province_name = {
				id = 476
				name = GER_vinnytsia
			}
		}
	}
	if = {
		limit = { 203 = { controller = { GER_rl_control_check = yes } } }
		203 = {
			set_state_name = GER_cherkasy
			set_province_name = {
				id = 488
				name = GER_cherkasy
			}
		}
	}
	if = {
		limit = { 202 = { controller = { GER_rl_control_check = yes } } }
		202 = {
			set_state_name = GER_kyiv
			set_province_name = {
				id = 525
				name = GER_kyiv
			}
		}
	}
	if = {
		limit = { 197 = { controller = { GER_rl_control_check = yes } } }
		197 = {
			set_state_name = GER_mykolaiv
			set_province_name = {
				id = 11546
				name = GER_mykolaiv
			}
			set_province_name = {
				id = 3755
				name = GER_kherson
			}
		}
	}
	if = {
		limit = { 196 = { controller = { GER_rl_control_check = yes } } }
		196 = { set_state_name = GER_kherson }
	}
	if = {
		limit = { 226 = { controller = { GER_rl_control_check = yes } } }
		226 = {
			set_state_name = GER_sicheslav
			set_province_name = {
				id = 11437
				name = GER_sicheslav
			}
			set_province_name = {
				id = 11561
				name = GER_kryvyi_rih
			}
		}
	}
	if = {
		limit = { 193 = { controller = { GER_rl_control_check = yes } } }
		193 = {
			set_state_name = GER_chernhiv
			set_province_name = {
				id = 3568
				name = GER_chernhiv
			}
			set_province_name = {
				id = 9543
				name = GER_pereiaslav
			}
			set_province_name = {
				id = 11489
				name = GER_nizhyn
			}
		}
	}
	if = {
		limit = { 241 = { controller = { GER_rl_control_check = yes } } }
		241 = {
			set_state_name = GER_STATE_241
			set_province_name = {
				id = 9288
				name = GER_gomel
			}
		}
	}
	if = {
		limit = { 259 = { controller = { GER_rl_control_check = yes } } }
		259 = {
			set_state_name = GER_poltava
			set_province_name = {
				id = 11504
				name = GER_poltava
			}
		}
	}
	if = {
		limit = { 200 = { controller = { GER_rl_control_check = yes } } }
		200 = {
			set_state_name = GER_zaporizhia
			set_province_name = {
				id = 11405
				name = GER_zaporizhia
			}
		}
	}
	if = {
		limit = { 227 = { controller = { GER_rl_control_check = yes } } }
		227 = {
			set_state_name = GER_donetsk
			set_province_name = {
				id = 6474
				name = GER_donetsk
			}
		}
	}
	if = {
		limit = { 798 = { controller = { GER_rl_control_check = yes } } }
		798 = {
			set_state_name = GER_novosamarsk
			set_province_name = {
				id = 9463
				name = GER_novosamarsk
			}
		}
	}
	if = {
		limit = { 948 = { controller = { GER_rl_control_check = yes } } }
		948 = {
			set_province_name = {
				id = 11241
				name = GER_vitebsk
			}
		}
	}
	if = {
		limit = { 401 = { controller = { GER_rl_control_check = yes } } }
		401 = { set_state_name = GER_STATE_401 }
	}
	if = {
		limit = { 258 = { controller = { GER_rl_control_check = yes } } }
		258 = { set_state_name = GER_STATE_258 }
	}
	if = {
		limit = { 257 = { controller = { GER_rl_control_check = yes } } }
		257 = { set_state_name = GER_STATE_257 }
	}
	if = {
		limit = { 244 = { controller = { GER_rl_control_check = yes } } }
		244 = { set_state_name = GER_STATE_244 }
	}
	if = {
		limit = { 243 = { controller = { GER_rl_control_check = yes } } }
		243 = { set_state_name = GER_STATE_243 }
	}
	if = {
		limit = { 210 = { controller = { GER_rl_control_check = yes } } }
		210 = { set_state_name = GER_STATE_210 }
	}
	if = {
		limit = { 235 = { controller = { GER_rl_control_check = yes } } }
		235 = { set_state_name = GER_STATE_255 }
	}
	if = {
		limit = { 238 = { controller = { GER_rl_control_check = yes } } }
		238 = { set_state_name = GER_STATE_238 }
	}
	if = {
		limit = { 265 = { controller = { GER_rl_control_check = yes } } }
		265 = { set_state_name = GER_STATE_265 }
	}
	if = {
		limit = { 351 = { controller = { GER_rl_control_check = yes } } }
		351 = { set_state_name = GER_STATE_351 }
	}
	if = {
		limit = { 253 = { controller = { GER_rl_control_check = yes } } }
		253 = { set_state_name = GER_STATE_253 }
	}
	if = {
		limit = { 253 = { controller = { GER_rl_control_check = yes } } }
		254 = { set_state_name = GER_STATE_254 }
	}
	if = {
		limit = { 255 = { controller = { GER_rl_control_check = yes } } }
		255 = { set_state_name = GER_STATE_255 }
	}
	if = {
		limit = { 250 = { controller = { GER_rl_control_check = yes } } }
		250 = { set_state_name = GER_STATE_250 }
	}
	if = {
		limit = { 256 = { controller = { GER_rl_control_check = yes } } }
		256 = { set_state_name = GER_STATE_256 }
	}
	if = {
		limit = { 214 = { controller = { GER_rl_control_check = yes } } }
		214 = {
			set_state_name = GER_arkhangelsk
			set_province_name = {
				id = 3338
				name = GER_arkhangelsk
			}
		}
	}
	if = {
		limit = { 252 = { controller = { GER_rl_control_check = yes } } }
		252 = {
			set_state_name = GER_gorki
			set_province_name = {
				id = 11375
				name = GER_gorki
			}
		}
	}
	if = {
		limit = { 248 = { controller = { GER_rl_control_check = yes } } }
		248 = {
			set_state_name = GER_yaroslavl
			set_province_name = {
				id = 121
				name = GER_yaroslavl
			}
		}
	}
	if = {
		limit = { 264 = { controller = { GER_rl_control_check = yes } } }
		264 = {
			set_state_name = GER_tikhvin
			set_province_name = {
				id = 3140
				name = GER_tikhvin
			}
		}
	}
	if = {
		limit = { 209 = { controller = { GER_rl_control_check = yes } } }
		209 = {
			set_state_name = GER_pskov
			set_province_name = {
				id = 11202
				name = GER_pskov
			}
		}
	}
	if = {
		limit = { 263 = { controller = { GER_rl_control_check = yes } } }
		263 = {
			set_state_name = GER_novgorod
			set_province_name = {
				id = 117
				name = GER_novgorod
			}
		}
	}
	if = {
		limit = { 195 = { controller = { GER_rl_control_check = yes } } }
		195 = {
			set_state_name = GER_leningrad
			set_province_name = {
				id = 3151
				name = GER_leningrad
			}
		}
	}
	if = {
		limit = { 246 = { controller = { GER_rl_control_check = yes } } }
		246 = {
			set_state_name = GER_rzhev
			set_province_name = {
				id = 11349
				name = GER_rzhev
			}
		}
	}
	if = {
		limit = { 224 = { controller = { GER_rl_control_check = yes } } }
		224 = {
			set_state_name = GER_bryansk
			set_province_name = {
				id = 3335
				name = GER_bryansk
			}
		}
	}
	if = {
		limit = { 222 = { controller = { GER_rl_control_check = yes } } }
		222 = {
			set_state_name = GER_oryol
			set_province_name = {
				id = 9355
				name = GER_oryol
			}
		}
	}
	if = {
		limit = { 1062 = { controller = { GER_rl_control_check = yes } } }
		1062 = {
			set_state_name = GER_shotska
			set_province_name = {
				id = 9566
				name = GER_shotska
			}
		}
	}
	if = {
		limit = { 260 = { controller = { GER_rl_control_check = yes } } }
		260 = {
			set_state_name = GER_voronezh
			set_province_name = {
				id = 413
				name = GER_voronezh
			}
		}
	}
	if = {
		limit = { 219 = { controller = { GER_rl_control_check = yes } } }
		219 = {
			set_state_name = GER_moscow
			set_province_name = {
				id = 6380
				name = GER_moscow
			}
		}
	}
	if = {
		limit = { 247 = { controller = { GER_rl_control_check = yes } } }
		247 = {
			set_state_name = GER_kalinin
			set_province_name = {
				id = 6245
				name = GER_kalinin
			}
		}
	}
	if = {
		limit = { 239 = { controller = { GER_rl_control_check = yes } } }
		239 = {
			set_state_name = GER_saratov
			set_province_name = {
				id = 3578
				name = GER_saratov
			}
		}
	}
	if = {
		limit = { 217 = { controller = { GER_rl_control_check = yes } } }
		217 = {
			set_state_name = GER_narodograd
			set_province_name = {
				id = 3529
				name = GER_narodograd
			}
		}
	}
	if = {
		limit = { 1063 = { controller = { GER_rl_control_check = yes } } }
		1063 = {
			set_state_name = GER_millerovo
			set_province_name = {
				id = 3159
				name = GER_millerovo
			}
		}
	}
	if = {
		limit = { 245 = { controller = { GER_rl_control_check = yes } } }
		245 = {
			set_state_name = GER_morozovsk
			set_province_name = {
				id = 509
				name = GER_morozovsk
			}
		}
	}
	if = {
		limit = { 218 = { controller = { GER_rl_control_check = yes } } }
		218 = {
			set_state_name = GER_rostov
			set_province_name = {
				id = 9417
				name = GER_rostov
			}
		}
	}
	if = {
		limit = { 234 = { controller = { GER_rl_control_check = yes } } }
		234 = {
			set_state_name = GER_krasnodar
			set_province_name = {
				id = 3734
				name = GER_krasnodar
			}
		}
	}
	if = {
		limit = { 236 = { controller = { GER_rl_control_check = yes } } }
		236 = {
			set_state_name = GER_astrakhan
			set_province_name = {
				id = 9753
				name = GER_astrakhan
			}
		}
	}
}

GER_unrename_east = {
	if = {
		limit = { 10 = { controller = { GER_rl_control_check = no } } }
		10 = {
			reset_state_name = yes
			reset_province_name = 3544
		}
	}
	if = {
		limit = { 799 = { controller = { GER_rl_control_check = no } } }
		799 = {
			reset_state_name = yes
			reset_province_name = 9427
		}
	}
		if = {
		limit = { 1065 = { controller = { GER_rl_control_check = no } } }
		1065 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 88 = { controller = { GER_rl_control_check = no } } }
		88 = {
			reset_state_name = yes
			reset_province_name = 6522
		}
	}
	if = {
		limit = { 89 = { controller = { GER_rl_control_check = no } } }
		89 = {
			reset_state_name = yes
			reset_province_name = 11411
		}
	}
	if = {
		limit = { 91 = { controller = { GER_rl_control_check = no } } }
		91 = {
			reset_state_name = yes
			reset_province_name = 11479
		}
	}
	if = {
		limit = { 97 = { controller = { GER_rl_control_check = no } } }
		97 = {
			reset_state_name = yes
			reset_province_name = 3393
		}
	}
	if = {
		limit = { 889 = { controller = { GER_rl_control_check = no } } }
		889 = {
			reset_state_name = yes
			reset_province_name = 11301
		}
	}
	if = {
		limit = { 11 = { controller = { GER_rl_control_check = no } } }
		11 = {
			reset_state_name = yes
			reset_province_name = 6296
		}
	}
	if = {
		limit = { 189 = { controller = { GER_rl_control_check = no } } }
		189 = {
			reset_state_name = yes
			reset_province_name = 9483
		}
	}
	if = {
		limit = { 96 = { controller = { GER_rl_control_check = no } } }
		96 = {
			reset_state_name = yes
			reset_province_name = 3320
		}
	}
	if = {
		limit = { 13 = { controller = { GER_rl_control_check = no } } }
		13 = {
			reset_state_name = yes
			reset_province_name = 3152
		}
	}
	if = {
		limit = { 191 = { controller = { GER_rl_control_check = no } } }
		191 = {
			reset_state_name = yes
			reset_province_name = 9221
		}
	}
	if = {
		limit = { 758 = { controller = { GER_rl_control_check = no } } }
		758 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 19 = { controller = { GER_rl_control_check = no } } }
		19 = {
			reset_state_name = yes
			reset_province_name = 3194
		}
	}
	if = {
		limit = { 12 = { controller = { GER_rl_control_check = no } } }
		12 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 914 = { controller = { GER_rl_control_check = no } } }
		914 = {
			reset_state_name = yes
			reset_province_name = 310
		}
	}
	if = {
		limit = { 95 = { controller = { GER_rl_control_check = no } } }
		95 = {
			reset_province_name = 9304
		}
	}
	if = {
		limit = { 204 = { controller = { GER_rl_control_check = no } } }
		204 = {
			reset_state_name = yes
			reset_province_name = 386
		}
	}
	if = {
		limit = { 194 = { controller = { GER_rl_control_check = no } } }
		194 = {
			reset_state_name = yes
			reset_province_name = 3203
		}
	}
	if = {
		limit = { 206 = { controller = { GER_rl_control_check = no } } }
		206 = {
			reset_province_name = 9289
			reset_province_name = 406
		}
	}
	if = {
		limit = { 207 = { controller = { GER_rl_control_check = no } } }
		207 = {
			reset_state_name = yes
			reset_province_name = 6371
		}
	}
	if = {
		limit = { 72 = { controller = { GER_rl_control_check = no } } }
		72 = {
			reset_state_name = yes
			reset_province_name = 3686
		}
	}
	if = {
		limit = { 137 = { controller = { GER_rl_control_check = no } } }
		137 = {
			reset_state_name = yes
			reset_province_name = 6704
			reset_province_name = 9680
		}
	}
	if = {
		limit = { 953 = { controller = { GER_rl_control_check = no } } }
		953 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 94 = { controller = { GER_rl_control_check = no } } }
		94 = {
			reset_state_name = yes
			reset_province_name = 3392
		}
	}
	if = {
		limit = { 93 = { controller = { GER_rl_control_check = no } } }
		93 = {
			reset_state_name = yes
			reset_province_name = 474
		}
	}
	if = {
		limit = { 199 = { controller = { GER_rl_control_check = no } } }
		199 = {
			reset_state_name = yes
			reset_province_name = 3457
		}
	}
	if = {
		limit = { 201 = { controller = { GER_rl_control_check = no } } }
		201 = {
			reset_state_name = yes
			reset_province_name = 11514
		}
	}
	if = {
		limit = { 198 = { controller = { GER_rl_control_check = no } } }
		198 = {
			reset_state_name = yes
			reset_province_name = 476
		}
	}
	if = {
		limit = { 203 = { controller = { GER_rl_control_check = no } } }
		203 = {
			reset_state_name = yes
			reset_province_name = 488
		}
	}
	if = {
		limit = { 202 = { controller = { GER_rl_control_check = no } } }
		202 = {
			reset_state_name = yes
			reset_province_name = 525
		}
	}
	if = {
		limit = { 197 = { controller = { GER_rl_control_check = no } } }
		197 = {
			reset_state_name = yes
			reset_province_name = 11546
			reset_province_name = 3755
		}
	}
	if = {
		limit = { 196 = { controller = { GER_rl_control_check = no } } }
		196 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 226 = { controller = { GER_rl_control_check = no } } }
		226 = {
			reset_state_name = yes
			reset_province_name = 11437
			reset_province_name = 11561
		}
	}
	if = {
		limit = { 193 = { controller = { GER_rl_control_check = no } } }
		193 = {
			reset_state_name = yes
			reset_province_name = 3568
			reset_province_name = 9543
			reset_province_name = 11489
		}
	}
	if = {
		limit = { 241 = { controller = { GER_rl_control_check = no } } }
		241 = {
			reset_state_name = yes
			reset_province_name = 9288
		}
	}
	if = {
		limit = { 259 = { controller = { GER_rl_control_check = no } } }
		259 = {
			reset_state_name = yes
			reset_province_name = 11504
		}
	}
	if = {
		limit = { 200 = { controller = { GER_rl_control_check = no } } }
		200 = {
			reset_state_name = yes
			reset_province_name = 11405
		}
	}
	if = {
		limit = { 227 = { controller = { GER_rl_control_check = no } } }
		227 = {
			reset_state_name = yes
			reset_province_name = 6474
		}
	}
	if = {
		limit = { 798 = { controller = { GER_rl_control_check = no } } }
		798 = {
			reset_state_name = yes
			reset_province_name = 9463
		}
	}
	if = {
		limit = { 948 = { controller = { GER_rl_control_check = no } } }
		948 = {
			reset_province_name = 11241
		}
	}
	if = {
		limit = { 401 = { controller = { GER_rl_control_check = no } } }
		401 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 258 = { controller = { GER_rl_control_check = no } } }
		258 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 257 = { controller = { GER_rl_control_check = no } } }
		257 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 244 = { controller = { GER_rl_control_check = no } } }
		244 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 243 = { controller = { GER_rl_control_check = no } } }
		243 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 210 = { controller = { GER_rl_control_check = no } } }
		210 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 235 = { controller = { GER_rl_control_check = no } } }
		235 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 238 = { controller = { GER_rl_control_check = no } } }
		238 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 265 = { controller = { GER_rl_control_check = no } } }
		265 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 351 = { controller = { GER_rl_control_check = no } } }
		351 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 253 = { controller = { GER_rl_control_check = no } } }
		253 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 254 = { controller = { GER_rl_control_check = no } } }
		254 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 255 = { controller = { GER_rl_control_check = no } } }
		255 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 250 = { controller = { GER_rl_control_check = no } } }
		250 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 256 = { controller = { GER_rl_control_check = no } } }
		256 = {
			reset_state_name = yes
		}
	}
	if = {
		limit = { 214 = { controller = { GER_rl_control_check = no } } }
		214 = {
			reset_state_name = yes
			reset_province_name = 3338
		}
	}
	if = {
		limit = { 252 = { controller = { GER_rl_control_check = no } } }
		252 = {
			reset_state_name = yes
			reset_province_name = 11375
		}
	}
	if = {
		limit = { 248 = { controller = { GER_rl_control_check = no } } }
		248 = {
			reset_state_name = yes
			reset_province_name = 121
		}
	}
	if = {
		limit = { 264 = { controller = { GER_rl_control_check = no } } }
		264 = {
			reset_state_name = yes
			reset_province_name = 3140
		}
	}
	if = {
		limit = { 209 = { controller = { GER_rl_control_check = no } } }
		209 = {
			reset_state_name = yes
			reset_province_name = 11202
		}
	}
	if = {
		limit = { 263 = { controller = { GER_rl_control_check = no } } }
		263 = {
			reset_state_name = yes
			reset_province_name = 117
		}
	}
	if = {
		limit = { 195 = { controller = { GER_rl_control_check = no } } }
		195 = {
			reset_state_name = yes
			reset_province_name = 3151
		}
	}
	if = {
		limit = { 246 = { controller = { GER_rl_control_check = no } } }
		246 = {
			reset_state_name = yes
			reset_province_name = 11349
		}
	}
	if = {
		limit = { 224 = { controller = { GER_rl_control_check = no } } }
		224 = {
			reset_state_name = yes
			reset_province_name = 3335
		}
	}
	if = {
		limit = { 222 = { controller = { GER_rl_control_check = no } } }
		222 = {
			reset_state_name = yes
			reset_province_name = 9355
		}
	}
	if = {
		limit = { 1062 = { controller = { GER_rl_control_check = no } } }
		1062 = {
			reset_state_name = yes
			reset_province_name = 9566
		}
	}
	if = {
		limit = { 260 = { controller = { GER_rl_control_check = no } } }
		260 = {
			reset_state_name = yes
			reset_province_name = 413
		}
	}
	if = {
		limit = { 219 = { controller = { GER_rl_control_check = no } } }
		219 = {
			reset_state_name = yes
			reset_province_name = 6380
		}
	}
	if = {
		limit = { 247 = { controller = { GER_rl_control_check = no } } }
		247 = {
			reset_state_name = yes
			reset_province_name = 6245
		}
	}
	if = {
		limit = { 239 = { controller = { GER_rl_control_check = no } } }
		239 = {
			reset_state_name = yes
			reset_province_name = 3578
		}
	}
	if = {
		limit = { 217 = { controller = { GER_rl_control_check = no } } }
		217 = {
			reset_state_name = yes
			reset_province_name = 3529
		}
	}
	if = {
		limit = { 1063 = { controller = { GER_rl_control_check = no } } }
		1063 = {
			reset_state_name = yes
			reset_province_name = 3159
		}
	}
	if = {
		limit = { 245 = { controller = { GER_rl_control_check = no } } }
		245 = {
			reset_state_name = yes
			reset_province_name = 509
		}
	}
	if = {
		limit = { 218 = { controller = { GER_rl_control_check = no } } }
		218 = {
			reset_state_name = yes
			reset_province_name = 9417
		}
	}
	if = {
		limit = { 234 = { controller = { GER_rl_control_check = no } } }
		234 = {
			reset_state_name = yes
			reset_province_name = 3734
		}
	}
	if = {
		limit = { 236 = { controller = { GER_rl_control_check = no } } }
		236 = {
			reset_state_name = yes
			reset_province_name = 9753
		}
	}	
}